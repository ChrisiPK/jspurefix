{"version":3,"file":"to-views.js","sourceRoot":"","sources":["../../../src/test/env/to-views.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA4B;AAG5B,yCAA0C;AAE1C,8CAA+C;AAC/C,8CAAgD;AAEhD,qCAA8C;AAE9C,MAAa,OAAO;IAMlB,YAA6B,UAAkB;QAAlB,eAAU,GAAV,UAAU,CAAQ;QAJ/B,UAAK,GAAc,EAAE,CAAA;QAC9B,UAAK,GAAY,IAAI,CAAA;QACX,SAAI,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,eAAe,CAAC,CAAA;IAGrE,CAAC;IAEY,IAAI,CAAE,OAAe,WAAW;;YAC3C,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;YACtB,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAA;YAClC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAA;YACxB,IAAI,CAAC,WAAW,GAAG,MAAM,IAAI,wBAAiB,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;YACrE,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAA;YACpC,MAAM,EAAE,GAAQ,OAAO,CAAC,IAAI,CAAC,CAAA;YAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,UAAU,UAAU,CAAC,CAAA;YACzD,MAAM,UAAU,GAAe,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAA;YAC5D,MAAM,kBAAkB,GAAwB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC,CAAA;YACvG,MAAM,MAAM,GAAG,IAAI,oBAAW,CAAC,IAAI,EAAE,WAAW,EAAE,kBAAkB,EAAE,kBAAU,CAAC,IAAI,CAAC,CAAA;YACtF,MAAM,SAAS,GAAc,IAAI,mBAAW,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;YAChE,OAAO,IAAI,OAAO,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;gBACpC,SAAS,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,OAAe,EAAE,CAAU,EAAE,EAAE;oBAClD,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAA;gBACvB,CAAC,CAAC,CAAA;gBACF,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,OAAe,EAAE,CAAU,EAAE,EAAE;oBACpD,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,EAAE,CAAA;gBACxB,CAAC,CAAC,CAAA;gBACF,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;oBACzB,MAAM,CAAC,IAAI,CAAC,CAAA;gBACd,CAAC,CAAC,CAAA;gBACF,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAQ,EAAE,EAAE;oBACjC,MAAM,CAAC,CAAC,CAAC,CAAA;gBACX,CAAC,CAAC,CAAA;YACJ,CAAC,CAAC,CAAA;QACJ,CAAC;KAAA;CACF;AApCD,0BAoCC","sourcesContent":["import * as path from 'path'\nimport { ReadStream } from 'fs'\nimport { ISessionDescription } from '../../transport'\nimport { JsFixConfig } from '../../config'\nimport { MsgParser, MsgView } from '../../buffer'\nimport { AsciiChars } from '../../buffer/ascii'\nimport { FiXmlParser } from '../../buffer/fixml'\nimport { FixDefinitions } from '../../dictionary/definition'\nimport { DefinitionFactory } from '../../util'\n\nexport class ToViews {\n  public definitions: FixDefinitions\n  public readonly views: MsgView[] = []\n  public batch: MsgView = null\n  private readonly root: string = path.join(__dirname, '../../../data')\n\n  constructor (public readonly testFolder: string) {\n  }\n\n  public async load (file: string = 'repofixml'): Promise<any> {\n    const root = this.root\n    const testFolder = this.testFolder\n    const views = this.views\n    this.definitions = await new DefinitionFactory().getDefinitions(file)\n    const definitions = this.definitions\n    const fs: any = require('fs')\n    const fullName = path.join(root, `${testFolder}/fix.xml`)\n    const readStream: ReadStream = fs.createReadStream(fullName)\n    const sessionDescription: ISessionDescription = require(path.join(root, 'session/test-initiator.json'))\n    const config = new JsFixConfig(null, definitions, sessionDescription, AsciiChars.Pipe)\n    const xmlParser: MsgParser = new FiXmlParser(config, readStream)\n    return new Promise((accept, reject) => {\n      xmlParser.on('msg', (msgType: string, v: MsgView) => {\n        views.push(v.clone())\n      })\n      xmlParser.on('batch', (msgType: string, v: MsgView) => {\n        this.batch = v.clone()\n      })\n      xmlParser.on('close', () => {\n        accept(true)\n      })\n      xmlParser.on('error', (e: Error) => {\n        reject(e)\n      })\n    })\n  }\n}\n"]}