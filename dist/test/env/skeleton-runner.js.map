{"version":3,"file":"skeleton-runner.js","sourceRoot":"","sources":["../../../src/test/env/skeleton-runner.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iFAA4E;AAC5E,yCAAqD;AAKrD,MAAa,cAAc;IAIzB,YAA6B,UAAsB,EAAkB,gBAAwB,CAAC;QAAjE,eAAU,GAAV,UAAU,CAAY;QAAkB,kBAAa,GAAb,aAAa,CAAY;QAC5F,IAAI,CAAC,cAAc,GAAG,IAAI,kCAAe,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,aAAa,EAAE,KAAK,CAAC,CAAA;QACzF,IAAI,CAAC,cAAc,GAAG,IAAI,kCAAe,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,aAAa,EAAE,KAAK,CAAC,CAAA;QACzF,IAAI,CAAC,cAAc,CAAC,iBAAiB,GAAG,IAAI,CAAA;QAC5C,IAAI,CAAC,cAAc,CAAC,iBAAiB,GAAG,IAAI,CAAA;QAE5C,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAY,EAAE,IAAa,EAAE,EAAE;YAC7E,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAA;YAC1C,IAAI,CAAC,QAAQ,EAAE,CAAA;QACjB,CAAC,CAAC,CAAA;QAEF,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAY,EAAE,IAAa,EAAE,EAAE;YAC7E,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAA;YAC1C,IAAI,CAAC,QAAQ,EAAE,CAAA;QACjB,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE;YAClC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QAClC,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE;YAClC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QAClC,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,QAAQ;QACN,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAA;QAClC,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,KAAK,CAAA;QACtC,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,KAAK,CAAA;QAEtC,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAA;QACxC,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAA;QAExC,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,GAAG,EAAE,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAA;QAC3D,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,GAAG,EAAE,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAA;QAC3D,MAAM,IAAI,GAAG,UAAU,IAAI,UAAU,CAAA;QACrC,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAA;YAC1B,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAA;SAC3B;IACH,CAAC;IAED,OAAO,CAAE,OAAe,EAAE,CAAe;QACvC,IAAI,KAAK,GAAG,CAAC,CAAA;QACb,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE;YACtD,IAAI,KAAK,KAAK,CAAC,EAAE;gBACf,KAAK,EAAE,CAAA;gBACP,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;aAC5C;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,QAAQ,CAAE,QAAgB;QACxB,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAA;QAClC,IAAI,QAAQ,EAAE;YACZ,IAAI,IAAI,GAAY,KAAK,CAAA;YACzB,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;gBACzD,MAAM,EAAE,GAAG,IAAI,sBAAa,EAAE,CAAA;gBAC9B,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA;gBACxB,IAAI,CAAC,IAAI,EAAE;oBACT,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAA;oBAC7D,MAAM,EAAE,GAAG,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,WAAkC,CAAA;oBACzE,EAAE,CAAC,SAAS,EAAE,CAAA;oBACd,IAAI,GAAG,IAAI,CAAA;iBACZ;YACH,CAAC,CAAC,CAAA;SACH;IACH,CAAC;IAED,IAAI;QACF,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAA;QAC1B,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAA;IAC5B,CAAC;IAEK,IAAI;;YACR,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAA;YAClC,MAAM,OAAO,CAAC,GAAG,CAAC;gBAChB,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC;gBACpD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC;gBACpD,IAAI,OAAO,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;oBAC7B,IAAI,MAAM,GAAG,IAAI,CAAA;oBACjB,IAAI;wBACF,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE;4BACvB,IAAI,CAAC,IAAI,EAAE,CAAA;4BACX,MAAM,CAAC,IAAI,CAAC,CAAA;wBACd,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAA;qBACpC;oBAAC,OAAO,CAAC,EAAE;wBACV,IAAI,MAAM,EAAE;4BACV,YAAY,CAAC,MAAM,CAAC,CAAA;yBACrB;wBACD,IAAI,CAAC,IAAI,EAAE,CAAA;wBACX,MAAM,CAAC,CAAC,CAAC,CAAA;qBACV;gBACH,CAAC,CAAC;aAAC,CAAC,CAAA;QACR,CAAC;KAAA;CACF;AAnGD,wCAmGC","sourcesContent":["import { SkeletonSession } from '../../sample/tcp/skeleton/skeleton-session'\nimport { ElasticBuffer, MsgView } from '../../buffer'\nimport { ILooseObject } from '../../collections/collection'\nimport { AsciiMsgTransmitter } from '../../transport/ascii/ascii-msg-transmitter'\nimport { Experiment } from './experiment'\n\nexport class SkeletonRunner {\n  clientSkeleton: SkeletonSession\n  serverSkeleton: SkeletonSession\n\n  constructor (public readonly experiment: Experiment, public readonly logoutSeconds: number = 1) {\n    this.clientSkeleton = new SkeletonSession(experiment.client.config, logoutSeconds, false)\n    this.serverSkeleton = new SkeletonSession(experiment.server.config, logoutSeconds, false)\n    this.clientSkeleton.checkMsgIntegrity = true\n    this.serverSkeleton.checkMsgIntegrity = true\n\n    experiment.client.transport.receiver.on('msg', (type: string, view: MsgView) => {\n      experiment.client.views.push(view.clone())\n      this.watchdog()\n    })\n\n    experiment.server.transport.receiver.on('msg', (type: string, view: MsgView) => {\n      experiment.server.views.push(view.clone())\n      this.watchdog()\n    })\n\n    this.clientSkeleton.on('error', e => {\n      experiment.client.errors.push(e)\n    })\n\n    this.serverSkeleton.on('error', e => {\n      experiment.server.errors.push(e)\n    })\n  }\n\n  watchdog () {\n    const experiment = this.experiment\n    const cviews = experiment.client.views\n    const sviews = experiment.server.views\n\n    const cerrors = experiment.client.errors\n    const serrors = experiment.server.errors\n\n    const clientStop = cviews.length > 20 || cerrors.length > 0\n    const serverStop = sviews.length > 20 || serrors.length > 0\n    const stop = clientStop || serverStop\n    if (stop) {\n      this.clientSkeleton.done()\n      this.serverSkeleton.done()\n    }\n  }\n\n  sendMsg (msgType: string, o: ILooseObject): void {\n    let count = 0\n    this.experiment.client.transport.receiver.on('msg', m => {\n      if (count === 0) {\n        count++\n        this.clientSkeleton.sendMessage(msgType, o)\n      }\n    })\n  }\n\n  sendText (followOn: string): void {\n    const experiment = this.experiment\n    if (followOn) {\n      let sent: boolean = false\n      experiment.client.transport.transmitter.on('encoded', () => {\n        const b1 = new ElasticBuffer()\n        b1.writeString(followOn)\n        if (!sent) {\n          experiment.client.transport.duplex.writable.write(b1.slice())\n          const at = experiment.client.transport.transmitter as AsciiMsgTransmitter\n          at.msgSeqNum++\n          sent = true\n        }\n      })\n    }\n  }\n\n  done () {\n    this.clientSkeleton.done()\n    this.serverSkeleton.done()\n  }\n\n  async wait () {\n    const experiment = this.experiment\n    await Promise.all([\n      this.clientSkeleton.run(experiment.client.transport),\n      this.serverSkeleton.run(experiment.server.transport),\n      new Promise((accept, reject) => {\n        let handle = null\n        try {\n          handle = setTimeout(() => {\n            this.done()\n            accept(true)\n          }, (this.logoutSeconds + 2) * 1000)\n        } catch (e) {\n          if (handle) {\n            clearTimeout(handle)\n          }\n          this.done()\n          reject(e)\n        }\n      })])\n  }\n}\n"]}