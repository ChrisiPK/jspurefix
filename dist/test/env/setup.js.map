{"version":3,"file":"setup.js","sourceRoot":"","sources":["../../../src/test/env/setup.ts"],"names":[],"mappings":"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","sourcesContent":["import { FixDefinitions } from '../../dictionary/definition'\nimport { DITokens } from '../../runtime/di-tokens'\nimport { SessionContainer } from '../../runtime'\nimport { ISessionDescription, ISessionMsgFactory, MsgTransmitter, StringDuplex } from '../../transport'\nimport { DependencyContainer } from 'tsyringe'\nimport { IJsFixConfig } from '../../config'\nimport * as path from 'path'\nimport { FileReplayer } from '../../util'\nimport { ElasticBuffer, MsgView } from '../../buffer'\nimport { AsciiParser } from '../../buffer/ascii'\nimport { ParsingResult } from './parsing-result'\nconst root: string = path.join(__dirname, '../../../data')\n\nexport class TestEntity {\n  public readonly fixContainer: SessionContainer = new SessionContainer()\n  public readonly description: ISessionDescription\n  public sessionContainer: DependencyContainer\n  public config: IJsFixConfig\n  public replayer: FileReplayer\n  public rxBuffer: ElasticBuffer\n  public txBuffer: ElasticBuffer\n  public transmitter: MsgTransmitter\n\n  public sessionMsgFactory: ISessionMsgFactory\n\n  constructor (public readonly sessionPath: string) {\n    this.description = require(path.join(root, this.sessionPath))\n  }\n\n  async getViews (fix: string = 'examples/FIX.4.4/fix.txt'): Promise<MsgView[]> {\n    return this.replayer.replayFixFile(path.join(root, fix))\n  }\n\n  getAsciiParser (text: string, chunks: boolean = false): AsciiParser {\n    return new AsciiParser(this.config, new StringDuplex(text, chunks).readable, this.rxBuffer)\n  }\n\n  parseText (text: string, chunks: boolean = false): Promise<ParsingResult> {\n    return new Promise<any>((resolve, reject) => {\n      const parser = this.getAsciiParser(text, chunks)\n      parser.on('error', (e: Error) => {\n        reject(e)\n      })\n      parser.on('msg', (msgType: string, view: MsgView) => {\n        resolve(new ParsingResult('msg', msgType, view.clone(), parser.state.elasticBuffer.toString(), parser))\n      })\n      parser.on('done', () => {\n        resolve(new ParsingResult('done', null,null, parser.state.elasticBuffer.toString(), parser))\n      })\n    })\n  }\n\n  async make () {\n    this.fixContainer.reset()\n    this.fixContainer.registerGlobal('error')\n    this.sessionContainer = await this.fixContainer.makeSystem(this.description)\n    const container = this.sessionContainer\n    this.config = container.resolve<IJsFixConfig>(DITokens.IJsFixConfig)\n    this.config.delimiter = this.config.logDelimiter\n    this.replayer = new FileReplayer(this.config)\n\n    this.sessionMsgFactory = container.resolve<ISessionMsgFactory>(DITokens.ISessionMsgFactory)\n    if (container.isRegistered(DITokens.ParseBuffer)) {\n      this.rxBuffer = container.resolve<ElasticBuffer>(DITokens.ParseBuffer)\n    }\n    if (container.isRegistered(DITokens.TransmitBuffer)) {\n      this.txBuffer = container.resolve<ElasticBuffer>(DITokens.TransmitBuffer)\n    }\n    if (container.isRegistered(DITokens.MsgTransmitter)) {\n      this.transmitter = container.resolve<MsgTransmitter>(DITokens.MsgTransmitter)\n    }\n  }\n}\n\nexport class Setup {\n  public definitions: FixDefinitions\n  client: TestEntity\n  server: TestEntity\n  clientConfig: IJsFixConfig\n  serverConfig: IJsFixConfig\n  clientDescription: ISessionDescription\n  clientSessionContainer: DependencyContainer\n\n  constructor (public readonly clientPath: string = 'session/test-initiator.json',\n               public readonly serverPath: string = 'session/test-acceptor.json') {\n\n    this.client = new TestEntity(clientPath)\n    if (serverPath) {\n      this.server = new TestEntity(serverPath)\n    }\n  }\n\n  async init () {\n    if (this.client) {\n      await this.client.make()\n      this.definitions = this.client.config.definitions\n      this.clientConfig = this.client.config\n      this.clientSessionContainer = this.client.sessionContainer\n      this.clientDescription = this.client.description\n    }\n    if (this.server) {\n      await this.server.make()\n      this.serverConfig = this.server.config\n    }\n  }\n}\n"]}