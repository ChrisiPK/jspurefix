{"version":3,"file":"experiment.js","sourceRoot":"","sources":["../../../src/test/env/experiment.ts"],"names":[],"mappings":";;;AAEA,+CAAyD;AAIzD,qDAAsD;AAEtD,MAAM,SAAS;IAIb,YAA6B,MAAoB,EACpB,SAAoB,IAAI,wBAAY,EAAE,EACtC,YAA0B,IAAI,sBAAY,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC;QAF7D,WAAM,GAAN,MAAM,CAAc;QACpB,WAAM,GAAN,MAAM,CAAgC;QACtC,cAAS,GAAT,SAAS,CAAoD;QAL1E,UAAK,GAAc,EAAE,CAAA;QACrB,WAAM,GAAY,EAAE,CAAA;IAKpC,CAAC;CACF;AAED,MAAa,UAAU;IAYrB,YAAa,KAAY;QACvB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,iBAA2C,CAAA;QAC7E,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,iBAA2C,CAAA;QAE7E,MAAM,YAAY,GAAG,KAAK,CAAC,YAAY,CAAA;QACvC,MAAM,YAAY,GAAG,KAAK,CAAC,YAAY,CAAA;QAEvC,IAAI,CAAC,MAAM,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,CAAA;QACzC,IAAI,CAAC,MAAM,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,CAAA;QAIzC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;QACrD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;IACvD,CAAC;IApBD,QAAQ,CAAE,GAAc,EAAE,GAAc;QACtC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;YACvC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACzB,CAAC,CAAC,CAAA;IACJ,CAAC;CAiBF;AA3BD,gCA2BC","sourcesContent":["\nimport { AsciiSessionMsgFactory } from '../../transport/ascii'\nimport { FixDuplex, StringDuplex } from '../../transport'\nimport { Setup } from './setup'\nimport { MsgView } from '../../buffer'\nimport { IJsFixConfig } from '../../config'\nimport { MsgTransport } from '../../transport/factory'\n\nclass FixEntity {\n  public readonly views: MsgView[] = []\n  public readonly errors: Error[] = []\n\n  constructor (public readonly config: IJsFixConfig,\n               public readonly duplex: FixDuplex = new StringDuplex(),\n               public readonly transport: MsgTransport = new MsgTransport(0, config, duplex)) {\n  }\n}\n\nexport class Experiment {\n  public readonly client: FixEntity\n  public readonly clientFactory: AsciiSessionMsgFactory\n  public readonly serverFactory: AsciiSessionMsgFactory\n  public readonly server: FixEntity\n\n  loopBack (lhs: FixDuplex, rhs: FixDuplex) {\n    lhs.writable.on('data', (data: Buffer) => {\n      rhs.readable.push(data)\n    })\n  }\n\n  constructor (setup: Setup) {\n    this.clientFactory = setup.client.sessionMsgFactory as AsciiSessionMsgFactory\n    this.serverFactory = setup.server.sessionMsgFactory as AsciiSessionMsgFactory\n\n    const clientConfig = setup.clientConfig\n    const serverConfig = setup.serverConfig\n\n    this.client = new FixEntity(clientConfig)\n    this.server = new FixEntity(serverConfig)\n\n    // using a string duplex so pipe a write to client to read to server\n    // to simulate a tcp connection.\n    this.loopBack(this.client.duplex, this.server.duplex)\n    this.loopBack(this.server.duplex, this.client.duplex)\n  }\n}\n"]}