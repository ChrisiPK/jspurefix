{"version":3,"file":"elastic-buffer.test.js","sourceRoot":"","sources":["../../src/test/elastic-buffer.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'reflect-metadata'\n\nimport { ElasticBuffer } from '../buffer'\nimport { AsciiChars } from '../buffer/ascii'\n\ntest('1 char in buffer length 1', () => {\n  const buffer = new ElasticBuffer(1)\n  buffer.writeChar(AsciiChars.Dot)\n  expect(buffer.getPos()).toEqual(1)\n  expect(buffer.toString()).toEqual('.')\n  expect(buffer.currentSize()).toEqual(1)\n})\n\ntest('string', () => {\n  const s: string = 'fixing up fix'\n  const buffer = new ElasticBuffer(1)\n  buffer.writeString(s)\n  expect(buffer.getPos()).toEqual(s.length)\n  expect(buffer.toString()).toEqual(s)\n  expect(buffer.currentSize()).toEqual(16)\n})\n\ntest('whole number', () => {\n  const n: number = 12345\n  const buffer = new ElasticBuffer(10)\n  buffer.writeWholeNumber(n)\n  const asString = buffer.toString()\n  expect(buffer.getPos()).toEqual(asString.length)\n  expect(asString).toEqual('12345')\n  expect(buffer.getWholeNumber(0, asString.length - 1)).toEqual(n)\n  expect(buffer.currentSize() === 10)\n})\n\ntest('-ve number', () => {\n  const n: number = -2468\n  const buffer = new ElasticBuffer(10)\n  buffer.writeWholeNumber(n)\n  const asString = buffer.toString()\n  expect(buffer.getPos()).toEqual(asString.length)\n  expect(asString).toEqual('-2468')\n  expect(buffer.getWholeNumber(0, asString.length - 1)).toEqual(n)\n  expect(buffer.currentSize()).toEqual(10)\n})\n\ntest('+ve number with explicit sign', () => {\n  const n: number = 2468\n  const buffer = new ElasticBuffer(10)\n  buffer.writeString(`+${n}`)\n  const asString = buffer.toString()\n  expect(asString).toEqual('+2468')\n  expect(buffer.getWholeNumber(0, asString.length - 1)).toEqual(n)\n})\n\ntest('floating point', () => {\n  const n: number = 12345.6789\n  const buffer = new ElasticBuffer(10)\n  buffer.writeNumber(n)\n  const asString = buffer.toString()\n  expect(buffer.getPos()).toEqual(asString.length)\n  expect(asString).toEqual('12345.6789')\n  expect(buffer.getFloat(0, asString.length - 1)).toEqual(n)\n  expect(buffer.currentSize()).toEqual(10)\n})\n\ntest('floating point 1 dp', () => {\n  const n: number = 12345678.9\n  const buffer = new ElasticBuffer(10)\n  buffer.writeNumber(n)\n  const asString = buffer.toString()\n  expect(buffer.getPos()).toEqual(asString.length)\n  expect(asString).toEqual('12345678.9')\n  expect(buffer.getFloat(0, asString.length - 1)).toEqual(n)\n  expect(buffer.currentSize()).toEqual(10)\n})\n\ntest('-ve floating point', () => {\n  const n: number = -12345.6789\n  const buffer = new ElasticBuffer(10)\n  buffer.writeNumber(n)\n  const asString = buffer.toString()\n  expect(buffer.getPos()).toEqual(asString.length)\n  expect(buffer.toString()).toEqual('-12345.6789')\n  expect(buffer.getFloat(0, asString.length - 1)).toEqual(n)\n  expect(buffer.currentSize()).toEqual(20)\n})\n\ntest('floating point many dp', () => {\n  const n: number = 0.123456789\n  const buffer = new ElasticBuffer(10)\n  buffer.writeNumber(n)\n  const asString = buffer.toString()\n  expect(buffer.getPos()).toEqual(asString.length)\n  expect(asString).toEqual('0.123456789')\n  expect(buffer.getFloat(0, asString.length - 1)).toEqual(n)\n  expect(buffer.currentSize()).toEqual(20)\n})\n\ntest('simple floating point 3.90', () => {\n  const n: number = 3.90\n  const buffer = new ElasticBuffer(10)\n  buffer.writeNumber(n)\n  const asString = buffer.toString()\n  expect(buffer.getPos()).toEqual(asString.length)\n  expect(asString).toEqual('3.9')\n  expect(buffer.getFloat(0, asString.length - 1)).toEqual(n)\n  expect(buffer.currentSize()).toEqual(10)\n})\n\ntest('simple floating point 35.77', () => {\n  const n: number = 35.77\n  const buffer = new ElasticBuffer(10)\n  buffer.writeNumber(n)\n  const asString = buffer.toString()\n  expect(buffer.getPos()).toEqual(asString.length)\n  expect(asString).toEqual('35.77')\n  expect(buffer.getFloat(0, asString.length - 1)).toEqual(n)\n  expect(buffer.currentSize()).toEqual(10)\n})\n\ntest('simple floating point 0.058457', () => {\n  const n: number = 0.058457\n  const buffer = new ElasticBuffer(10)\n  buffer.writeNumber(n)\n  const asString = buffer.toString()\n  expect(buffer.getPos()).toEqual(asString.length)\n  expect(asString).toEqual('0.058457')\n  expect(buffer.getFloat(0, asString.length - 1)).toEqual(n)\n  expect(buffer.currentSize()).toEqual(10)\n})\n\ntest('simple floating point -0.06445', () => {\n  const n: number = -0.06445\n  const buffer = new ElasticBuffer(10)\n  buffer.writeNumber(n)\n  const asString = buffer.toString()\n  expect(buffer.getPos()).toEqual(asString.length)\n  expect(asString).toEqual('-0.06445')\n  expect(buffer.getFloat(0, asString.length - 1)).toEqual(n)\n  expect(buffer.currentSize()).toEqual(10)\n})\n\ntest('whole number as floating point', () => {\n  const n: number = 123456789\n  const buffer = new ElasticBuffer(10)\n  buffer.writeNumber(n)\n  const asString = buffer.toString()\n  expect(buffer.getPos()).toEqual(asString.length)\n  expect(asString.toString()).toEqual('123456789')\n  expect(buffer.getFloat(0, asString.length - 1)).toEqual(n)\n  expect(buffer.currentSize()).toEqual(10)\n})\n\ntest('tiny floating point', () => {\n  const n: number = 0.000000000001\n  const buffer = new ElasticBuffer(10)\n  buffer.writeNumber(n)\n  const asString = buffer.toString()\n  expect(buffer.getPos()).toEqual(14)\n  expect(asString).toEqual('0.000000000001')\n  expect(buffer.getFloat(0, asString.length - 1)).toEqual(n)\n  expect(buffer.currentSize()).toEqual(20)\n})\n\ntest('tiny -ve floating point', () => {\n  const n: number = -0.000000000001\n  const buffer = new ElasticBuffer(10)\n  buffer.writeNumber(n)\n  const asString = buffer.toString()\n  expect(buffer.getPos()).toEqual(asString.length)\n  expect(asString).toEqual('-0.000000000001')\n  expect(buffer.getFloat(0, asString.length - 1)).toEqual(n)\n  expect(buffer.currentSize()).toEqual(20)\n})\n\ntest('tiny +ve floating point with sign', () => {\n  const n: number = 0.000000000001\n  const buffer = new ElasticBuffer(10)\n  buffer.writeString(`+${n.toFixed(12)}`)\n  const asString = buffer.toString()\n  expect(buffer.getPos()).toEqual(asString.length)\n  expect(asString).toEqual('+0.000000000001')\n  expect(buffer.getFloat(0, asString.length - 1)).toEqual(n)\n  expect(buffer.currentSize()).toEqual(20)\n})\n\ntest('boolean true', () => {\n  const buffer = new ElasticBuffer(1)\n  buffer.writeBoolean(true)\n  expect(buffer.getPos()).toEqual(1)\n  expect(buffer.toString()).toEqual('Y')\n  expect(buffer.currentSize()).toEqual(1)\n  expect(buffer.getBoolean(0)).toBe(true)\n})\n\ntest('boolean false', () => {\n  const buffer = new ElasticBuffer(1)\n  buffer.writeBoolean(false)\n  expect(buffer.getPos()).toEqual(1)\n  expect(buffer.toString()).toEqual('N')\n  expect(buffer.currentSize()).toEqual(1)\n  expect(buffer.getBoolean(0)).toBe(false)\n})\n\ntest('write buffer', () => {\n  const buffer = new ElasticBuffer(1)\n  const s: string = 'fixing up fix'\n  const b = Buffer.from(s)\n  buffer.writeBuffer(b)\n  expect(buffer.getPos()).toEqual(b.length)\n  expect(buffer.toString()).toEqual(s)\n  expect(buffer.currentSize() === 16)\n  const fetched: Buffer = buffer.getBuffer(0, b.length)\n  expect(fetched).toEqual(b)\n})\n\ntest('buffer shrinks', () => {\n  const buffer = new ElasticBuffer(1)\n  const s = '.'.repeat(60 * 1024)\n  buffer.writeString(s)\n  expect(buffer.getPos()).toEqual(s.length)\n  expect(buffer.toString()).toEqual(s)\n  expect(buffer.currentSize()).toEqual(65536)\n  expect(buffer.reset()).toBe(true)\n  expect(buffer.getPos()).toEqual(0)\n  expect(buffer.currentSize() < 60 * 1024).toBe(true)\n})\n"]}