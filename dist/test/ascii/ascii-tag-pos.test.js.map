{"version":3,"file":"ascii-tag-pos.test.js","sourceRoot":"","sources":["../../../src/test/ascii/ascii-tag-pos.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'reflect-metadata'\n\nimport * as path from 'path'\nimport { MsgView, TagPos, Structure } from '../../buffer'\nimport { FixDefinitions } from '../../dictionary/definition'\nimport { AsciiMsgTransmitter } from '../../transport/ascii/ascii-msg-transmitter'\nimport { Setup } from '../env/setup'\n\nconst root: string = path.join(__dirname, '../../../data')\n\nlet definitions: FixDefinitions\nlet session: AsciiMsgTransmitter\nlet views: MsgView[]\nlet structure: Structure\nlet tp: TagPos[]\n\nconst testTags: TagPos[] = [\n  new TagPos(0, 120, 0, 1), // 3\n  new TagPos(1, 50, 1, 1), // 0\n  new TagPos(2, 50, 2, 1), // 1\n  new TagPos(3, 120, 3, 1), // 4\n  new TagPos(4, 100, 4, 1) // 2\n]\n\nconst expected: TagPos[] = [\n  new TagPos(1, 50, 1, 1), // 0\n  new TagPos(2, 50, 2, 1), // 1\n  new TagPos(4, 100, 4, 1), // 2\n  new TagPos(0, 120, 0, 1), // 3\n  new TagPos(3, 120, 3, 1) // 4\n]\n\nconst unsortedLogon = [\n  new TagPos(0, 8, 2, 6),\n  new TagPos(1, 9, 11, 7),\n  new TagPos(2, 35, 22, 1),\n  new TagPos(3, 49, 27, 9),\n  new TagPos(4, 56, 40, 9),\n  new TagPos(5, 34, 53, 1),\n  new TagPos(6, 57, 58, 5),\n  new TagPos(7, 52, 67, 21),\n  new TagPos(8, 98, 92, 1),\n  new TagPos(9, 108, 98, 5),\n  new TagPos(10, 95, 107, 2),\n  new TagPos(11, 96, 113, 20),\n  new TagPos(12, 141, 138, 1),\n  new TagPos(13, 789, 144, 4),\n  new TagPos(14, 383, 153, 2),\n  new TagPos(15, 384, 160, 1),\n  new TagPos(16, 372, 166, 5),\n  new TagPos(17, 385, 176, 1),\n  new TagPos(18, 464, 182, 1),\n  new TagPos(19, 553, 188, 3),\n  new TagPos(20, 554, 196, 11)\n]\n\nlet setup: Setup = null\nbeforeAll(async () => {\n  setup = new Setup('session/test-initiator.json', null)\n  await setup.init()\n  definitions = setup.clientConfig.definitions\n  session = setup.client.transmitter as AsciiMsgTransmitter\n  views = await setup.client.replayer.replayFixFile(path.join(root, 'examples/FIX.4.4/quickfix/logon/fix.txt'))\n  if (views && views.length > 0) {\n    structure = views[0].structure\n    tp = views[0].structure.tags.tagPos.slice(0, views[0].segment.endPosition)\n  }\n}, 45000)\n\ntest('logon tags parsed fully', () => {\n  expect(tp).toEqual(unsortedLogon)\n})\n\ntest('expect tags to sort in tag first order', () => {\n  const sorted = testTags.slice().sort(TagPos.compare)\n  const sortedTags = sorted.map(e => e.tag)\n  expect(sortedTags).toEqual([50, 50, 100, 120, 120])\n})\n\ntest('expect tags to sort in tag then start order', () => {\n  const sorted = testTags.slice().sort(TagPos.compare)\n  expect(sorted[0].tag).toEqual(sorted[1].tag)\n  expect(sorted[0].start < sorted[1].start).toEqual(true)\n})\n\ntest('expect start to carry with its tag', () => {\n  const sorted = testTags.slice().sort(TagPos.compare)\n  expect(sorted).toEqual(expected)\n})\n\ntest('binary search on sorted', () => {\n  const sorted = testTags.slice().sort(TagPos.compare)\n  expect(TagPos.binarySearch(sorted, 100)).toEqual(2)\n})\n\ntest('binary search for non existing tag', () => {\n  const sorted = testTags.slice().sort(TagPos.compare)\n  expect(TagPos.binarySearch(sorted, 1000) < 0).toEqual(true)\n})\n\ntest('binary search duplicate tag', () => {\n  const sorted = testTags.slice().sort(TagPos.compare)\n  expect(TagPos.binarySearch(sorted, 50) <= 1).toEqual(true)\n})\n\ntest('check logon', () => {\n  const sorted = tp.slice().sort(TagPos.compare)\n  expect(sorted[0].tag).toEqual(8)\n  expect(sorted[sorted.length - 1].tag).toEqual(789)\n})\n"]}