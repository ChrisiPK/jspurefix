{"version":3,"file":"logon.test.js","sourceRoot":"","sources":["../../../src/test/ascii/logon.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'reflect-metadata'\n\nimport * as path from 'path'\nimport { SegmentDescription, Structure, MsgView } from '../../buffer'\nimport { ILooseObject } from '../../collections/collection'\nimport { FixDefinitions } from '../../dictionary/definition'\n\nimport { Setup } from '../env/setup'\nimport { SegmentType } from '../../buffer/segment/segment-type'\n\nconst root: string = path.join(__dirname, '../../../data')\n\nlet definitions: FixDefinitions\nlet views: MsgView[]\nlet structure: Structure\nlet setup: Setup = null\n\nconst asStrings: string[] = [\n  'FIX4.4',\n  '0000208',\n  'A',\n  'sender-10',\n  'target-20',\n  '1',\n  'sub-a',\n  '20180610-10:39:01.621',\n  '2',\n  '62441',\n  '20',\n  'VgfoSqo56NqSVI1fLdlI',\n  'Y',\n  '4886',\n  '20',\n  '1',\n  'ipsum',\n  'R',\n  'N',\n  'sit',\n  'consectetur',\n  '49'\n]\n\nbeforeAll(async () => {\n  setup = new Setup('session/qf-fix44.json',null)\n  await setup.init()\n  definitions = setup.client.config.definitions\n  views = await setup.client.replayer.replayFixFile(path.join(root, 'examples/FIX.4.4/quickfix/logon/fix.txt'))\n  if (views && views.length > 0) {\n    structure = views[0].structure\n  }\n}, 45000)\n\ntest('expect a structure from fix msg', () => {\n  expect(structure).toBeTruthy()\n})\n\ntest('Logon structure', () => {\n  const logon: SegmentDescription = structure.layout.Logon\n  expect(logon).toBeTruthy()\n  expect(logon.type).toEqual(SegmentType.Msg)\n  expect(logon.startPosition).toEqual(0)\n  expect(logon.startTag).toEqual(8)\n  expect(logon.endPosition).toEqual(21)\n  expect(logon.endTag).toEqual(10)\n})\n\ntest('Logon MsgTypes', () => {\n  const msgTypes: SegmentDescription = structure.layout.NoMsgTypes\n  expect(msgTypes).toBeTruthy()\n  expect(msgTypes.type).toEqual(SegmentType.Group)\n  expect(msgTypes.delimiterTag).toEqual(372)\n  expect(msgTypes.delimiterPositions.length).toEqual(1)\n  expect(msgTypes.delimiterPositions).toEqual([16])\n})\n\ntest('Logon Object', () => {\n  const logonAsObject: ILooseObject = views[0].toObject()\n  expect(logonAsObject).toBeTruthy()\n  expect(logonAsObject.Username).toEqual('sit')\n  expect(logonAsObject.Password).toEqual('consectetur')\n  expect(logonAsObject.NoMsgTypes).toEqual([\n    {\n      MsgDirection: 'R',\n      RefMsgType: 'ipsum'\n    }])\n})\n\ntest('values as strings', () => {\n  const view: MsgView = views[0]\n  const strings: string[] = view.getStrings()\n  expect(strings).toEqual(asStrings)\n})\n"]}