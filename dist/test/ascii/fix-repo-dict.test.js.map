{"version":3,"file":"fix-repo-dict.test.js","sourceRoot":"","sources":["../../../src/test/ascii/fix-repo-dict.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'reflect-metadata'\n\nimport * as path from 'path'\nimport { FixDefinitions } from '../../dictionary/definition'\nimport { ISessionDescription } from '../../transport'\nimport { DefinitionFactory } from '../../util'\nimport { ContainedFieldType } from '../../dictionary/contained'\n\nconst root: string = path.join(__dirname, '../../../data')\n\nlet definitions: FixDefinitions\n\nbeforeAll(async () => {\n  const sessionDescription: ISessionDescription = require(path.join(root, 'session/test-initiator.json'))\n  definitions = await new DefinitionFactory().getDefinitions(sessionDescription.application.dictionary)\n}, 45000)\n\n/*\n<Field added=\"FIX.2.7\">\n\t\t<Tag>1</Tag>\n\t\t<Name>Account</Name>\n\t\t<Type>String</Type>\n\t\t<AbbrName>Acct</AbbrName>\n\t\t<NotReqXML>0</NotReqXML>\n\t\t<Description>Account mnemonic as agreed between buy and sell sides, e.g. broker and institution or investor/intermediary and fund manager.</Description>\n\t</Field>\n */\n\ntest('field check tag 1', () => {\n  const simple = definitions.simple.get('1')\n  expect(simple).toBeTruthy()\n  expect(simple.tag).toEqual(1)\n  expect(simple.name).toEqual('Account')\n  expect(simple.type.toLowerCase()).toEqual('string')\n})\n\n/*\n\t<Field added=\"FIX.2.7\">\n\t\t<Tag>15</Tag>\n\t\t<Name>Currency</Name>\n\t\t<Type>Currency</Type>\n\t\t<AbbrName>Ccy</AbbrName>\n\t\t<NotReqXML>0</NotReqXML>\n\t\t<Description>Identifies currency used for price. Absence of this field is interpreted as the default for the security. It is recommended that systems provide the currency value whenever possible. See \"Appendix 6-A: Valid Currency Codes\" for information on obtaining valid values.</Description>\n\t</Field>\n */\n\ntest('field check tag 15', () => {\n  const simple = definitions.simple.get('15')\n  expect(simple).toBeTruthy()\n  expect(simple.tag).toEqual(15)\n  expect(simple.name).toEqual('Currency')\n  expect(simple.type.toLowerCase()).toEqual('string') // maps to string\n})\n\n/*\n\t<Field added=\"FIX.2.7\">\n\t\t<Tag>35</Tag>\n\t\t<Name>MsgType</Name>\n\t\t<Type>String</Type>\n\t\t<AbbrName>MsgTyp</AbbrName>\n\t\t<NotReqXML>1</NotReqXML>\n\t\t<Description>Defines message type ALWAYS THIRD FIELD IN MESSAGE. (Always unencrypted)\nNote: A \"U\" as the first character in the MsgType field (i.e. U, U2, etc) indicates that the message format is privately defined between the sender and receiver.</Description>\n\t</Field>\n */\n\ntest('field check tag 35', () => {\n  const simple = definitions.simple.get('35')\n  expect(simple).toBeTruthy()\n  expect(simple.tag).toEqual(35)\n  expect(simple.name).toEqual('MsgType')\n  expect(simple.type.toLowerCase()).toEqual('string')\n  expect(simple.enums).toBeTruthy()\n  expect(simple.enums.get('ZZZ')).toBeUndefined()\n  expect(simple.enums.get('0').val).toEqual('Heartbeat')\n  expect(simple.enums.get('8').val).toEqual('ExecutionReport')\n  expect(simple.enums.get('AE').val).toEqual('TradeCaptureReport')\n})\n\n/*\n\t<Field added=\"FIX.2.7\">\n\t\t<Tag>54</Tag>\n\t\t<Name>Side</Name>\n\t\t<Type>char</Type>\n\t\t<AbbrName>Side</AbbrName>\n\t\t<NotReqXML>0</NotReqXML>\n\t\t<Description>Side of order</Description>\n\t</Field>\n */\n\ntest('field check tag 54', () => {\n  const simple = definitions.simple.get('54')\n  expect(simple).toBeTruthy()\n  expect(simple.tag).toEqual(54)\n  expect(simple.name).toEqual('Side')\n  expect(simple.type.toLowerCase()).toEqual('char')\n  expect(simple.enums).toBeTruthy()\n  expect(simple.enums.get('1').val).toEqual('Buy')\n  expect(simple.enums.get('2').val).toEqual('Sell')\n  expect(simple.enums.get('3').val).toEqual('BuyMinus')\n  expect(simple.enums.get('8').val).toEqual('Cross')\n})\n\n/*\n\t<Field added=\"FIX.2.7\">\n\t\t<Tag>99</Tag>\n\t\t<Name>StopPx</Name>\n\t\t<Type>Price</Type>\n\t\t<AbbrName>StopPx</AbbrName>\n\t\t<NotReqXML>0</NotReqXML>\n\t\t<Description>Price per unit of quantity (e.g. per share)</Description>\n\t</Field>\n */\n\ntest('field check tag 99', () => {\n  const simple = definitions.simple.get('99')\n  expect(simple).toBeTruthy()\n  expect(simple.tag).toEqual(99)\n  expect(simple.name).toEqual('StopPx')\n  expect(simple.type.toLowerCase()).toEqual('float') // maps to float\n})\n\n/*\n\t<Field added=\"FIX.3.0\">\n\t\t<Tag>113</Tag>\n\t\t<Name>ReportToExch</Name>\n\t\t<Type>Boolean</Type>\n\t\t<AbbrName>RptToExch</AbbrName>\n\t\t<NotReqXML>0</NotReqXML>\n\t\t<Description>Identifies party of trade responsible for exchange reporting.</Description>\n\t</Field>\n */\n\ntest('field check tag 113', () => {\n  const simple = definitions.simple.get('113')\n  expect(simple).toBeTruthy()\n  expect(simple.tag).toEqual(113)\n  expect(simple.name).toEqual('ReportToExch')\n  expect(simple.type.toLowerCase()).toEqual('boolean')\n})\n\n/*\n\t<Field added=\"FIX.4.0\">\n\t\t<Tag>119</Tag>\n\t\t<Name>SettlCurrAmt</Name>\n\t\t<Type>Amt</Type>\n\t\t<AbbrName>SettlCurrAmt</AbbrName>\n\t\t<NotReqXML>0</NotReqXML>\n\t\t<Description>Total amount due expressed in settlement currency (includes the effect of the forex transaction)</Description>\n\t</Field>\n */\n\ntest('field check tag 119', () => {\n  const simple = definitions.simple.get('119')\n  expect(simple).toBeTruthy()\n  expect(simple.tag).toEqual(119)\n  expect(simple.name).toEqual('SettlCurrAmt')\n  expect(simple.type.toLowerCase()).toEqual('float') // maps to float\n})\n\n/*\n\t<Field added=\"FIX.4.0\">\n\t\t<Tag>135</Tag>\n\t\t<Name>OfferSize</Name>\n\t\t<Type>Qty</Type>\n\t\t<AbbrName>OfrSz</AbbrName>\n\t\t<NotReqXML>0</NotReqXML>\n\t\t<Description>Quantity of offer\n(Prior to FIX 4.2 this field was of type int)</Description>\n\t</Field>\n */\n\ntest('field check tag 135', () => {\n  const simple = definitions.simple.get('135')\n  expect(simple).toBeTruthy()\n  expect(simple.tag).toEqual(135)\n  expect(simple.name).toEqual('OfferSize')\n  expect(simple.type.toLowerCase()).toEqual('float') // maps to float\n})\n\n/*\n\t<Field added=\"FIX.4.1\">\n\t\t<Tag>168</Tag>\n\t\t<Name>EffectiveTime</Name>\n\t\t<Type>UTCTimestamp</Type>\n\t\t<AbbrName>EfctvTm</AbbrName>\n\t\t<NotReqXML>0</NotReqXML>\n\t\t<Description>Time the details within the message should take effect (always expressed in UTC (Universal Time Coordinated, also known as \"GMT\")</Description>\n\t</Field>\n */\n\ntest('field check tag 168', () => {\n  const simple = definitions.simple.get('168')\n  expect(simple).toBeTruthy()\n  expect(simple.tag).toEqual(168)\n  expect(simple.name).toEqual('EffectiveTime')\n  expect(simple.type.toLowerCase()).toEqual('utctimestamp')\n})\n\n/*\n\t<Field added=\"FIX.2.7\">\n\t\t<Tag>95</Tag>\n\t\t<Name>RawDataLength</Name>\n\t\t<Type>Length</Type>\n\t\t<AssociatedDataTag>96</AssociatedDataTag>\n\t\t<AbbrName>RawDataLength</AbbrName>\n\t\t<NotReqXML>0</NotReqXML>\n\t\t<Description>Number of bytes in raw data field.</Description>\n\t</Field>\n */\n\ntest('field check tag 95', () => {\n  const simple = definitions.simple.get('95')\n  expect(simple).toBeTruthy()\n  expect(simple.tag).toEqual(95)\n  expect(simple.name).toEqual('RawDataLength')\n  expect(simple.type.toLowerCase()).toEqual('int')\n})\n\n/*\n\t<Field added=\"FIX.2.7\">\n\t\t<Tag>96</Tag>\n\t\t<Name>RawData</Name>\n\t\t<Type>data</Type>\n\t\t<AbbrName>RawData</AbbrName>\n\t\t<NotReqXML>0</NotReqXML>\n\t\t<Description>Unformatted raw data, can include bitmaps, word processor documents, etc.</Description>\n\t</Field>\n */\n\ntest('field check tag 96', () => {\n  const simple = definitions.simple.get('96')\n  expect(simple).toBeTruthy()\n  expect(simple.tag).toEqual(96)\n  expect(simple.name).toEqual('RawData')\n  expect(simple.type.toLowerCase()).toEqual('data')\n})\n\n/*\n\t<Field added=\"FIX.2.7\">\n\t\t<Tag>100</Tag>\n\t\t<Name>ExDestination</Name>\n\t\t<Type>Exchange</Type>\n\t\t<AbbrName>ExDest</AbbrName>\n\t\t<NotReqXML>0</NotReqXML>\n\t\t<Description>Execution destination as defined by institution when order is entered.\nValid values:\nSee \"Appendix 6-C\"</Description>\n\t</Field>\n */\n\ntest('field check tag 100', () => {\n  const simple = definitions.simple.get('100')\n  expect(simple).toBeTruthy()\n  expect(simple.tag).toEqual(100)\n  expect(simple.name).toEqual('ExDestination')\n  expect(simple.type.toLowerCase()).toEqual('string')\n})\n\ntest('message check TestRequest', () => {\n  const msg = definitions.message.get('TestRequest')\n  expect(msg).toBeTruthy()\n  expect(msg.msgType).toEqual('1')\n  expect(msg.fields.length).toEqual(3)\n  expect(msg.fields[0].type).toEqual(ContainedFieldType.Component)\n  expect(msg.fields[0].name).toEqual('StandardHeader')\n  expect(msg.fields[1].type).toEqual(ContainedFieldType.Simple)\n  expect(msg.fields[1].name).toEqual('TestReqID')\n  expect(msg.fields[2].type).toEqual(ContainedFieldType.Component)\n  expect(msg.fields[2].name).toEqual('StandardTrailer')\n})\n"]}