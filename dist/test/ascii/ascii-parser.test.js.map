{"version":3,"file":"ascii-parser.test.js","sourceRoot":"","sources":["../../../src/test/ascii/ascii-parser.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'reflect-metadata'\n\nimport { TagPos } from '../../buffer'\nimport { FixDefinitions } from '../../dictionary/definition'\nimport { JsonHelper } from '../../util'\nimport { IJsFixConfig, MsgType } from '../../index'\nimport { Setup } from '../env/setup'\nimport { SegmentType } from '../../buffer/segment/segment-type'\nimport { ParsingResult } from '../env/parsing-result'\n\nlet config: IJsFixConfig\nlet definitions: FixDefinitions\nlet jsonHelper: JsonHelper\n\nconst logon: string = '8=FIX4.4|9=0000208|35=A|49=sender-10|56=target-20|34=1|57=sub-a|52=20180610-10:39:01.621|98=2|108=62441|95=20|96=VgfoSqo56NqSVI1fLdlI|141=Y|789=4886|383=20|384=1|372=ipsum|385=R|464=N|553=sit|554=consectetur|10=49|'\nconst expectedTagPos = [\n  new TagPos(0, 8, 2, 6),\n  new TagPos(1, 9, 11, 7),\n  new TagPos(2, 35, 22, 1),\n  new TagPos(3, 49, 27, 9),\n  new TagPos(4, 56, 40, 9),\n  new TagPos(5, 34, 53, 1),\n  new TagPos(6, 57, 58, 5),\n  new TagPos(7, 52, 67, 21),\n  new TagPos(8, 98, 92, 1),\n  new TagPos(9, 108, 98, 5),\n  new TagPos(10, 95, 107, 2),\n  new TagPos(11, 96, 113, 20),\n  new TagPos(12, 141, 138, 1),\n  new TagPos(13, 789, 144, 4),\n  new TagPos(14, 383, 153, 2),\n  new TagPos(15, 384, 160, 1),\n  new TagPos(16, 372, 166, 5),\n  new TagPos(17, 385, 176, 1),\n  new TagPos(18, 464, 182, 1),\n  new TagPos(19, 553, 188, 3),\n  new TagPos(20, 554, 196, 11),\n  new TagPos(21, 10, 211, 2)]\n\nlet setup: Setup = null\nbeforeAll(async () => {\n  expect.assertions(1)\n  setup = new Setup('session/test-initiator-tls.json', 'session/test-acceptor-tls.json')\n  await setup.init()\n  definitions = setup.definitions\n  config = setup.clientConfig\n  definitions = setup.definitions\n  jsonHelper = new JsonHelper(definitions)\n}, 45000)\n\ntest('begin string incorrectly placed', () => {\n  return expect(setup.client.parseText('8=FIX4.4|8=FIX4.4|')).rejects.toEqual(\n    new Error('BeginString: not expected at position [2]')\n  )\n})\n\ntest('body length incorrectly placed', () => {\n  return expect(setup.client.parseText('8=FIX4.4|9=101|9=101|')).rejects.toEqual(\n    new Error('BodyLengthTag: not expected at position [3]')\n  )\n})\n\ntest('msg type incorrectly placed', () => {\n  return expect(setup.client.parseText('8=FIX4.4|9=101|35=A|35=A|')).rejects.toEqual(\n    new Error('MsgTag: not expected at position [4]')\n  )\n})\n\ntest('do not start with 8=', () => {\n  return expect(setup.client.parseText('59=FIX4.4|')).rejects.toEqual(\n    new Error('position 1 [59] must be BeginString: 8=')\n  )\n})\n\ntest('body length incorrectly placed', () => {\n  return expect(setup.client.parseText('8=FIX4.4|59=101|9=101|')).rejects.toEqual(\n    new Error('position 2 [59] must be BodyLengthTag: 9=')\n  )\n})\n\ntest('msgTag incorrectly placed', () => {\n  return expect(setup.client.parseText('8=FIX4.4|9=101|59=A|')).rejects.toEqual(\n    new Error('position 3 [59] must be MsgTag: 35=')\n  )\n})\n\ntest('first 3 fields correctly placed', async () => {\n  const res: ParsingResult = await setup.client.parseText('8=FIX4.4|9=101|35=A|')\n  expect(res.event).toEqual('done')\n})\n\ntest('complete msg parsed', async () => {\n  const res: ParsingResult = await setup.client.parseText(logon)\n  expect(res.event).toEqual('msg')\n  expect(res.msgType).toEqual(MsgType.Logon)\n})\n\ntest('complete msg in chunks parsed', async () => {\n  const res: ParsingResult = await setup.client.parseText(logon, true)\n  expect(res.event).toEqual('msg')\n  expect(res.msgType).toEqual(MsgType.Logon)\n})\n\ntest('msg sent in chunks matches parser buffer', async () => {\n  const res: ParsingResult = await setup.client.parseText(logon, true)\n  expect(res.msgType).toEqual(MsgType.Logon)\n  expect(res.contents).toEqual(logon)\n})\n\ntest('logon parsers to correct tag set', async () => {\n  const res: ParsingResult = await setup.client.parseText(logon, true)\n  expect(res.msgType).toEqual(MsgType.Logon)\n  expect(res.view.structure.tags.tagPos).toEqual(expectedTagPos)\n})\n\ntest('tags other than 10 past body length', async () => {\n  const begin = '8=FIX4.4|9=0000208|'\n  const changed = logon.replace('10=49|','555=you know nothin|10=49')\n  return expect(setup.client.parseText(changed)).rejects.toEqual(\n    new Error(`Tag: [555] cant be after ${208 + begin.length - 1}`)\n  )\n})\n\ntest('unknown message type', async () => {\n  const changed = logon.replace('35=A', '35=ZZ')\n  const res = await setup.client.parseText(changed)\n  expect(res.view).toBeTruthy()\n  expect(res.view.segment.type).toEqual(SegmentType.Unknown)\n})\n\ntest('missing 1 required tag', async () => {\n  const changed = logon.replace('108=62441|','000=62441|')\n  const res = await setup.client.parseText(changed)\n  expect(res.view).toBeTruthy()\n  const missing = res.view.missing()\n  expect(missing).toEqual([108])\n})\n\ntest('missing 2 required tags', async () => {\n  // const changed = logon.replace('108=62441|','000=62441|')\n  const changed = logon.replace('98=2|108=62441|','01=2|000=62441|')\n  const res = await setup.client.parseText(changed)\n  expect(res.view).toBeTruthy()\n  const missing = res.view.missing()\n  expect(missing).toEqual([98, 108])\n})\n\n"]}