{"version":3,"file":"repo-full-ascii-msg.test.js","sourceRoot":"","sources":["../../../src/test/ascii/repo-full-ascii-msg.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'reflect-metadata'\nimport * as path from 'path'\nimport { AsciiParser, AsciiView } from '../../buffer/ascii'\nimport { ILooseObject } from '../../collections/collection'\nimport { FixDefinitions } from '../../dictionary/definition'\nimport { JsonHelper } from '../../util'\nimport { IJsFixConfig } from '../../config'\nimport { ElasticBuffer, MsgType } from '../../index'\nimport { AsciiMsgTransmitter } from '../../transport/ascii/ascii-msg-transmitter'\nimport { Setup } from '../env/setup'\nimport { DITokens } from '../../runtime'\n\nlet definitions: FixDefinitions\nlet jsonHelper: JsonHelper\nlet session: AsciiMsgTransmitter\nconst root: string = path.join(__dirname, '../../../data/examples/FIX.4.4/repo/')\nlet config: IJsFixConfig\nlet setup: Setup = null\nbeforeAll(async () => {\n  setup = new Setup()\n  await setup.init()\n  definitions = setup.definitions\n  jsonHelper = new JsonHelper(definitions)\n  config = setup.clientConfig\n  session = setup.clientSessionContainer.resolve<AsciiMsgTransmitter>(DITokens.MsgTransmitter)\n}, 30000)\n\nasync function testEncodeDecode (msgType: string, msg: ILooseObject): Promise<ILooseObject> {\n  // encode to FIX format from provided object.\n  return new Promise(async (resolve, reject) => {\n    const rxBuffer = config.sessionContainer.resolve<ElasticBuffer>(DITokens.ParseBuffer)\n    const parser: AsciiParser = new AsciiParser(config, session.encodeStream, rxBuffer)\n    parser.on('msg', (msgType: string, view: AsciiView) => {\n      const o = view.toObject()\n      delete o['StandardHeader']\n      delete o['StandardTrailer']\n      resolve(o)\n    })\n    parser.on('error', (e: Error) => {\n      reject(e)\n    })\n    // encode the message\n    session.send(msgType, msg)\n  })\n}\n\ntest('check 1 digit checksum format', async () => {\n  const factory = session.config.factory\n  const cs = factory.trailer(1)\n  expect(cs.CheckSum).toEqual('001')\n})\n\ntest('check 2 digit checksum format', async () => {\n  const factory = session.config.factory\n  const cs = factory.trailer(10)\n  expect(cs.CheckSum).toEqual('010')\n})\n\ntest('check 3 digit checksum format', async () => {\n  const factory = session.config.factory\n  const cs = factory.trailer(100)\n  expect(cs.CheckSum).toEqual('100')\n})\n\ntest('AE object to ascii fix to object', async () => {\n  const msgType: string = MsgType.TradeCaptureReport\n  const file: string = path.join(root, 'trade-capture/object.json')\n  const msg: ILooseObject = jsonHelper.fromJson(file, msgType)\n  const o: ILooseObject = await testEncodeDecode(msgType, msg)\n\n  expect(o).toEqual(msg)\n}, 1000)\n\ntest('d object to ascii fix to object', async () => {\n  const msgType: string = MsgType.SecurityDefinition\n  const file: string = path.join(root, 'security-definition/object.json')\n  const msg: ILooseObject = jsonHelper.fromJson(file, msgType)\n  const o: ILooseObject = await testEncodeDecode(msgType, msg)\n\n  expect(o).toEqual(msg)\n}, 1000)\n\ntest('D object to ascii fix to object', async () => {\n  const msgType: string = MsgType.NewOrderSingle\n  const file: string = path.join(root, 'new-order-single/object.json')\n  const msg: ILooseObject = jsonHelper.fromJson(file, msgType)\n  const o: ILooseObject = await testEncodeDecode(msgType, msg)\n\n  expect(o).toEqual(msg)\n}, 1000)\n"]}