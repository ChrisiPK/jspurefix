{"version":3,"file":"fixml-alloc-parse.test.js","sourceRoot":"","sources":["../../../src/test/fixml/fixml-alloc-parse.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'reflect-metadata'\n\nimport { MsgView } from '../../buffer'\n// use the compiled interfaces for intelisense\n\nimport {\n  IStandardHeader, IInstrument, IPtysSubGrp, IParties, INstdPtysSubGrp,\n  IAllocationInstruction, IAllocationReport, IOrdAllocGrp } from '../../types/FIXML50SP2'\n\nimport { ToViews } from '../env/to-views'\nimport * as moment from 'moment'\n\nconst testFolder: string = 'examples/FIXML/cme/alloc/Clearing System Notifies Allocation to the Claiming Firm - Cross-Exchange'\nconst toViews: ToViews = new ToViews(testFolder)\n\nbeforeAll(async () => {\n  await toViews.load()\n}, 45000)\n\ntest('expect a view from fix msg', () => {\n  const views = toViews.views\n  expect(views.length).toEqual(1)\n})\n\ntest('expect Hdr view to be available', () => {\n  const views = toViews.views\n  const v = views[0]\n  const hdr: MsgView = v.getView('Hdr')\n  expect(hdr).toBeTruthy()\n})\n\n/*\n    \"StandardHeader\": {\n        \"SenderCompID\": \"CME\",\n        \"TargetCompID\": \"560\",\n        \"SenderSubID\": \"CME\",\n        \"TargetSubID\": \"CME\",\n        \"HopSendingTime\": \"2015-08-13T15:12:09.000Z\"\n    },\n */\n\ntest('fetch attributes from Hdr', () => {\n  const views = toViews.views\n  const v = views[0]\n  const hdr: IStandardHeader = v.getView('Hdr').toObject() as IStandardHeader\n  expect(hdr).toBeTruthy()\n  expect(hdr.SenderCompID).toEqual('CME')\n  expect(v.getTyped('SID')).toEqual('CME')\n  expect(v.getTyped('TID')).toEqual('560')\n  expect(hdr.SenderSubID).toEqual('CME')\n  expect(hdr.TargetSubID).toEqual('CME')\n  /*\n  fails on uni test host\n  const st = moment('2015-08-13T16:12:09.000Z').utc(false).toDate()\n  expect(hdr.SendingTime).toEqual(st)\n  const snt: Date = v.getTyped('SendingTime')\n  expect(snt).toEqual(st)\n  */\n})\n\ntest('fetch attributes from main object', () => {\n  const views = toViews.views\n  const v = views[0]\n  const allocation: IAllocationReport = v.toObject() as IAllocationReport\n  expect(allocation.AllocReportID).toEqual('12E251CB2133225C1CC112533311')\n  expect(allocation.TradeMatchID).toEqual('12A80D9ED85HI04008310')\n  expect(allocation.AllocReportType).toEqual(16)\n  expect(allocation.AllocStatus).toEqual(6)\n  expect(allocation.TrdType).toEqual(2)\n  expect(allocation.ExecutingClaimingIndicator).toEqual(1)\n  expect(allocation.Quantity).toEqual(4)\n})\n\ntest('test complex sub structure OrdAllocGrp', () => {\n  const views = toViews.views\n  const v = views[0]\n  const allocInstruction: IAllocationInstruction = v.toObject()\n  expect(allocInstruction).toBeTruthy()\n  expect(allocInstruction.OrdAllocGrp[0].ClOrdID).toEqual('SX1')\n})\n\n/*\n\"Instrument\": {\n    \"BatchID\": \"ED\",\n    \"InstrumentScopeCFICode\": \"FFDCSO\",\n    \"RelatedSecurityType\": \"FUT\",\n    \"RelatedMaturityMonthYear\": \"201512\",\n    \"DerivativePriceQuoteCurrency\": \"USD\",\n    \"UnderlyingStreamCommodityExchange\": \"CME\"\n},\n */\n\ntest('test instrument on fixml allocation - use abbreviation', () => {\n  const views = toViews.views\n  const v = views[0]\n  const instrument: IInstrument = v.getView('Instrmt').toObject()\n  expect(instrument).toBeTruthy()\n})\n\ntest('test instrument attributes', () => {\n  const views = toViews.views\n  const v = views[0]\n  const instrument: IInstrument = v.getView('Instrmt').toObject()\n  expect(instrument).toBeTruthy()\n  expect(instrument.SecurityID).toEqual('ED')\n  expect(instrument.CFICode).toEqual('FFDCSO')\n  expect(instrument.SecurityType).toEqual('FUT')\n  expect(instrument.MaturityMonthYear).toEqual('201512')\n  expect(instrument.PriceQuoteCurrency).toEqual('USD')\n  expect(instrument.SecurityExchange).toEqual('CME')\n})\n\ntest('test instrument on fixml allocation - use full name', () => {\n  const views = toViews.views\n  const v = views[0]\n  const instrument: IInstrument = v.getView('Instrument').toObject()\n  expect(instrument).toBeTruthy()\n})\n\ntest('test complex sub structure AllocGrp', () => {\n  const views = toViews.views\n  const v = views[0]\n  const allocInstruction: IAllocationInstruction = v.toObject()\n  expect(allocInstruction).toBeTruthy()\n  expect(Array.isArray(allocInstruction.AllocGrp)).toBeTruthy()\n  expect(allocInstruction.AllocGrp.length).toEqual(1)\n  expect(allocInstruction.AllocGrp[0].AllocQty).toEqual(4)\n  expect(allocInstruction.AllocGrp[0].IndividualAllocID).toEqual('307006')\n  expect(allocInstruction.AllocGrp[0].SecondaryIndividualAllocID).toEqual('178004')\n  expect(allocInstruction.AllocGrp[0].AllocCustomerCapacity).toEqual('4')\n  expect(allocInstruction.AllocGrp[0].OriginalSecondaryTradeID).toEqual('12A80D9ED85HI040083A')\n\n})\n\ntest('test OrdAllocGrp', () => {\n  const views = toViews.views\n  const v = views[0]\n  const ordAlloc: IOrdAllocGrp[] = v.getView('OrdAllocGrp').toObject()\n  expect(ordAlloc).toBeTruthy()\n  expect(Array.isArray(ordAlloc)).toBeTruthy()\n  expect(ordAlloc.length).toEqual(1)\n  expect(ordAlloc[0].ClOrdID).toEqual('SX1')\n})\n\ntest('main Party Group', () => {\n  const views = toViews.views\n  const v = views[0]\n  const parties: IParties[] = v.getView('Parties').toObject()\n  expect(parties).toBeTruthy()\n  expect(Array.isArray(parties)).toBeTruthy()\n  expect(parties.length).toEqual(4)\n  expect(parties[0]).toEqual({\n    PartyID: 'CME',\n    PartyRole: 21\n  })\n  expect(parties[1]).toEqual({\n    PartyID: 'CME',\n    PartyRole: 22\n  })\n  expect(parties[2]).toEqual({\n    PartyID: '560',\n    PartyRole: 1\n  })\n})\n\ntest('test party sub group', () => {\n  const views = toViews.views\n  const v = views[0]\n  const parties: IPtysSubGrp[] = v.getView('Parties.PtysSubGrp').toObject()\n  expect(parties).toBeTruthy()\n  expect(Array.isArray(parties)).toBeTruthy()\n  expect(parties.length).toEqual(1)\n  expect(parties[0]).toEqual(\n    {\n      PartySubID: '1',\n      MiscFeeType: '26'\n    })\n})\n\ntest('test AllocGrp.NestedParties.NstdPtysSubGrp', () => {\n  const views = toViews.views\n  const v = views[0]\n  const parties: INstdPtysSubGrp[] = v.getView('AllocGrp.NestedParties.NstdPtysSubGrp').toObject()\n  expect(parties).toBeTruthy()\n  expect(Array.isArray(parties)).toBeTruthy()\n  expect(parties.length).toEqual(1)\n  expect(parties[0]).toEqual(\n    {\n      NestedPartySubID: '1',\n      NestedPartySubIDType: 26\n    })\n})\n\ntest('main attributes', () => {\n  const views = toViews.views\n  const v = views[0]\n  expect(v.getTyped('AllocReportID')).toEqual('12E251CB2133225C1CC112533311')\n  expect(v.getTyped('TradeMatchID')).toEqual('12A80D9ED85HI04008310')\n  expect(v.getTyped('AllocReportType')).toEqual(16)\n  expect(v.getTyped('TrdType')).toEqual(2)\n  expect(v.getTyped('AvgPx')).toEqual(95.5)\n  expect(v.getTyped('TradeDate')).toEqual(moment('2015-08-05').utc(true).toDate())\n  expect(v.getTyped('TradeMatchID')).toEqual('12A80D9ED85HI04008310')\n})\n"]}