{"version":3,"file":"fixml-tc-bi-lateral-parse.test.js","sourceRoot":"","sources":["../../../src/test/fixml/fixml-tc-bi-lateral-parse.test.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,4BAAyB;AAKzB,8CAAyC;AAEzC,MAAM,UAAU,GAAW,qDAAqD,CAAA;AAChF,MAAM,OAAO,GAAY,IAAI,kBAAO,CAAC,UAAU,CAAC,CAAA;AAEhD,SAAS,CAAC,GAAS,EAAE;IACnB,MAAM,OAAO,CAAC,IAAI,EAAE,CAAA;AACtB,CAAC,CAAA,EAAE,KAAK,CAAC,CAAA;AAET,IAAI,CAAC,4BAA4B,EAAE,GAAG,EAAE;IACtC,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAA;IAC3B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;AACjC,CAAC,CAAC,CAAA;AAEF,IAAI,CAAC,sBAAsB,EAAE,GAAG,EAAE;IAChC,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAA;IAC3B,MAAM,CAAC,KAAK,CAAC,CAAC,UAAU,EAAE,CAAA;IAC1B,MAAM,CAAC,GAAW,KAAK,CAAC,QAAQ,EAAE,CAAA;IAClC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAA;IACtB,MAAM,SAAS,GAAmB,CAAC,CAAC,KAAK,CAAA;IACzC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC9C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;AACrC,CAAC,CAAC,CAAA;AAEF,IAAI,CAAC,sBAAsB,EAAE,GAAG,EAAE;IAChC,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAA;IAC3B,MAAM,CAAC,GAAwB,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAA;IAClD,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAA;IACtB,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,CAAA;IACtB,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAA;AACxB,CAAC,CAAC,CAAA;AAEF,IAAI,CAAC,6BAA6B,EAAE,GAAG,EAAE;IACvC,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAA;IAC3B,MAAM,CAAC,GAAwB,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAA;IAClD,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,CAAA;IACtB,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAA;IACtB,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAA;IACzC,MAAM,CAAC,EAAE,CAAC,CAAC,UAAU,EAAE,CAAA;IACvB,MAAM,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;IAC1C,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;IACxD,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;IACzD,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;AAC7C,CAAC,CAAC,CAAA;AAEF,IAAI,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACnC,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAA;IAC3B,MAAM,CAAC,GAAwB,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAA;IAClD,MAAM,CAAC,GAAgB,CAAC,CAAC,UAAU,CAAA;IACnC,MAAM,MAAM,GAAG,CAAC,CAAC,SAAS,CAAA;IAC1B,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAA;IAC3B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAA;IAC7B,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;IAChC,MAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAA;IACxD,MAAM,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,CAAA;IAC5B,MAAM,EAAE,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAA;IACtC,MAAM,EAAE,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAA;IACtC,MAAM,CAAC,EAAE,CAAC,CAAC,UAAU,EAAE,CAAA;IACvB,MAAM,CAAC,EAAE,CAAC,CAAC,UAAU,EAAE,CAAA;IAEvB,MAAM,IAAI,GAAG,CAAC,kCAAkC,EAAE,qBAAqB,EAAE,6BAA6B,EAAE,6BAA6B,EAAE,+BAA+B,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,eAAe,EAAE,YAAY,CAAC,CAAA;IAE7O,MAAM,EAAE,GAAU,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;IACvC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IAC9B,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;IAChC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IAC9B,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IAC1B,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;IACxB,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;IAC/B,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;IACxB,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;IACxB,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;IAGxB,MAAM,EAAE,GAAU,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;IACvC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IAC9B,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;IAChC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IAC9B,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IAC1B,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;IACxB,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;IAC/B,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;IACxB,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;IACxB,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;AAC1B,CAAC,CAAC,CAAA;AASF,IAAI,CAAC,gCAAgC,EAAE,GAAG,EAAE;IAC1C,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAA;IAC3B,MAAM,CAAC,GAAW,KAAK,CAAC,QAAQ,EAAE,CAAA;IAClC,MAAM,GAAG,GAAoB,CAAC,CAAC,cAAc,CAAA;IAC7C,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAA;IACxB,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IACvC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAA;IAC/C,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IACtC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAA;AACnD,CAAC,CAAC,CAAA","sourcesContent":["// use the compiled interfaces for intelisense\nimport 'reflect-metadata'\n\nimport { ILooseObject } from '../../collections/collection'\nimport { ITradeCaptureReport, IInstrument, IStandardHeader } from '../../types/FIXML50SP2'\nimport { IBatch } from '../../types/FIXML50SP2/set/batch'\nimport { ToViews } from '../env/to-views'\n\nconst testFolder: string = 'examples/FIXML/cme/tc/Delivery Fixed Commodity Swap'\nconst toViews: ToViews = new ToViews(testFolder)\n\nbeforeAll(async () => {\n  await toViews.load()\n}, 45000)\n\ntest('expect a view from fix msg', () => {\n  const views = toViews.views\n  expect(views.length).toEqual(1)\n})\n\ntest('expect a batch view ', () => {\n  const batch = toViews.batch\n  expect(batch).toBeTruthy()\n  const o: IBatch = batch.toObject()\n  expect(o).toBeTruthy()\n  const instances: ILooseObject[] = o.Batch\n  expect(Array.isArray(instances)).toEqual(true)\n  expect(instances.length).toEqual(1)\n})\n\ntest('expect an instrument', () => {\n  const views = toViews.views\n  const t: ITradeCaptureReport = views[0].toObject()\n  expect(t).toBeTruthy()\n  const i = t.Instrument\n  expect(i).toBeTruthy()\n})\n\ntest('check instrument attributes', () => {\n  const views = toViews.views\n  const t: ITradeCaptureReport = views[0].toObject()\n  const i = t.Instrument\n  expect(i).toBeTruthy()\n  const iv = views[0].getView('Instrument')\n  expect(iv).toBeTruthy()\n  expect(i.SecurityExchange).toEqual('XXXX')\n  expect(iv.getString('SecurityExchange')).toEqual('XXXX')\n  expect(iv.getString('SecurityType')).toEqual('CMDTYSWAP')\n  expect(i.SecurityType).toEqual('CMDTYSWAP')\n})\n\ntest('check instrument groups', () => {\n  const views = toViews.views\n  const t: ITradeCaptureReport = views[0].toObject()\n  const i: IInstrument = t.Instrument\n  const stream = i.StreamGrp\n  expect(stream).toBeTruthy()\n  expect(Array.isArray(stream))\n  expect(stream.length).toEqual(2)\n  const grpView = views[0].getView('Instrument.StreamGrp')\n  expect(grpView).toBeTruthy()\n  const g0 = grpView.getGroupInstance(0)\n  const g1 = grpView.getGroupInstance(1)\n  expect(g0).toBeTruthy()\n  expect(g1).toBeTruthy()\n  // TotNotlUOM=\"MMBtu\" TotNotl=\"310000.10\" NotlUOM=\"MMBtu\" NotlUnit=\"D\" NotlPeriod=\"1\" Notl=\"10000.20\" RcvSide=\"1\" PaySide=\"2\" Typ=\"1\"\n  const keys = ['StreamTotalNotionalUnitOfMeasure', 'StreamTotalNotional', 'StreamNotionalUnitOfMeasure', 'StreamNotionalFrequencyUnit', 'StreamNotionalFrequencyPeriod', 'StreamNotional', 'StreamReceiveSide', 'StreamPaySide', 'StreamType']\n\n  const v0: any[] = g0.getTypedTags(keys)\n  expect(v0[0]).toEqual('MMBtu')\n  expect(v0[1]).toEqual(310000.10)\n  expect(v0[2]).toEqual('MMBtu')\n  expect(v0[3]).toEqual('D')\n  expect(v0[4]).toEqual(1)\n  expect(v0[5]).toEqual(10000.20)\n  expect(v0[6]).toEqual(1)\n  expect(v0[7]).toEqual(2)\n  expect(v0[8]).toEqual(1)\n\n  // TotNotlUOM=\"MMBtu\" TotNotl=\"310000.10\" NotlUOM=\"MMBtu\" NotlUnit=\"D\" NotlPeriod=\"1\" Notl=\"10000.20\" RcvSide=\"2\" PaySide=\"1\" Typ=\"0\">\n  const v1: any[] = g1.getTypedTags(keys)\n  expect(v1[0]).toEqual('MMBtu')\n  expect(v1[1]).toEqual(310000.10)\n  expect(v1[2]).toEqual('MMBtu')\n  expect(v1[3]).toEqual('D')\n  expect(v1[4]).toEqual(1)\n  expect(v1[5]).toEqual(10000.20)\n  expect(v1[6]).toEqual(2)\n  expect(v1[7]).toEqual(1)\n  expect(v1[8]).toEqual(0)\n})\n\n/*{\n\"SenderCompID\": \"CME\",\n\"TargetCompID\": \"ATS_BROKER1\",\n\"SenderSubID\": \"STP\",\n\"TargetSubID\": \"STP_API_IRAT_T\"\n*/\n\ntest('expect Hdr view to be on Batch', () => {\n  const batch = toViews.batch\n  const o: IBatch = batch.toObject()\n  const hdr: IStandardHeader = o.StandardHeader\n  expect(hdr).toBeTruthy()\n  expect(hdr.SenderCompID).toEqual('CME')\n  expect(hdr.TargetCompID).toEqual('ATS_BROKER1')\n  expect(hdr.SenderSubID).toEqual('STP')\n  expect(hdr.TargetSubID).toEqual('STP_API_IRAT_T')\n})\n"]}