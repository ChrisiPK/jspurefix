{"version":3,"file":"repo-full-fixml-msg.test.js","sourceRoot":"","sources":["../../../src/test/fixml/repo-full-fixml-msg.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'reflect-metadata'\n\nimport * as path from 'path'\nimport { ILooseObject } from '../../collections/collection'\nimport { FixDefinitions } from '../../dictionary/definition'\nimport { ISessionDescription, StringDuplex } from '../../transport'\nimport { JsFixConfig } from '../../config'\nimport { MsgView, ElasticBuffer, MsgParser } from '../../buffer'\nimport { AsciiChars } from '../../buffer/ascii'\nimport { FixmlEncoder, FiXmlParser } from '../../buffer/fixml'\nimport { DefinitionFactory, JsonHelper } from '../../util'\nimport { Setup } from '../env/setup'\n\nlet definitions: FixDefinitions\nlet jsonHelper: JsonHelper\nlet sessionDescription: ISessionDescription\nconst root: string = path.join(__dirname, '../../../data/examples/FIXML')\nlet setup: Setup = null\n\nbeforeAll(async () => {\n  setup = new Setup('session/test-initiator.json', null)\n  await setup.init()\n  sessionDescription = setup.client.description\n  definitions = await new DefinitionFactory().getDefinitions('repofixml')\n  jsonHelper = new JsonHelper(definitions)\n}, 45000)\n\nasync function testEncodeDecode (asObj: ILooseObject, msgType: string): Promise<ILooseObject> {\n  // encode to FIXML format from provided object.\n  return new Promise(async (resolve, reject) => {\n    const fe = new FixmlEncoder(new ElasticBuffer(), definitions)\n    fe.encode(asObj, msgType)\n    const fixml: string = fe.buffer.toString()\n    const config = new JsFixConfig(null, definitions, sessionDescription, AsciiChars.Pipe)\n    const xmlParser: MsgParser = new FiXmlParser(config, new StringDuplex(fixml).readable)\n    if (asObj.Batch) {\n      xmlParser.on('batch', (msgType: string, v: MsgView) => {\n        const o: ILooseObject = v.toObject()\n        resolve(o)\n      })\n    } else {\n      xmlParser.on('msg', (msgType: string, v: MsgView) => {\n        const o: ILooseObject = v.toObject()\n        resolve(o)\n      })\n    }\n\n    xmlParser.on('error', (e) => {\n      reject(e)\n    })\n  })\n}\n\ntest('MktDataFull settle fixml object', async () => {\n  const msgType: string = 'MktDataFull'\n  const file: string = path.join(root,'cme/md/settle')\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\n  expect(o).toEqual(asObj)\n}, 1000)\n\ntest('AllocInstrctn fixml object', async () => {\n  const msgType: string = 'AllocInstrctn'\n  const file: string = path.join(root,'cme/alloc/Claiming Firm Requests Sub-allocation with Allocation Instructions/')\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\n  expect(o).toEqual(asObj)\n}, 1000)\n\ntest('AllocRpt fixml object', async () => {\n  const msgType: string = 'AllocRpt'\n  const file: string = path.join(root,'cme/alloc/Clearing System Notifies Allocation to the Claiming Firm - Cross-Exchange/')\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\n  expect(o).toEqual(asObj)\n}, 1000)\n\ntest('TrdCaptRpt fixml object', async () => {\n  const msgType: string = 'TrdCaptRpt'\n  const file: string = path.join(root,'cme/tc/Delivery Fixed Commodity Swap')\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\n  expect(o).toEqual(asObj)\n}, 1000)\n\ntest('MktDataFull fixml object', async () => {\n  const msgType: string = 'MktDataFull'\n  const file: string = path.join(root,'cme/md/futures')\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\n  expect(o).toEqual(asObj)\n}, 1000)\n\ntest('UserReq logon fixml object', async () => {\n  const msgType: string = 'UserReq'\n  const file: string = path.join(root,'cme/ur/logon')\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\n  expect(o).toEqual(asObj)\n}, 1000)\n\ntest('UserReq logoff fixml object', async () => {\n  const msgType: string = 'UserReq'\n  const file: string = path.join(root,'cme/ur/logoff')\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\n  expect(o).toEqual(asObj)\n}, 1000)\n\ntest('TrdCaptRpt 2 fixml object', async () => {\n  const msgType: string = 'TrdCaptRpt'\n  const file: string = path.join(root,'cme/tc/Initial Single Side Submission')\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\n  expect(o).toEqual(asObj)\n}, 1000)\n\ntest('TrdCaptRpt 3 fixml object', async () => {\n  const msgType: string = 'TrdCaptRpt'\n  const file: string = path.join(root,'cme/tc/Accepted Unmatched')\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\n  expect(o).toEqual(asObj)\n}, 1000)\n\ntest('TrdCaptRptReq fixml object', async () => {\n  const msgType: string = 'TrdCaptRptReq'\n  const file: string = path.join(root,'cme/tc/Trading Firm Continued Subscription')\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\n  expect(o).toEqual(asObj)\n}, 1000)\n\ntest('Order fixml object', async () => {\n  const msgType: string = 'Order'\n  const file: string = path.join(root,'om/nso')\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\n  expect(o).toEqual(asObj)\n}, 1000)\n\ntest('ExecRpt fixml object', async () => {\n  const msgType: string = 'ExecRpt'\n  const file: string = path.join(root,'om/er')\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\n  expect(o).toEqual(asObj)\n}, 1000)\n"]}