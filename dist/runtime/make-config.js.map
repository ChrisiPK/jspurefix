{"version":3,"file":"make-config.js","sourceRoot":"","sources":["../../src/runtime/make-config.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA4C;AAE5C,sCAAyE;AAEzE,mCAA4C;AAC5C,uCAA6C;AAC7C,2CAAsC;AAG/B,IAAM,cAAc,GAApB,MAAM,cAAc;IACzB,YAC6C,iBAAoC,EAC1B,UAA8B,EAC9B,UAA8B,EAC7B,WAAgC;QAH3C,sBAAiB,GAAjB,iBAAiB,CAAmB;QAC1B,eAAU,GAAV,UAAU,CAAoB;QAC9B,eAAU,GAAV,UAAU,CAAoB;QAC7B,gBAAW,GAAX,WAAW,CAAqB;IAAG,CAAC;IAE5F,UAAU;QACR,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAA;QACpC,OAAO,IAAI,OAAO,CAAe,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;YAClD,IAAI;gBACF,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,UAAU,EACtE,CAAC,CAAS,EAAE,EAAE;oBACZ,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,CAAA;gBACvE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,WAA2B,EAAE,EAAE;oBACtC,MAAM,MAAM,GAAG,IAAI,oBAAW,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,kBAAU,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,CAAA;oBAC1G,MAAM,CAAC,MAAM,CAAC,CAAA;gBAChB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;oBACX,MAAM,CAAC,CAAC,CAAC,CAAA;gBACX,CAAC,CAAC,CAAA;aACL;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,CAAC,CAAC,CAAC,CAAA;aACV;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;CACF,CAAA;AAzBY,cAAc;IAD1B,IAAA,qBAAU,GAAE;IAGR,WAAA,IAAA,iBAAM,EAAC,wBAAiB,CAAC,CAAA;IACzB,WAAA,IAAA,iBAAM,EAAC,oBAAQ,CAAC,kBAAkB,CAAC,CAAA;IACnC,WAAA,IAAA,iBAAM,EAAC,oBAAQ,CAAC,kBAAkB,CAAC,CAAA;IACnC,WAAA,IAAA,iBAAM,EAAC,oBAAQ,CAAC,mBAAmB,CAAC,CAAA;qCAHyB,wBAAiB;QACd,2BAAkB;GAH1E,cAAc,CAyB1B;AAzBY,wCAAc","sourcesContent":["import { AsciiChars } from '../buffer/ascii'\nimport { ISessionDescription, ISessionMsgFactory } from '../transport/'\nimport { IJsFixConfig, JsFixConfig, JsFixLoggerFactory } from '../config'\nimport { FixDefinitions } from '../dictionary/definition'\nimport { DefinitionFactory } from '../util/'\nimport { injectable, inject } from 'tsyringe'\nimport { DITokens } from './di-tokens'\n\n@injectable()\nexport class RuntimeFactory {\n  constructor (\n    @inject(DefinitionFactory) public readonly definitionFactory: DefinitionFactory,\n    @inject(DITokens.JsFixLoggerFactory) public readonly logFactory: JsFixLoggerFactory,\n    @inject(DITokens.ISessionMsgFactory) public readonly msgFactory: ISessionMsgFactory,\n    @inject(DITokens.ISessionDescription) public readonly description: ISessionDescription) {}\n\n  makeConfig (): Promise<IJsFixConfig> {\n    const description = this.description\n    return new Promise<IJsFixConfig>((accept, reject) => {\n      try {\n        this.definitionFactory.getDefinitions(description.application.dictionary,\n          (t: string) => {\n            return this.logFactory.logger(`${description.application.type}.${t}`)\n          }).then((definitions: FixDefinitions) => {\n            const config = new JsFixConfig(this.msgFactory, definitions, description, AsciiChars.Soh, this.logFactory)\n            accept(config)\n          }).catch(e => {\n            reject(e)\n          })\n      } catch (e) {\n        reject(e)\n      }\n    })\n  }\n}\n"]}