{"version":3,"file":"session-container.js","sourceRoot":"","sources":["../../src/runtime/session-container.ts"],"names":[],"mappings":"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","sourcesContent":["import { container, DependencyContainer } from 'tsyringe'\nimport { DefinitionFactory } from '../util'\nimport { IJsFixConfig, JsFixLoggerFactory, JsFixWinstonLogFactory, WinstonLogger } from '../config'\nimport { DITokens } from './di-tokens'\nimport { RuntimeFactory } from './make-config'\n\nimport { TcpAcceptorListener, RecoveringTcpInitiator,\n  TcpInitiatorConnector, TcpInitiator } from '../transport/tcp'\nimport { HttpInitiator, HttpAcceptorListener, HttpJsonSampleAdapter } from '../transport/http'\nimport { ISessionMsgFactory, MsgTransmitter, ISessionDescription } from '../transport'\nimport { AsciiMsgTransmitter } from '../transport/ascii/ascii-msg-transmitter'\nimport { FixmlMsgTransmitter } from '../transport/fixml/fixml-msg-transmitter'\nimport { FixmlSessionMsgFactory } from '../transport/fixml'\nimport { AsciiSessionMsgFactory } from '../transport/ascii'\nimport { ElasticBuffer, MsgEncoder, MsgParser } from '../buffer'\nimport { AsciiParser, AsciiParserState, AsciiSegmentParser } from '../buffer/ascii'\nimport { FixmlEncoder, FiXmlParser } from '../buffer/fixml'\nimport { FixEntity } from '../transport/fix-entity'\nimport { IHttpAdapter } from '../transport/http/http-adapter'\n\nexport class SessionContainer {\n\n  public reset (): void {\n    container.reset()\n  }\n\n  public registerGlobal (loggerFactory?: JsFixLoggerFactory): void;\n  public registerGlobal (level: string): void;\n  public registerGlobal (levelOrLoggerFactory: string | JsFixLoggerFactory = 'info'): void {\n    container.registerInstance(DefinitionFactory, new DefinitionFactory())\n    let lf: JsFixLoggerFactory;\n    if (typeof levelOrLoggerFactory === 'string') {\n      lf = new JsFixWinstonLogFactory(WinstonLogger.consoleOptions(levelOrLoggerFactory))\n    } else {\n      lf = levelOrLoggerFactory;\n    }\n    container.registerInstance(DITokens.JsFixLoggerFactory, lf)\n    container.register<RuntimeFactory>(RuntimeFactory, {\n      useClass: RuntimeFactory\n    })\n    container.register<ElasticBuffer>(DITokens.ElasticBuffer, {\n      useClass: ElasticBuffer\n    })\n  }\n\n  protected makeSessionFactory (description: ISessionDescription): ISessionMsgFactory {\n    const fixml = !this.isAscii(description)\n    return fixml ?\n      new FixmlSessionMsgFactory(description) :\n      new AsciiSessionMsgFactory(description)\n  }\n\n  public newChild (description: ISessionDescription): DependencyContainer {\n    const sessionContainer = container.createChildContainer()\n    const sf = this.makeSessionFactory(description)\n    sessionContainer.registerInstance(DITokens.ISessionDescription, description)\n    sessionContainer.registerInstance(DITokens.ISessionMsgFactory, sf)\n    return sessionContainer\n  }\n\n  public makeSystem (description: ISessionDescription): Promise<DependencyContainer> {\n    return new Promise<DependencyContainer>((resolve, reject) => {\n      const sessionContainer = this.newChild(description)\n      const factory = sessionContainer.resolve<RuntimeFactory>(RuntimeFactory)\n      factory.makeConfig().then((c: IJsFixConfig) => {\n        this.registerSession(c, sessionContainer)\n        resolve(sessionContainer)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  public isAscii (description: ISessionDescription): boolean {\n    return description.application.protocol === 'ascii'\n  }\n\n  public isInitiator (description: ISessionDescription): boolean {\n    return description.application.type === 'initiator'\n  }\n\n  public asAscii (description: ISessionDescription, sessionContainer: DependencyContainer) {\n    sessionContainer.register<MsgTransmitter>(DITokens.MsgTransmitter, {\n      useClass: AsciiMsgTransmitter\n    })\n    sessionContainer.register<MsgParser>(DITokens.MsgParser, {\n      useClass: AsciiParser\n    })\n    const parseSize = 160 * 1024\n    const sendSize = 10 * 1024\n\n    sessionContainer.register(DITokens.maxMessageLen, {\n      useValue: parseSize\n    })\n    sessionContainer.register<AsciiSegmentParser>(AsciiSegmentParser, {\n      useClass: AsciiSegmentParser\n    })\n    sessionContainer.register<AsciiParserState>(AsciiParserState, {\n      useClass: AsciiParserState\n    })\n\n    sessionContainer.registerInstance<ElasticBuffer>(DITokens.TransmitBuffer, new ElasticBuffer(sendSize))\n    sessionContainer.registerInstance<ElasticBuffer>(DITokens.ParseBuffer, new ElasticBuffer(parseSize))\n\n    if (this.isInitiator(description)) {\n      sessionContainer.register<TcpInitiator>(TcpInitiator, {\n        useClass: TcpInitiator\n      })\n      sessionContainer.register<RecoveringTcpInitiator>(RecoveringTcpInitiator, {\n        useClass: RecoveringTcpInitiator\n      })\n      sessionContainer.register<TcpInitiatorConnector>(TcpInitiatorConnector, {\n        useClass: TcpInitiatorConnector\n      })\n      if (description.application.resilient) {\n        sessionContainer.register<FixEntity>(DITokens.FixEntity, {\n          useClass: RecoveringTcpInitiator\n        })\n      } else {\n        sessionContainer.register<FixEntity>(DITokens.FixEntity, {\n          useClass: TcpInitiatorConnector\n        })\n      }\n    } else {\n      sessionContainer.register<FixEntity>(DITokens.FixEntity, {\n        useClass: TcpAcceptorListener\n      })\n    }\n  }\n\n  public asFixml (description: ISessionDescription, sessionContainer: DependencyContainer) {\n    sessionContainer.register<MsgTransmitter>(DITokens.MsgTransmitter, {\n      useClass: FixmlMsgTransmitter\n    })\n    const sendSize = 10 * 1024\n\n    sessionContainer.register<MsgParser>(DITokens.MsgParser, {\n      useClass: FiXmlParser\n    })\n    sessionContainer.register(DITokens.maxMessageLocations, {\n      useValue: sendSize\n    })\n    sessionContainer.register<MsgEncoder>(DITokens.MsgEncoder, {\n      useClass: FixmlEncoder\n    })\n    sessionContainer.registerInstance<ElasticBuffer>(DITokens.TransmitBuffer, new ElasticBuffer(sendSize))\n    sessionContainer.register<HttpAcceptorListener>(HttpAcceptorListener, {\n      useClass: HttpAcceptorListener\n    })\n    sessionContainer.register<HttpInitiator>(HttpInitiator, {\n      useClass: HttpInitiator\n    })\n    if (this.isInitiator(description)) {\n      sessionContainer.register<FixEntity>(DITokens.FixEntity, {\n        useClass: HttpInitiator\n      })\n      sessionContainer.register<IHttpAdapter>(DITokens.IHttpAdapter, {\n        useClass: HttpJsonSampleAdapter\n      })\n    } else {\n      sessionContainer.register<FixEntity>(DITokens.FixEntity, {\n        useClass: HttpAcceptorListener\n      })\n    }\n  }\n\n  protected asciiConstants (c: IJsFixConfig, sessionContainer: DependencyContainer) {\n    sessionContainer.register(DITokens.delimiter, {\n      useValue: c.delimiter\n    })\n    sessionContainer.register(DITokens.logDelimiter, {\n      useValue: c.logDelimiter\n    })\n  }\n\n  public registerSession (c: IJsFixConfig, sessionContainer: DependencyContainer) {\n    if (this.isAscii(c.description)) {\n      this.asAscii(c.description, sessionContainer)\n      this.asciiConstants(c, sessionContainer)\n    } else {\n      this.asFixml(c.description, sessionContainer)\n    }\n    c.sessionContainer = sessionContainer\n    sessionContainer.registerInstance(DITokens.IJsFixConfig, c)\n    sessionContainer.registerInstance(DITokens.Definitions, c.definitions)\n  }\n}\n"]}