{"version":3,"file":"session-launcher.js","sourceRoot":"","sources":["../../src/runtime/session-launcher.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA4B;AAC5B,sCAAiH;AAIjH,2DAAsD;AACtD,2CAAsC;AAEtC,MAAM,oBAAoB,GAAG,IAAI,+BAAsB,CAAC,sBAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAA;AAE7F,MAAsB,eAAe;IAKnC,YAAuB,eAA6C,EAC7C,iBAA+C,IAAI,EAClC,gBAAoC,oBAAoB;QAAxD,kBAAa,GAAb,aAAa,CAA2C;QANzF,SAAI,GAAW,QAAQ,CAAA;QAYpB,qBAAgB,GAAqB,IAAI,oCAAgB,EAAE,CAAA;QALnE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;QACnD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAA;QACvD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAA;IACvD,CAAC;IAIO,KAAK;QACX,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;YAChC,YAAY,CAAC,GAAG,EAAE;gBAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAA;gBAC9C,OAAO,CAAC,IAAI,CAAC,CAAA;YACf,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC;IAES,WAAW,CAAE,gBAAqC;QAC1D,IAAI,gBAAgB,CAAC,YAAY,CAAY,oBAAQ,CAAC,SAAS,CAAC,EAAE;YAChE,MAAM,MAAM,GAAG,gBAAgB,CAAC,OAAO,CAAY,oBAAQ,CAAC,SAAS,CAAC,CAAA;YACtE,OAAO,MAAM,CAAC,KAAK,EAAE,CAAA;SACtB;aAAM;YACL,OAAO,IAAI,CAAC,KAAK,EAAE,CAAA;SACpB;IACH,CAAC;IAES,YAAY,CAAE,gBAAqC;QAC3D,IAAI,gBAAgB,CAAC,YAAY,CAAY,oBAAQ,CAAC,SAAS,CAAC,EAAE;YAChE,MAAM,MAAM,GAAG,gBAAgB,CAAC,OAAO,CAAY,oBAAQ,CAAC,SAAS,CAAC,CAAA;YACtE,OAAO,MAAM,CAAC,KAAK,EAAE,CAAA;SACtB;aAAM;YACL,OAAO,IAAI,CAAC,KAAK,EAAE,CAAA;SACpB;IACH,CAAC;IAES,WAAW,CAAE,MAAoB;QACzC,OAAO,IAAI,CAAA;IACb,CAAC;IAEM,GAAG;QACR,OAAO,IAAI,OAAO,CAAM,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;YACzC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;YAC1B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;YAC3B,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;gBACrB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;gBACtB,MAAM,CAAC,IAAI,CAAC,CAAA;YACd,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAQ,EAAE,EAAE;gBACpB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;gBACf,MAAM,CAAC,CAAC,CAAC,CAAA;YACX,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC;IAEM,IAAI;QACT,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;YACnB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;QAC1B,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YACX,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;QAClB,CAAC,CAAC,CAAA;IACJ,CAAC;IAEM,OAAO,CAAE,WAAgC;QAC9C,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;IACnD,CAAC;IAEM,WAAW,CAAE,WAAgC;QAClD,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;IACvD,CAAC;IAES,mBAAmB,CAAE,gBAAqC;QAClE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAA;IAC5C,CAAC;IAEO,UAAU,CAAE,WAAgC;QAClD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,WAAW,CAAC,WAAW,CAAC,IAAI,cAAc,WAAW,CAAC,WAAW,CAAC,QAAQ,GAAG,CAAC,CAAA;QAC/G,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,WAAW,CAAC,CAAA;IACtD,CAAC;IAEO,QAAQ,CAAE,SAA8B;QAC9C,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAe,oBAAQ,CAAC,YAAY,CAAC,CAAA;QACrE,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;QACxC,IAAI,CAAC,OAAO,EAAE;YACZ,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAA;SACpC;aAAM;YACL,IAAI,OAAO,CAAC,WAAW,EAAE;gBACvB,SAAS,CAAC,QAAQ,CAAa,oBAAQ,CAAC,UAAU,EAAE;oBAClD,UAAU,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC;iBAC9C,CAAC,CAAA;aACH;SACF;IACH,CAAC;IAEa,UAAU;;YACtB,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;YACpE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAA;YAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;YACpC,OAAO,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAA;QAC5C,CAAC;KAAA;IAEa,UAAU;;YACtB,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;YACnE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAA;YAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA;YACnC,OAAO,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAA;QAC3C,CAAC;KAAA;IAEa,KAAK;;YACjB,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;YACxD,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAA;YACrE,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAA;YACtE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;YAClC,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAA;QACtC,CAAC;KAAA;IAEO,UAAU,CAAC,MAAoC;QACrD,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC9B,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAA;SAC7C;QACD,OAAO,MAAM,CAAA;IACf,CAAC;CACF;AA/HD,0CA+HC","sourcesContent":["import * as path from 'path'\nimport { IJsFixConfig, IJsFixLogger, JsFixLoggerFactory, JsFixWinstonLogFactory, WinstonLogger } from '../config'\nimport { ISessionDescription, FixEntity, FixSession } from '../transport'\nimport { DependencyContainer } from 'tsyringe'\nimport { EngineFactory } from './engine-factory'\nimport { SessionContainer } from './session-container'\nimport { DITokens } from './di-tokens'\n\nconst defaultLoggerFactory = new JsFixWinstonLogFactory(WinstonLogger.consoleOptions('info'))\n\nexport abstract class SessionLauncher {\n  public root: string = '../../'\n  protected readonly logger: IJsFixLogger\n  public readonly initiatorConfig: ISessionDescription;\n  public readonly acceptorConfig: ISessionDescription;\n  protected constructor (initiatorConfig: string | ISessionDescription,\n                         acceptorConfig: string | ISessionDescription = null,\n                         private readonly loggerFactory: JsFixLoggerFactory = defaultLoggerFactory) {\n    this.logger = this.loggerFactory.logger('launcher')\n    this.initiatorConfig = this.loadConfig(initiatorConfig)\n    this.acceptorConfig = this.loadConfig(acceptorConfig)\n  }\n\n  protected sessionContainer: SessionContainer = new SessionContainer()\n\n  private empty (): Promise<any> {\n    return new Promise((resolve, _) => {\n      setImmediate(() => {\n        this.logger.info('resolving an empty promise')\n        resolve(null)\n      })\n    })\n  }\n\n  protected getAcceptor (sessionContainer: DependencyContainer): Promise<any> {\n    if (sessionContainer.isRegistered<FixEntity>(DITokens.FixEntity)) {\n      const entity = sessionContainer.resolve<FixEntity>(DITokens.FixEntity)\n      return entity.start()\n    } else {\n      return this.empty()\n    }\n  }\n\n  protected getInitiator (sessionContainer: DependencyContainer): Promise<any> {\n    if (sessionContainer.isRegistered<FixEntity>(DITokens.FixEntity)) {\n      const entity = sessionContainer.resolve<FixEntity>(DITokens.FixEntity)\n      return entity.start()\n    } else {\n      return this.empty()\n    }\n  }\n\n  protected makeFactory (config: IJsFixConfig): EngineFactory {\n    return null\n  }\n\n  public run () {\n    return new Promise<any>((accept, reject) => {\n      const logger = this.logger\n      logger.info('launching ..')\n      this.setup().then(() => {\n        logger.info('.. done')\n        accept(true)\n      }).catch((e: Error) => {\n        logger.error(e)\n        reject(e)\n      })\n    })\n  }\n\n  public exec () {\n    this.run().then(() => {\n      console.log('finished.')\n    }).catch(e => {\n      console.error(e)\n    })\n  }\n\n  public isAscii (description: ISessionDescription): boolean {\n    return this.sessionContainer.isAscii(description)\n  }\n\n  public isInitiator (description: ISessionDescription): boolean {\n    return this.sessionContainer.isInitiator(description)\n  }\n\n  protected registerApplication (sessionContainer: DependencyContainer): void {\n    this.logger.info('bypass register via DI')\n  }\n\n  private makeSystem (description: ISessionDescription): Promise<DependencyContainer> {\n    this.logger.info(`creating app ${description.application.name} [protocol ${description.application.protocol}]`)\n    return this.sessionContainer.makeSystem(description)\n  }\n\n  private register (container: DependencyContainer): void {\n    const config = container.resolve<IJsFixConfig>(DITokens.IJsFixConfig)\n    const factory = this.makeFactory(config)\n    if (!factory) {\n      this.registerApplication(container)\n    } else {\n      if (factory.makeSession) {\n        container.register<FixSession>(DITokens.FixSession, {\n          useFactory: () => factory.makeSession(config)\n        })\n      }\n    }\n  }\n\n  private async makeClient (): Promise<any> {\n    const sessionContainer = await this.makeSystem(this.initiatorConfig)\n    this.register(sessionContainer)\n    this.logger.info('create initiator')\n    return this.getInitiator(sessionContainer)\n  }\n\n  private async makeServer (): Promise<any> {\n    const sessionContainer = await this.makeSystem(this.acceptorConfig)\n    this.register(sessionContainer)\n    this.logger.info('create acceptor')\n    return this.getAcceptor(sessionContainer)\n  }\n\n  private async setup () {\n    this.sessionContainer.registerGlobal(this.loggerFactory)\n    const server = this.acceptorConfig ? this.makeServer() : this.empty()\n    const client = this.initiatorConfig ? this.makeClient() : this.empty()\n    this.logger.info('launching ....')\n    return Promise.all([server, client])\n  }\n\n  private loadConfig(config: string | ISessionDescription): ISessionDescription {\n    if (typeof config === 'string') {\n      return require(path.join(this.root, config))\n    }\n    return config\n  }\n}\n"]}