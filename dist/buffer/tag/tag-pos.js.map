{"version":3,"file":"tag-pos.js","sourceRoot":"","sources":["../../../src/buffer/tag/tag-pos.ts"],"names":[],"mappings":";;;AAAA,MAAa,MAAM;IACjB,YAAoB,QAAgB,EAAS,GAAW,EAAS,KAAa,EAAS,GAAW;QAA9E,aAAQ,GAAR,QAAQ,CAAQ;QAAS,QAAG,GAAH,GAAG,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAQ;QAAS,QAAG,GAAH,GAAG,CAAQ;IAClG,CAAC;IAEM,MAAM,CAAC,OAAO,CAAE,GAAW,EAAE,GAAW;QAC7C,IAAI,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE;YACrB,OAAO,CAAC,CAAC,CAAA;SACV;QACD,IAAI,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE;YACrB,OAAO,CAAC,CAAA;SACT;QACD,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,KAAK,GAAG,CAAC,KAAK,EAAE;YAClD,OAAO,CAAC,CAAA;SACT;QACD,OAAO,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC3E,CAAC;IAEM,MAAM,CAAC,YAAY,CAAE,EAAY,EAAE,GAAW;QACnD,IAAI,CAAC,GAAW,CAAC,CAAA;QACjB,IAAI,CAAC,GAAW,EAAE,CAAC,MAAM,GAAG,CAAC,CAAA;QAC7B,OAAO,CAAC,IAAI,CAAC,EAAE;YACb,MAAM,CAAC,GAAW,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAA;YAC9B,MAAM,GAAG,GAAW,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACrC,IAAI,GAAG,GAAG,CAAC,EAAE;gBACX,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;aACV;iBAAM,IAAI,GAAG,GAAG,CAAC,EAAE;gBAClB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;aACV;iBAAM;gBACL,OAAO,CAAC,CAAA;aACT;SACF;QACD,OAAO,CAAC,CAAC,GAAG,CAAC,CAAA;IACf,CAAC;IAEM,MAAM,CAAE,QAAgB,EAAE,GAAW,EAAE,KAAa,EAAE,GAAW;QACtE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACxB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;QACd,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;IAChB,CAAC;IAEM,QAAQ;QACb,OAAO,IAAI,IAAI,CAAC,QAAQ,OAAO,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,GAAG,CAAA;IACrF,CAAC;IAEM,KAAK;QACV,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAA;IAClE,CAAC;CACF;AAhDD,wBAgDC","sourcesContent":["export class TagPos {\n  constructor (public position: number, public tag: number, public start: number, public len: number) {\n  }\n\n  public static compare (lhs: TagPos, rhs: TagPos): number {\n    if (lhs.tag < rhs.tag) {\n      return -1\n    }\n    if (lhs.tag > rhs.tag) {\n      return 1\n    }\n    if (lhs.tag === rhs.tag && lhs.start === rhs.start) {\n      return 0\n    }\n    return ((lhs.start < rhs.start) ? -1 : ((lhs.start > rhs.start) ? 1 : 0))\n  }\n\n  public static binarySearch (ar: TagPos[], tag: number): number {\n    let m: number = 0\n    let n: number = ar.length - 1\n    while (m <= n) {\n      const k: number = (n + m) >> 1\n      const cmp: number = tag - (ar[k].tag)\n      if (cmp > 0) {\n        m = k + 1\n      } else if (cmp < 0) {\n        n = k - 1\n      } else {\n        return k\n      }\n    }\n    return -m - 1\n  }\n\n  public assign (position: number, tag: number, start: number, len: number): void {\n    this.position = position\n    this.tag = tag\n    this.start = start\n    this.len = len\n  }\n\n  public toString (): string {\n    return `[${this.position}] = ${this.tag} (${this.start}..${this.start + this.len})`\n  }\n\n  public clone (): TagPos {\n    return new TagPos(this.position, this.tag, this.start, this.len)\n  }\n}\n"]}