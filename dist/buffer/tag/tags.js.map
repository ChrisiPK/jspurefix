{"version":3,"file":"tags.js","sourceRoot":"","sources":["../../../src/buffer/tag/tags.ts"],"names":[],"mappings":"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","sourcesContent":["import { FixDefinitions } from '../../dictionary/definition'\nimport { ContainedSimpleField } from '../../dictionary/contained'\nimport { TagPos } from './tag-pos'\nimport { MsgTag } from '../../types'\nimport { TagType } from './tag-type'\n\nexport class Tags {\n  public static readonly BeginString: number = MsgTag.BeginString\n  public static readonly BodyLengthTag: number = MsgTag.BodyLength\n  public static readonly CheckSumTag: number = MsgTag.CheckSum\n  public static readonly MsgTag: number = MsgTag.MsgType\n\n  public tagPos: TagPos[] = new Array(this.startingLength)\n  public nextTagPos: number = 0\n\n  constructor (public readonly definitions: FixDefinitions, public readonly startingLength: number = 30 * 1000) {\n  }\n\n  public static toJSType (simple: ContainedSimpleField): string {\n    switch (simple.definition.tagType) {\n      case TagType.String:\n        return 'string'\n\n      case TagType.Int:\n      case TagType.Float:\n      case TagType.Length:\n        return 'number'\n\n      case TagType.RawData:\n        return 'Buffer'\n\n      case TagType.Boolean:\n        return 'boolean'\n\n      case TagType.UtcTimestamp:\n      case TagType.UtcDateOnly:\n      case TagType.UtcTimeOnly:\n      case TagType.LocalDate:\n        return 'Date'\n\n      default:\n        return 'string'\n    }\n  }\n\n  public static toType (type: string): TagType {\n    type = type || 'string'\n    switch (type.toLowerCase()) {\n      case 'currency':\n      case 'string':\n      case 'char': {\n        return TagType.String\n      }\n\n      case 'int':\n      case 'numingroup':\n      case 'seqnum': {\n        return TagType.Int\n      }\n\n      case 'qty':\n      case 'percentage':\n      case 'amt':\n      case 'price':\n      case 'priceoffset':\n      case 'float': {\n        return TagType.Float\n      }\n\n      case 'length': {\n        return TagType.Length\n      }\n\n      case 'boolean': {\n        return TagType.Boolean\n      }\n\n      case 'utctimestamp': {\n        return TagType.UtcTimestamp\n      }\n\n      case 'localmktdate': {\n        return TagType.LocalDate\n      }\n\n      case 'utcdateonly': {\n        return TagType.UtcDateOnly\n      }\n\n      case 'utctimeonly': {\n        return TagType.UtcTimeOnly\n      }\n\n      case 'data': {\n        return TagType.RawData\n      }\n\n      default: {\n        return TagType.String\n      }\n    }\n  }\n\n  public clone (): Tags {\n    const next: number = this.nextTagPos\n    const cloned: Tags = new Tags(this.definitions, next)\n    cloned.nextTagPos = next\n    for (let i = 0; i < next; ++i) {\n      cloned.tagPos[i] = this.tagPos[i].clone()\n    }\n    return cloned\n  }\n\n  public reset (): void {\n    this.nextTagPos = 0\n  }\n\n  public store (start: number, len: number, tag: number): void {\n    const tagPtr: number = this.nextTagPos\n    if (tagPtr === this.tagPos.length) {\n      this.expand()\n    }\n    const tp: TagPos = this.tagPos[tagPtr]\n    if (tp) {\n      tp.assign(tagPtr, tag, start, len)\n    } else {\n      this.tagPos[tagPtr] = new TagPos(tagPtr, tag, start, len)\n    }\n    this.nextTagPos++\n  }\n\n  private expand (): void {\n    const size = this.tagPos.length * 2\n    const tagPos = new Array(size)\n    for (let i = 0; i < this.tagPos.length; ++i) {\n      tagPos[i] = this.tagPos[i]\n    }\n    this.tagPos = tagPos\n  }\n}\n"]}