{"version":3,"file":"ascii-parser-state.js","sourceRoot":"","sources":["../../../src/buffer/ascii/ascii-parser-state.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tags } from '../tag/tags'\nimport { MessageDefinition } from '../../dictionary/definition'\nimport { ElasticBuffer } from '../elastic-buffer'\nimport { ParseState } from './parse-state'\nimport { inject, injectable } from 'tsyringe'\nimport { DITokens } from '../../runtime/di-tokens'\n\n@injectable()\nexport class AsciiParserState {\n  public message: MessageDefinition\n  public locations: Tags\n  public parseState: ParseState\n  public bodyLen: number\n  public checksumExpectedPos: number\n  public tagStartPos: number\n  public equalPos: number\n  public valueEndPos: number\n  public count: number\n  public currentTag: number\n  public rawDataLen: number\n  public rawDataRead: number\n  public msgType: string\n\n  constructor (@inject(DITokens.ParseBuffer) public readonly elasticBuffer: ElasticBuffer) {\n  }\n\n  public beginTag (pos: number) {\n    this.parseState = ParseState.ParsingTag\n    this.tagStartPos = pos\n    this.equalPos = this.valueEndPos = -1\n    this.currentTag = 0\n  }\n\n  public endTag (pos: number): void {\n    this.equalPos = pos\n    const state = this.parseState\n    switch (state) {\n      case ParseState.ParsingTag: {\n        this.currentTag = this.elasticBuffer.getWholeNumber(this.tagStartPos, pos - 1)\n        break\n      }\n\n      default:\n        throw new Error(`EndTag: unexpected state ${state}`)\n    }\n    // if a raw tag, then need length to skip that many bytes\n    this.checkRawTag()\n  }\n\n  public incRaw (): boolean {\n    ++this.rawDataRead\n    return this.rawDataRead === this.rawDataLen + 1\n  }\n\n  public checkRawTag (): void {\n    const msg = this.message\n    if (!msg || !msg.containsRaw) {\n      // optimisation as will never hit raw data\n      this.parseState = ParseState.ParsingValue\n      return\n    }\n    // if this is a raw data tag then need to keep track of the length\n    // on this field to skip that many bytes.\n    const isDataLength: boolean = msg.containedLength[this.currentTag]\n    if (isDataLength) {\n      this.parseState = ParseState.ParsingRawDataLength\n    } else {\n      this.rawDataRead = 0\n      const isData: boolean = this.rawDataLen > 0\n      if (isData) {\n        this.parseState = ParseState.ParsingRawData\n      } else {\n        this.parseState = ParseState.ParsingValue\n      }\n    }\n  }\n\n  public store (): void {\n    const valueEndPos: number = this.elasticBuffer.getPos() - 1\n    this.valueEndPos = valueEndPos\n    const equalPos: number = this.equalPos\n    const tag: number = this.currentTag\n    const locations: Tags = this.locations\n    const buffer = this.elasticBuffer\n    const terminates = this.checksumExpectedPos\n\n    switch (this.parseState) {\n      case ParseState.ParsingValue:\n      case ParseState.ParsingRawData: {\n        this.rawDataLen = 0\n        locations.store(equalPos + 1, valueEndPos - equalPos - 1, tag)\n        break\n      }\n\n      case ParseState.ParsingRawDataLength: {\n        this.rawDataLen = buffer.getWholeNumber(equalPos + 1, valueEndPos - 1)\n        locations.store(equalPos + 1, valueEndPos - equalPos - 1, tag)\n        break\n      }\n    }\n\n    this.parseState = ParseState.BeginField\n    this.count++\n    const nextTagPos = locations.nextTagPos\n\n    switch (tag) {\n      case Tags.BeginString: {\n        if (nextTagPos !== 1) {\n          throw new Error(`BeginString: not expected at position [${nextTagPos}]`)\n        }\n        break\n      }\n\n      case Tags.BodyLengthTag: {\n        if (nextTagPos !== 2) {\n          throw new Error(`BodyLengthTag: not expected at position [${nextTagPos}]`)\n        }\n        this.bodyLen = buffer.getWholeNumber(equalPos + 1, valueEndPos - 1)\n        this.checksumExpectedPos = this.bodyLen + valueEndPos\n        this.elasticBuffer.checkGrowBuffer(this.bodyLen)\n        break\n      }\n\n      case Tags.MsgTag: {\n        if (nextTagPos !== 3) {\n          throw new Error(`MsgTag: not expected at position [${nextTagPos}]`)\n        }\n        this.msgType = buffer.getString(equalPos + 1, valueEndPos)\n        this.message = locations.definitions.message.get(this.msgType)\n        break\n      }\n\n      case Tags.CheckSumTag: {\n        if (valueEndPos < this.bodyLen) {\n          throw new Error(`CheckSumTag: [${valueEndPos}] expected after ${this.bodyLen}`)\n        }\n        this.parseState = ParseState.MsgComplete\n        break\n      }\n\n      default: {\n        if (terminates && valueEndPos > terminates) {\n          throw new Error(`Tag: [${tag}] cant be after ${terminates}`)\n        }\n        break\n      }\n    }\n\n    switch (nextTagPos) {\n      case 1: {\n        if (tag !== Tags.BeginString) {\n          throw new Error(`position 1 [${tag}] must be BeginString: 8=`)\n        }\n        break\n      }\n      case 2: {\n        if (tag !== Tags.BodyLengthTag) {\n          throw new Error(`position 2 [${tag}] must be BodyLengthTag: 9=`)\n        }\n        break\n      }\n      case 3: {\n        if (tag !== Tags.MsgTag) {\n          throw new Error(`position 3 [${tag}] must be MsgTag: 35=`)\n        }\n        break\n      }\n    }\n  }\n\n  public beginMessage (): void {\n    this.elasticBuffer.reset()\n    this.locations.reset()\n    this.checksumExpectedPos = 0\n    this.parseState = ParseState.BeginField\n    this.count = 0\n    this.currentTag = 0\n    this.tagStartPos = 0\n    this.valueEndPos = 0\n    this.equalPos = 0\n    this.rawDataRead = 0\n    this.rawDataLen = 0\n    this.bodyLen = 0\n    this.message = null\n    this.msgType = null\n  }\n}\n"]}