{"version":3,"file":"fixml-encoder.js","sourceRoot":"","sources":["../../../src/buffer/fixml/fixml-encoder.ts"],"names":[],"mappings":"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","sourcesContent":["import { ILooseObject } from '../../collections/collection'\nimport {\n  ContainedFieldSet, ContainedField, ContainedGroupField,\n  ContainedComponentField, ContainedSimpleField, FieldsDispatch\n} from '../../dictionary/contained'\nimport { AsciiChars } from '../ascii'\nimport { MsgEncoder } from '../msg-encoder'\nimport { ElasticBuffer } from '../elastic-buffer'\nimport moment = require('moment')\nimport { FixDefinitions } from '../../dictionary/definition'\nimport { IFieldDispatcher } from '../../dictionary/contained/field-dispatcher'\nimport { TagType } from '../tag/tag-type'\nimport { IPopulatedAttributes } from './populated-attributes'\nimport { inject, injectable } from 'tsyringe'\nimport { DITokens } from '../../runtime/di-tokens'\n\n@injectable()\nexport class FixmlEncoder extends MsgEncoder {\n  public attributePerLine: boolean = false\n  public readonly eol: string = require('os').EOL\n  private readonly beginDoc: string = `<FIXML>${this.eol}`\n  private readonly endDoc: string = '</FIXML>'\n  private readonly beginBatch: string = `<Batch>${this.eol}`\n  private readonly endBatch: string = '</Batch>'\n\n  public constructor (@inject(DITokens.TransmitBuffer) public readonly buffer: ElasticBuffer, @inject(DITokens.Definitions) public readonly definitions: FixDefinitions) {\n    super(definitions)\n  }\n\n  private static asString (sf: ContainedSimpleField, v: any): string {\n    switch (sf.definition.tagType) {\n      case TagType.String: {\n        return v as string\n      }\n\n      case TagType.Int:\n      case TagType.Float:\n      case TagType.Length: {\n        return v.toString()\n      }\n\n      case TagType.Boolean: {\n        return v ? 'Y' : 'N'\n      }\n\n      case TagType.UtcTimestamp: {\n        const d: Date = v as Date\n        return moment(d).utc().format('YYYY-MM-DDTHH:mm:ss.SSS')\n      }\n\n      case TagType.UtcTimeOnly: {\n        const d: Date = v as Date\n        return moment.utc(d).format('HH:mm:ss.SSS')\n      }\n\n      case TagType.LocalDate: {\n        const d: Date = v as Date\n        return moment(d).format('YYYY-MM-DD')\n      }\n\n      case TagType.UtcDateOnly: {\n        const d: Date = v as Date\n        return moment(d).utc(true).format('YYYY-MM-DD')\n      }\n    }\n  }\n\n  public encodeSet (o: ILooseObject, set: ContainedFieldSet): void {\n    const batch: ILooseObject[] = o.Batch\n    const toWrite: ILooseObject[] = batch || [o]\n    let depth = batch ? 1 : 0\n    const buffer = this.buffer\n    const begin = this.beginDoc\n    const indent: string = '\\t'\n    const endBatch = batch ? this.endBatch : ''\n    const eol = this.eol\n    buffer.reset()\n    buffer.writeString(begin)\n    if (batch) {\n      this.batchStart(o, set, depth)\n    }\n    toWrite.forEach((next: ILooseObject) => {\n      this.toXml(next, set.abbreviation, set, depth + 1)\n      buffer.writeString(eol)\n    })\n    if (batch) {\n      buffer.writeString(`${indent}${endBatch}`)\n    }\n\n    buffer.writeString(this.endDoc)\n  }\n\n  private batchStart (o: ILooseObject, set: ContainedFieldSet, depth: number) {\n    const buffer = this.buffer\n    const indent: string = '\\t'\n    const beginBatch = this.beginBatch\n    const hdr = o.StandardHeader\n    const eol = this.eol\n    buffer.writeString(`${indent}${beginBatch}`)\n    if (hdr) {\n      const h = set.fields[0] as ContainedComponentField\n      this.toXml(hdr, h.name, h.definition, depth + 1)\n      buffer.writeString(eol)\n    }\n  }\n\n  private toXml (o: ILooseObject, name: string, set: ContainedFieldSet, depth: number): void {\n\n    const buffer = this.buffer\n    const selfClose: string = '/>'\n    const close: string = '>'\n    const open: string = '<'\n    const indent: string = '\\t'.repeat(depth)\n    const newLine = this.eol\n    const fields: ContainedField[] = this.getPopulatedFields(set, o)\n    const eol: string = fields.length === 0 ? selfClose : close\n    buffer.writeString(`${indent}${open}`)\n    buffer.writeString(`${name} `)\n    this.attributes(o, set, depth, this.attributePerLine)\n    buffer.writeString(`${eol}`)\n    new FieldsDispatch().dispatchFields(fields, {\n      group: (g: ContainedGroupField) => this.complexGroup(o, g, depth),\n      component: (c: ContainedComponentField) => this.complexComponent(o, c, depth)\n    } as IFieldDispatcher)\n    if (fields.length) {\n      const end: string = `${newLine}${indent}</${name}>`\n      buffer.writeString(`${end}`)\n    }\n  }\n\n  private getPopulatedFields (set: ContainedFieldSet, o: ILooseObject): ContainedField[] {\n    const keys: string[] = Object.keys(o)\n    const fields: ContainedField[] = keys.reduce((a: ContainedField[], current: string) => {\n      const field: ContainedField = set.localNameToField.get(current)\n      if (field && !set.nameToLocalAttribute.containsKey(current)) {\n        a.push(field)\n      }\n      return a\n    }, [])\n    fields.sort((a: ContainedField, b: ContainedField) => a.position - b.position)\n    return fields\n  }\n\n  private encodeAttribute (name: string, val: string): void {\n    if (val == null) {\n      return\n    }\n    const buffer = this.buffer\n    buffer.writeString(name)\n    buffer.writeChar(AsciiChars.Equal)\n    buffer.writeChar(AsciiChars.Dq)\n    buffer.writeString(val)\n    buffer.writeChar(AsciiChars.Dq)\n  }\n\n  private attributes (o: ILooseObject, set: ContainedFieldSet, depth: number, attributePerLine: boolean): void {\n    const newLine = this.eol\n    const indent: string = '\\t'.repeat(depth + 1)\n    const attributes = set.localAttribute\n    const buffer = this.buffer\n    if (attributes.length && attributePerLine) {\n      buffer.writeString(newLine)\n      buffer.writeString(indent)\n    }\n    const populatedAttributes: IPopulatedAttributes = this.getPopulatedAttributes(o, attributes)\n    for (let a = 0; a < populatedAttributes.values.length; ++a) {\n      const last = a === populatedAttributes.values.length - 1\n      const f = populatedAttributes.fields[a]\n      if (a || this.attributePerLine) buffer.writeChar(AsciiChars.Space)\n      this.encodeAttribute(f.name, FixmlEncoder.asString(f, populatedAttributes.values[a]))\n      if (!last && attributePerLine) {\n        buffer.writeString(newLine)\n        buffer.writeString(indent)\n      }\n    }\n  }\n\n  private getPopulatedAttributes (o: ILooseObject, attributes: ContainedSimpleField[]): IPopulatedAttributes {\n    return attributes.reduce((a: IPopulatedAttributes, f: ContainedSimpleField) => {\n      let v: any = o[f.definition.name]\n      if (v == null) {\n        v = o[f.name]\n      }\n      if (v != null) {\n        a.values.push(v)\n        a.fields.push(f)\n      }\n      return a\n    }, {\n      values: [],\n      fields: []\n    } as IPopulatedAttributes)\n  }\n\n  private complexGroup (o: ILooseObject, field: ContainedField, depth: number) {\n    const gf: ContainedGroupField = field as ContainedGroupField\n    const elements: ILooseObject[] = o[gf.definition.name]\n    if (elements) {\n      if (Array.isArray(elements)) {\n        for (const e of elements) {\n          this.buffer.writeString(this.eol)\n          this.toXml(e, gf.name, gf.definition,depth + 1)\n        }\n      } else {\n        throw new Error(`expected array for member ${gf.definition.name}`)\n      }\n    }\n  }\n\n  private complexComponent (o: ILooseObject, field: ContainedField, depth: number) {\n    const cf: ContainedComponentField = field as ContainedComponentField\n    const def = cf.definition\n    const instance: ILooseObject = o[def.name]\n    if (instance) {\n      this.buffer.writeString(this.eol)\n      this.toXml(instance, cf.name, def, depth + 1)\n    }\n  }\n\n  reset (): void {\n    this.buffer.reset()\n  }\n\n  trim (): Buffer {\n    return this.buffer.copy()\n  }\n}\n"]}