{"version":3,"file":"segment-description.js","sourceRoot":"","sources":["../../../src/buffer/segment/segment-description.ts"],"names":[],"mappings":"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","sourcesContent":["import { INumericKeyed } from '../../collections/collection'\nimport { ContainedField, ContainedFieldSet } from '../../dictionary/contained'\nimport { GroupFieldDefinition } from '../../dictionary/definition'\nimport { SegmentType } from './segment-type'\n\nexport class SegmentDescription {\n  public index: number\n  public endTag: number = 0\n  public endPosition: number = 0\n  public delimiterTag: number = 0\n  public delimiterPositions: number[]\n  public currentField: ContainedField\n  public containedDelimiterPositions: INumericKeyed<boolean>\n\n  constructor (\n               public name: string,\n               public startTag: number,\n               public set: ContainedFieldSet,\n               public startPosition: number,\n               public readonly depth: number,\n               public readonly type: SegmentType) {\n  }\n\n  public contains (segment: SegmentDescription): boolean {\n    return segment.startPosition >= this.startPosition && segment.endPosition <= this.endPosition\n  }\n\n  public getInstance (instance: number): SegmentDescription {\n    const delimiters: number[] = this.delimiterPositions\n    if (!delimiters) {\n      return null\n    }\n    if (instance < 0 || instance >= delimiters.length) {\n      return null\n    }\n    const start: number = delimiters[instance]\n    const end: number = instance < delimiters.length - 1 ?\n            delimiters[instance + 1] - 1 :\n            this.endPosition\n    const name = this.type === SegmentType.Batch ? this.set.abbreviation : this.name\n    const d: SegmentDescription = new SegmentDescription(name, this.startTag, this.set, start, this.depth, this.type)\n    d.endPosition = end\n    d.endTag = this.endTag\n    return d\n  }\n\n  public startGroup (tag: number): void {\n    this.delimiterTag = tag\n    this.delimiterPositions = []\n    this.containedDelimiterPositions = {}\n  }\n\n  public addDelimiterPosition (position: number): boolean {\n    if (this.containedDelimiterPositions[position]) {\n      return false\n    }\n    this.delimiterPositions[this.delimiterPositions.length] = position\n    this.containedDelimiterPositions[position] = true\n    return true\n  }\n\n  public setCurrentField (tag: number): void {\n    this.currentField = this.set.localTag[tag] || this.set.tagToField[tag]\n  }\n\n  public groupAddDelimiter (tag: number, position: number): boolean {\n    let delimiter: boolean = false\n    if (this.set instanceof GroupFieldDefinition) {\n      if (this.delimiterTag && tag === this.delimiterTag) {\n        delimiter = this.addDelimiterPosition(position)\n      }\n    }\n    return delimiter\n  }\n\n  public end (i: number, pos: number, endTag: number): void {\n    this.index = i\n    this.currentField = null\n    this.endPosition = pos\n    this.endTag = endTag\n  }\n}\n"]}