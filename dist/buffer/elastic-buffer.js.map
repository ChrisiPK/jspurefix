{"version":3,"file":"elastic-buffer.js","sourceRoot":"","sources":["../../src/buffer/elastic-buffer.ts"],"names":[],"mappings":"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","sourcesContent":["import { AsciiChars } from './ascii/ascii-chars'\nimport { format } from 'mathjs'\nimport { inject, injectable } from 'tsyringe'\nimport { DITokens } from '../runtime/di-tokens'\n\n@injectable()\nexport class ElasticBuffer {\n  private buffer: Buffer\n  private ptr: number = 0\n  private stretched: number\n\n  constructor (@inject(DITokens.elasticBufferSize) public readonly size: number = 6 * 1024,\n               @inject(DITokens.elasticBufferReturnSize) public readonly returnTo: number = 6 * 1024) {\n\n    this.size = Math.max(1, this.size)\n    this.buffer = Buffer.allocUnsafe(this.size)\n    this.returnTo = Math.max(this.size, this.returnTo)\n    this.stretched = this.size\n  }\n\n  private static precisionRound (n: number, precision: number): number {\n    const factor: number = Math.pow(10, precision)\n    return Math.round(n * factor) / factor\n  }\n\n  private static HowManyDigits (v: number): number {\n    v = Math.abs(v)\n    let digits: number = 0\n    let w: number = v\n    while (w > 0) {\n      ++digits\n      w = Math.floor(w / 10)\n    }\n    return Math.max(digits, 1)\n  }\n\n  public currentSize (): number {\n    return this.stretched\n  }\n\n  public getPos (): number {\n    return this.ptr\n  }\n\n  public setPos (ptr: number): number {\n    const r = this.ptr\n    if (ptr >= 0 && ptr <= this.size) {\n      this.ptr = ptr\n    }\n    return r\n  }\n\n  public get (pos: number): number {\n    return this.buffer[pos]\n  }\n\n  public writeBoolean (v: boolean): number {\n    this.writeChar(v ? AsciiChars.Y : AsciiChars.N)\n    return this.ptr\n  }\n\n  public switchChar (c: number): number {\n    this.buffer[this.ptr - 1] = c\n    return this.ptr\n  }\n\n  public saveChar (c: number): number {\n    this.buffer[this.ptr++] = c\n    return this.ptr\n  }\n\n  public writeChar (c: number): number {\n    if (c > 255) throw new Error(`can't write ${c} to a byte`)\n    this.checkGrowBuffer(1)\n    this.buffer[this.ptr++] = c\n    return this.ptr\n  }\n\n  public writeString (s: string): number {\n    const begin = this.ptr\n    this.checkGrowBuffer(s.length)\n    const buffer = this.buffer\n    this.ptr += buffer.write(s, begin, s.length, 'ascii')\n    return this.ptr\n  }\n\n  public writeBuffer (v: Buffer): number {\n    const begin = this.ptr\n    this.checkGrowBuffer(v.length)\n    const buffer = this.buffer\n    const srcLen: number = v.length\n    this.ptr += v.copy(buffer, begin, 0, srcLen)\n    return this.ptr\n  }\n\n  public writeWholeNumber (n: number): number {\n    const digits: number = ElasticBuffer.HowManyDigits(n)\n    let reserve = digits\n    const sign: number = Math.sign(n)\n    let p: number = Math.pow(10, digits - 1)\n    let v: number = Math.abs(n)\n    if (sign < 0) {\n      reserve++\n    }\n    this.checkGrowBuffer(reserve)\n    const buffer = this.buffer\n    if (sign < 0) {\n      buffer[this.ptr++] = AsciiChars.Minus\n    }\n    while (p >= 1) {\n      const d: number = Math.floor(v / p)\n      v -= d * p\n      p /= 10\n      buffer[this.ptr++] = AsciiChars.Zero + d\n    }\n\n    return this.ptr\n  }\n\n  public writeNumber (v: number, places: number = 13) {\n    const rounded: number = Math.floor(v)\n    const fraction: number = ElasticBuffer.precisionRound(v - rounded, places)\n    if (fraction === 0) {\n      // integer\n      return this.writeWholeNumber(v)\n    } else {\n      // decimal with fraction turn to string\n      const s: string = format(v, { notation: 'fixed' })\n      return this.writeString(s)\n    }\n  }\n\n  public reset (): boolean {\n    this.ptr = 0\n    const shrink = this.stretched > this.returnTo\n    if (shrink) {\n      this.buffer = Buffer.allocUnsafe(this.returnTo)\n      this.stretched = this.size\n    }\n    return shrink\n  }\n\n  public slice (): Buffer {\n    return this.buffer.slice(0, this.ptr)\n  }\n\n  public copy (): Buffer {\n    const m = Buffer.alloc(this.ptr)\n    this.buffer.copy(m, 0, 0, this.ptr)\n    return m\n  }\n\n  public clone (): ElasticBuffer {\n    const cloned = new ElasticBuffer(this.ptr)\n    this.buffer.copy(cloned.buffer, 0, 0, this.ptr)\n    cloned.setPos(this.ptr)\n    return cloned\n  }\n\n  public writePaddedHundreds (v: number): number {\n    if (v > 999) throw new Error(`can't write ${v} as hundreds padding`)\n    this.checkGrowBuffer(3)\n    const buffer = this.buffer\n    const zero: number = AsciiChars.Zero\n    const units: number = v % 10 + zero\n    v = v / 10\n    const tens: number = v % 10 + zero\n    v = v / 10\n    buffer[this.ptr++] = v % 10 + zero\n    buffer[this.ptr++] = tens\n    buffer[this.ptr++] = units\n    return this.ptr\n  }\n\n  public writePaddedTensUnits (v: number): number {\n    if (v > 99) throw new Error(`can't write ${v} as hundreds padding`)\n    this.checkGrowBuffer(2)\n    const buffer = this.buffer\n    const zero: number = AsciiChars.Zero\n    const units: number = v % 10 + zero\n    v = v / 10\n    buffer[this.ptr++] = v % 10 + zero\n    buffer[this.ptr++] = units\n    return this.ptr\n  }\n\n  public patchPaddedNumberAtPos (ptr: number, numToWrite: number, padding: number): void {\n    let digits: number = ElasticBuffer.HowManyDigits(numToWrite)\n    const saved: number = this.ptr\n    this.ptr = ptr\n    const buffer = this.buffer\n    while (digits++ < padding) {\n      buffer[this.ptr++] = AsciiChars.Zero\n    }\n    this.writeWholeNumber(numToWrite)\n    this.ptr = saved\n  }\n\n  public toString (ptr: number = this.ptr): string {\n    return this.buffer.toString('ascii', 0, ptr)\n  }\n\n  public checksum (ptr: number = this.ptr): number {\n    const cks: number = this.sum(ptr)\n    return cks % 256\n  }\n\n  public sum (ptr: number = this.ptr): number {\n    let total: number = 0\n    ptr = Math.min(ptr, this.ptr)\n    const buffer = this.buffer\n    for (let idx: number = 0; idx < ptr; idx++) {\n      total += buffer[idx]\n    }\n    return total\n  }\n\n  public getWholeNumber (start: number, vend: number): number {\n    const buffer = this.buffer\n    let sign = 1\n    let raised = vend - start\n    switch (buffer[start]) {\n      case AsciiChars.Minus: {\n        --raised\n        sign = -1\n        ++start\n        break\n      }\n      case AsciiChars.Plus: {\n        --raised\n        ++start\n        break\n      }\n    }\n    let i: number = Math.pow(10, raised)\n    let num: number = 0\n    let scan: number = start\n\n    while (scan <= vend) {\n      const p: number = buffer[scan++]\n      const d: number = p - AsciiChars.Zero\n      num += d * i\n      i /= 10\n    }\n\n    return num * sign\n  }\n\n  public getString (start: number, end: number): string {\n    return this.buffer.toString('ascii', start, end)\n  }\n\n  public getBuffer (start: number, end: number): Buffer {\n    return this.buffer.slice(start, end)\n  }\n\n  public getBoolean (start: number): boolean {\n    const b: number = this.buffer[start]\n    return b === AsciiChars.Y\n  }\n\n  public getFloat (start: number, vend: number): number {\n    let n: number = 0\n    let digits: number = 0\n    let dotPosition: number = 0\n    const buffer = this.buffer\n    let sign = 1\n    switch (buffer[start]) {\n      case AsciiChars.Minus: {\n        sign = -1\n        start++\n        break\n      }\n      case AsciiChars.Plus: {\n        start++\n        break\n      }\n    }\n    const len = vend - start\n    let i: number = Math.pow(10, len - 1)\n    for (let j: number = start; j <= vend; ++j) {\n      const p: number = buffer[j]\n      if (p >= AsciiChars.Zero && p <= AsciiChars.Nine) {\n        const d: number = p - AsciiChars.Zero\n        ++digits\n        n += d * i\n        i /= 10\n      } else if (p === AsciiChars.Dot) {\n        if (dotPosition > 0) {\n          return null\n        }\n        dotPosition = j - start\n      } else if (digits > 0) {\n        return null\n      }\n    }\n    const power: number = dotPosition === 0 ? 0 : len - dotPosition\n    const raised = dotPosition === 0 ? 10 : Math.pow(10, -1 * power)\n    const round = dotPosition === 0 ? 1 : Math.pow(10, power)\n    const val = n * raised * sign\n    return Math.round(val * round) / round\n  }\n\n  public checkGrowBuffer (required: number): void {\n    let buffer = this.buffer\n    let size = buffer.length\n    const ptr = this.ptr\n    if (size - ptr >= required) {\n      return\n    }\n    while (size - ptr < required) {\n      size *= 2\n    }\n    const old = buffer\n    buffer = Buffer.allocUnsafe(size)\n    old.copy(buffer, 0, 0, this.ptr)\n    this.buffer = buffer\n    this.stretched = size\n  }\n}\n"]}