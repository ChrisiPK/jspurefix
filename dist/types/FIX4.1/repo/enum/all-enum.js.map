{"version":3,"file":"all-enum.js","sourceRoot":"","sources":["../../../../../src/types/FIX4.1/repo/enum/all-enum.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n*************************************\n* Broker's side of advertised trade *\n*************************************\n*/\nexport enum AdvSide {\n  Buy = 'B',\n  Sell = 'S',\n  Trade = 'T',\n  Cross = 'X'\n}\n\n/*\n*****************************************************\n* Identifies advertisement message transaction type *\n*****************************************************\n*/\nexport enum AdvTransType {\n  Cancel = 'C',\n  New = 'N',\n  Replace = 'R'\n}\n\n/*\n*******************\n* Commission type *\n*******************\n*/\nexport enum CommType {\n  PerUnit = '1',\n  Percent = '2',\n  Absolute = '3'\n}\n\n/*\n****************************************************************\n* Instructions for order handling on exchange trading floor.   *\n* If more than one instruction is applicable to an order, this *\n* field can contain multiple instructions separated by space.  *\n****************************************************************\n*/\nexport enum ExecInst {\n  StayOnOfferSide = '0',\n  NotHeld = '1',\n  Work = '2',\n  GoAlong = '3',\n  OverTheDay = '4',\n  Held = '5',\n  ParticipateDoNotInitiate = '6',\n  StrictScale = '7',\n  TryToScale = '8',\n  StayOnBidSide = '9',\n  NoCross = 'A',\n  OkToCross = 'B',\n  CallFirst = 'C',\n  PercentOfVolume = 'D',\n  DoNotIncrease = 'E',\n  DoNotReduce = 'F',\n  AllOrNone = 'G',\n  InstitutionsOnly = 'I',\n  LastPeg = 'L',\n  MidPricePeg = 'M',\n  NonNegotiable = 'N',\n  OpeningPeg = 'O',\n  MarketPeg = 'P',\n  PrimaryPeg = 'R',\n  Suspend = 'S',\n  CustomerDisplayInstruction = 'U',\n  Netting = 'V'\n}\n\n/*\n*******************************\n* Identifies transaction type *\n*******************************\n*/\nexport enum ExecTransType {\n  New = '0',\n  Cancel = '1',\n  Correct = '2',\n  Status = '3'\n}\n\n/*\n***********************************************************\n* Instructions for order handling on Broker trading floor *\n***********************************************************\n*/\nexport enum HandlInst {\n  AutomatedExecutionNoIntervention = '1',\n  AutomatedExecutionInterventionOk = '2',\n  ManualOrder = '3'\n}\n\n/*\n**********************************************\n* Identifies class of alternative SecurityID *\n**********************************************\n*/\nexport enum IDSource {\n  Cusip = '1',\n  Sedol = '2',\n  Quik = '3',\n  IsinNumber = '4',\n  RicCode = '5',\n  IsoCurrencyCode = '6',\n  IsoCountryCode = '7'\n}\n\n/*\n****************************************************************\n* Indicates if, and on which other services, the indication    *\n* has been advertised. Each character represents an additional *\n* service (e.g. if on Bridge and Autex, field = BA, if only on *\n* Autex, field = A)                                            *\n****************************************************************\n*/\nexport enum IOIOthSvc {\n  Autex = 'A',\n  Bridge = 'B'\n}\n\n/*\n**********************************\n* Relative quality of indication *\n**********************************\n*/\nexport enum IOIQltyInd {\n  High = 'H',\n  Low = 'L',\n  Medium = 'M'\n}\n\n/*\n*************************************************\n* Number of shares in numeric or relative size. *\n*************************************************\n*/\nexport enum IOIShares {\n  Large = 'L',\n  Medium = 'M',\n  Small = 'S'\n}\n\n/*\n*******************************************\n* Identifies IOI message transaction type *\n*******************************************\n*/\nexport enum IOITransType {\n  Cancel = 'C',\n  New = 'N',\n  Replace = 'R'\n}\n\n/*\n**************************************\n* Broker capacity in order execution *\n**************************************\n*/\nexport enum LastCapacity {\n  Agent = '1',\n  CrossAsAgent = '2',\n  CrossAsPrincipal = '3',\n  Principal = '4'\n}\n\n/*\n****************************************************************\n* Defines message type. ALWAYS THIRD FIELD IN MESSAGE. (Always *\n* unencrypted)                                                 *\n* Note: A \"U\" as the first character in the MsgType field      *\n* (i.e. U1, U2, etc) indicates that the message format is      *\n* privately defined between the sender and receiver.           *\n****************************************************************\n*/\nexport enum MsgType {\n  Heartbeat = '0',\n  TestRequest = '1',\n  ResendRequest = '2',\n  Reject = '3',\n  SequenceReset = '4',\n  Logout = '5',\n  Ioi = '6',\n  Advertisement = '7',\n  ExecutionReport = '8',\n  OrderCancelReject = '9',\n  Logon = 'A',\n  News = 'B',\n  Email = 'C',\n  NewOrderSingle = 'D',\n  NewOrderList = 'E',\n  OrderCancelRequest = 'F',\n  OrderCancelReplaceRequest = 'G',\n  OrderStatusRequest = 'H',\n  AllocationInstruction = 'J',\n  ListCancelRequest = 'K',\n  ListExecute = 'L',\n  ListStatusRequest = 'M',\n  ListStatus = 'N',\n  AllocationInstructionAck = 'P',\n  DontKnowTrade = 'Q',\n  QuoteRequest = 'R',\n  Quote = 'S',\n  SettlementInstructions = 'T'\n}\n\n/*\n***************************************\n* Identifies current status of order. *\n***************************************\n*/\nexport enum OrdStatus {\n  New = '0',\n  PartiallyFilled = '1',\n  Filled = '2',\n  DoneForDay = '3',\n  Canceled = '4',\n  Replaced = '5',\n  PendingCancel = '6',\n  Stopped = '7',\n  Rejected = '8',\n  Suspended = '9',\n  PendingNew = 'A',\n  Calculated = 'B',\n  Expired = 'C'\n}\n\n/*\n***************\n* Order type. *\n***************\n*/\nexport enum OrdType {\n  Market = '1',\n  Limit = '2',\n  Stop = '3',\n  StopLimit = '4',\n  MarketOnClose = '5',\n  WithOrWithout = '6',\n  LimitOrBetter = '7',\n  LimitWithOrWithout = '8',\n  OnBasis = '9',\n  OnClose = 'A',\n  LimitOnClose = 'B',\n  ForexMarket = 'C',\n  PreviouslyQuoted = 'D',\n  PreviouslyIndicated = 'E',\n  ForexLimit = 'F',\n  ForexSwap = 'G',\n  ForexPreviouslyQuoted = 'H',\n  Pegged = 'P'\n}\n\n/*\n**********************************************************\n* Indicates possible retransmission of message with this *\n* sequence number                                        *\n**********************************************************\n*/\nexport enum PossDupFlag {\n  OriginalTransmission = 'N',\n  PossibleDuplicate = 'Y'\n}\n\n/*\n****************************************************************\n* Note that the name of this field is changing to              *\n* \"OrderCapacity\" as Rule80A is a very US market-specific      *\n* term. Other world markets need to convey similar             *\n* information, however, often a subset of the US values. . See *\n* the \"Rule80A (aka OrderCapacity) Usage by Market\" appendix   *\n* for market-specific usage of this field.                     *\n****************************************************************\n*/\nexport enum Rule80A {\n  AgencySingleOrder = 'A',\n  ShortExemptTransactionAType = 'B',\n  ProprietaryNonAlgo = 'C',\n  ProgramOrderMember = 'D',\n  ShortExemptTransactionForPrincipal = 'E',\n  ShortExemptTransactionWType = 'F',\n  ShortExemptTransactionIType = 'H',\n  IndividualInvestor = 'I',\n  ProprietaryAlgo = 'J',\n  AgencyAlgo = 'K',\n  ShortExemptTransactionMemberAffliated = 'L',\n  ProgramOrderOtherMember = 'M',\n  AgentForOtherMember = 'N',\n  ProprietaryTransactionAffiliated = 'O',\n  Principal = 'P',\n  TransactionNonMember = 'R',\n  SpecialistTrades = 'S',\n  TransactionUnaffiliatedMember = 'T',\n  AgencyIndexArb = 'U',\n  AllOtherOrdersAsAgentForOtherMember = 'W',\n  ShortExemptTransactionMemberNotAffliated = 'X',\n  AgencyNonAlgo = 'Y',\n  ShortExemptTransactionNonMember = 'Z'\n}\n\n/*\n*****************\n* Side of order *\n*****************\n*/\nexport enum Side {\n  Buy = '1',\n  Sell = '2',\n  BuyMinus = '3',\n  SellPlus = '4',\n  SellShort = '5',\n  SellShortExempt = '6',\n  Undisclosed = '7',\n  Cross = '8'\n}\n\n/*\n**************************************************************\n* Specifies how long the order remains in effect. Absence of *\n* this field is interpreted as DAY.                          *\n**************************************************************\n*/\nexport enum TimeInForce {\n  Day = '0',\n  GoodTillCancel = '1',\n  AtTheOpening = '2',\n  ImmediateOrCancel = '3',\n  FillOrKill = '4',\n  GoodTillCrossing = '5',\n  GoodTillDate = '6'\n}\n\n/*\n****************\n* Urgency flag *\n****************\n*/\nexport enum Urgency {\n  Normal = '0',\n  Flash = '1',\n  Background = '2'\n}\n\n/*\n***************************************************************\n* Indicates order settlement period. Absence of this field is *\n* interpreted as Regular. Regular is defined as the default   *\n* settlement period for the particular security on the        *\n* exchange of execution.                                      *\n***************************************************************\n*/\nexport enum SettlmntTyp {\n  Regular = '0',\n  Cash = '1',\n  NextDay = '2',\n  TPlus2 = '3',\n  TPlus3 = '4',\n  TPlus4 = '5',\n  Future = '6',\n  WhenAndIfIssued = '7',\n  SellersOption = '8',\n  TPlus5 = '9'\n}\n\n/*\n******************************************\n* Identifies allocation transaction type *\n******************************************\n*/\nexport enum AllocTransType {\n  New = '0',\n  Replace = '1',\n  Cancel = '2',\n  Preliminary = '3',\n  Calculated = '4'\n}\n\n/*\n*********************\n* For options only. *\n*********************\n*/\nexport enum OpenClose {\n  Close = 'C',\n  Open = 'O'\n}\n\n/*\n***************************************************************\n* Processing code for sub-account. Absence of this field in   *\n* AllocAccount / AllocShares / ProcessCode instance indicates *\n* regular trade.                                              *\n***************************************************************\n*/\nexport enum ProcessCode {\n  Regular = '0',\n  SoftDollar = '1',\n  StepIn = '2',\n  StepOut = '3',\n  SoftDollarStepIn = '4',\n  SoftDollarStepOut = '5',\n  PlanSponsor = '6'\n}\n\n/*\n************************************\n* Identifies status of allocation. *\n************************************\n*/\nexport enum AllocStatus {\n  Accepted = 0,\n  BlockLevelReject = 1,\n  AccountLevelReject = 2,\n  Received = 3\n}\n\n/*\n************************************\n* Identifies reason for rejection. *\n************************************\n*/\nexport enum AllocRejCode {\n  UnknownAccount = 0,\n  IncorrectQuantity = 1,\n  IncorrectAveragegPrice = 2,\n  UnknownExecutingBrokerMnemonic = 3,\n  CommissionDifference = 4,\n  UnknownOrderId = 5,\n  UnknownListId = 6,\n  OtherSeeText = 7\n}\n\n/*\n***********************\n* Email message type. *\n***********************\n*/\nexport enum EmailType {\n  New = '0',\n  Reply = '1',\n  AdminReply = '2'\n}\n\n/*\n****************************************************************\n* Indicates that message may contain information that has been *\n* sent under another sequence number.                          *\n****************************************************************\n*/\nexport enum PossResend {\n  OriginalTransmission = 'N',\n  PossibleResend = 'Y'\n}\n\n/*\n*************************\n* Method of encryption. *\n*************************\n*/\nexport enum EncryptMethod {\n  None = 0,\n  Pkcs = 1,\n  Des = 2,\n  Pkcsdes = 3,\n  Pgpdes = 4,\n  Pgpdesmd5 = 5,\n  Pem = 6\n}\n\n/*\n*************************************************\n* Code to identify reason for cancel rejection. *\n*************************************************\n*/\nexport enum CxlRejReason {\n  TooLateToCancel = 0,\n  UnknownOrder = 1\n}\n\n/*\n************************************************\n* Code to identify reason for order rejection. *\n************************************************\n*/\nexport enum OrdRejReason {\n  BrokerCredit = 0,\n  UnknownSymbol = 1,\n  ExchangeClosed = 2,\n  OrderExceedsLimit = 3,\n  TooLateToEnter = 4,\n  UnknownOrder = 5,\n  DuplicateOrder = 6\n}\n\n/*\n****************************\n* Code to qualify IOI use. *\n****************************\n*/\nexport enum IOIQualifier {\n  AllOrNone = 'A',\n  AtTheClose = 'C',\n  InTouchWith = 'I',\n  Limit = 'L',\n  MoreBehind = 'M',\n  AtTheOpen = 'O',\n  TakingAPosition = 'P',\n  AtTheMarket = 'Q',\n  PortfolioShown = 'S',\n  ThroughTheDay = 'T',\n  Versus = 'V',\n  Indication = 'W',\n  CrossingOpportunity = 'X',\n  AtTheMidpoint = 'Y',\n  PreOpen = 'Z'\n}\n\n/*\n******************************************************\n* Identifies party of trade responsible for exchange *\n* reporting.                                         *\n******************************************************\n*/\nexport enum ReportToExch {\n  SenderReports = 'N',\n  ReceiverReports = 'Y'\n}\n\n/*\n**********************************************************\n* Indicates whether the broker is to locate the stock in *\n* conjunction with a short sell order.                   *\n**********************************************************\n*/\nexport enum LocateReqd {\n  No = 'N',\n  Yes = 'Y'\n}\n\n/*\n*********************************************************\n* Indicates request for forex accommodation trade to be *\n* executed along with security transaction.             *\n*********************************************************\n*/\nexport enum ForexReq {\n  DoNotExecuteForexAfterSecurityTrade = 'N',\n  ExecuteForexAfterSecurityTrade = 'Y'\n}\n\n/*\n************************************************************\n* Indicates that the Sequence Reset message is replacing   *\n* administrative or application messages which will not be *\n* resent.                                                  *\n************************************************************\n*/\nexport enum GapFillFlag {\n  SequenceReset = 'N',\n  GapFillMessage = 'Y'\n}\n\n/*\n***********************************\n* Reason for execution rejection. *\n***********************************\n*/\nexport enum DKReason {\n  UnknownSymbol = 'A',\n  WrongSide = 'B',\n  QuantityExceedsOrder = 'C',\n  NoMatchingOrder = 'D',\n  PriceExceedsLimit = 'E',\n  Other = 'Z'\n}\n\n/*\n****************************************************************\n* Indicates that IOI is the result of an existing agency order *\n* or a facilitation position resulting from an agency order,   *\n* not from principal trading or order solicitation activity.   *\n****************************************************************\n*/\nexport enum IOINaturalFlag {\n  NotNatural = 'N',\n  Natural = 'Y'\n}\n\n/*\n****************************************\n* Indicates type of miscellaneous fee. *\n****************************************\n*/\nexport enum MiscFeeType {\n  Regulatory = '1',\n  Tax = '2',\n  LocalCommission = '3',\n  ExchangeFees = '4',\n  Stamp = '5',\n  Levy = '6',\n  Other = '7',\n  Markup = '8'\n}\n\n/*\n***********************************************************\n* Indicates that the both sides of the FIX session should *\n* reset sequence numbers.                                 *\n***********************************************************\n*/\nexport enum ResetSeqNumFlag {\n  No = 'N',\n  Yes = 'Y'\n}\n\n/*\n*************************************************************\n* Describes the specific ExecutionRpt (i.e. Pending Cancel) *\n* while OrdStatus will always identify the current order    *\n* status (i.e. Partially Filled)                            *\n*************************************************************\n*/\nexport enum ExecType {\n  New = '0',\n  PartialFill = '1',\n  Fill = '2',\n  DoneForDay = '3',\n  Canceled = '4',\n  Replaced = '5',\n  PendingCancel = '6',\n  Stopped = '7',\n  Rejected = '8',\n  Suspended = '9',\n  PendingNew = 'A',\n  Calculated = 'B',\n  Expired = 'C'\n}\n\n/*\n***************************************************\n* Indicates mode used for Settlement Instructions *\n***************************************************\n*/\nexport enum SettlInstMode {\n  Default = '0',\n  StandingInstructionsProvided = '1',\n  SpecificAllocationAccountOverriding = '2',\n  SpecificAllocationAccountStanding = '3'\n}\n\n/*\n****************************************************\n* Settlement Instructions message transaction type *\n****************************************************\n*/\nexport enum SettlInstTransType {\n  Cancel = 'C',\n  New = 'N',\n  Replace = 'R'\n}\n\n/*\n***********************************************\n* Indicates source of Settlement Instructions *\n***********************************************\n*/\nexport enum SettlInstSource {\n  BrokerCredit = '1',\n  Institution = '2'\n}\n\n/*\n***********************************************************\n* Identifies Settlement Depository or Country Code (ISITC *\n* spec)                                                   *\n***********************************************************\n*/\nexport enum SettlLocation {\n  Cedel = 'CED',\n  DepositoryTrustCompany = 'DTC',\n  EuroClear = 'EUR',\n  FederalBookEntry = 'FED',\n  LocalMarketSettleLocation = 'ISO Country Code',\n  Physical = 'PNY',\n  ParticipantTrustCompany = 'PTC'\n}\n\n/*\n*******************************************\n* Indicates type of security (ISITC spec) *\n*******************************************\n*/\nexport enum SecurityType {\n  BankersAcceptance = 'BA',\n  CertificateOfDeposit = 'CD',\n  CollateralizedMortgageObligation = 'CMO',\n  CorporateBond = 'CORP',\n  CommercialPaper = 'CP',\n  CorporatePrivatePlacement = 'CPP',\n  CommonStock = 'CS',\n  FederalHousingAuthority = 'FHA',\n  FederalHomeLoan = 'FHL',\n  FederalNationalMortgageAssociation = 'FN',\n  ForeignExchangeContract = 'FOR',\n  Future = 'FUT',\n  GovernmentNationalMortgageAssociation = 'GN',\n  TreasuriesAgencyDebenture = 'GOVT',\n  MutualFund = 'MF',\n  MortgageInterestOnly = 'MIO',\n  MortgagePrincipalOnly = 'MPO',\n  MortgagePrivatePlacement = 'MPP',\n  MiscellaneousPassThrough = 'MPT',\n  MunicipalBond = 'MUNI',\n  NoSecurityType = 'NONE',\n  Option = 'OPT',\n  PreferredStock = 'PS',\n  RepurchaseAgreement = 'RP',\n  ReverseRepurchaseAgreement = 'RVRP',\n  StudentLoanMarketingAssociation = 'SL',\n  TimeDeposit = 'TD',\n  UsTreasuryBillOld = 'USTB',\n  Warrant = 'WAR',\n  CatsTigersAndLions = 'ZOO'\n}\n\n/*\n*****************************************************\n* Identifies the Standing Instruction database used *\n*****************************************************\n*/\nexport enum StandInstDbType {\n  Other = 0,\n  Dtcsid = 1,\n  ThomsonAlert = 2,\n  AGlobalCustodian = 3\n}\n\n/*\n**************************************************************\n* Identifies the type of Allocation linkage when AllocLinkID *\n* is used.                                                   *\n**************************************************************\n*/\nexport enum AllocLinkType {\n  FxNetting = 0,\n  FxSwap = 1\n}\n\n/*\n*****************************************************\n* Indicates whether an Option is for a put or call. *\n*****************************************************\n*/\nexport enum PutOrCall {\n  Put = 0,\n  Call = 1\n}\n\n/*\n********************\n* Used for options *\n********************\n*/\nexport enum CoveredOrUncovered {\n  Covered = 0,\n  Uncovered = 1\n}\n\n/*\n****************************************************************\n* Used for options when delivering the order to an execution   *\n* system/exchange to specify if the order is for a customer or *\n* the firm placing the order itself.                           *\n****************************************************************\n*/\nexport enum CustomerOrFirm {\n  Customer = 0,\n  Firm = 1\n}\n\n/*\n**************************************************************\n* Indicates whether or not details should be communicated to *\n* BrokerOfCredit (i.e. step-in broker).                      *\n**************************************************************\n*/\nexport enum NotifyBrokerOfCredit {\n  DetailsShouldNotBeCommunicated = 'N',\n  DetailsShouldBeCommunicated = 'Y'\n}\n\n/*\n***************************************************************\n* Indicates how the receiver (i.e. third party) of Allocation *\n* message should handle/process the account details.          *\n***************************************************************\n*/\nexport enum AllocHandlInst {\n  Match = 1,\n  Forward = 2,\n  ForwardAndMatch = 3\n}\n\n"]}