{"version":3,"file":"msg_tag.js","sourceRoot":"","sources":["../../../../../src/types/FIX.5.0SP2/repo/enum/msg_tag.ts"],"names":[],"mappings":"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","sourcesContent":["export enum MsgTag {\n/*\n***************************************************************\n* Account mnemonic as agreed between buy and sell sides, e.g. *\n* broker and institution or investor/intermediary and fund    *\n* manager.                                                    *\n***************************************************************\n*/\n  Account = 1,\n/*\n*************************************************\n* Unique identifier of advertisement message.   *\n* (Prior to FIX 4.1 this field was of type int) *\n*************************************************\n*/\n  AdvId = 2,\n/*\n*****************************************************\n* Reference identifier used with CANCEL and REPLACE *\n* transaction types.                                *\n* (Prior to FIX 4.1 this field was of type int)     *\n*****************************************************\n*/\n  AdvRefID = 3,\n/*\n*************************************\n* Broker's side of advertised trade *\n*************************************\n*/\n  AdvSide = 4,\n/*\n*****************************************************\n* Identifies advertisement message transaction type *\n*****************************************************\n*/\n  AdvTransType = 5,\n/*\n***************************************************************\n* Calculated average price of all fills on this order.        *\n* For Fixed Income trades AvgPx is always expressed as        *\n* percent-of-par, regardless of the PriceType (423) of LastPx *\n* (31). I.e., AvgPx will contain an average of percent-of-par *\n* values (see LastParPx (669)) for issues traded in Yield,    *\n* Spread or Discount.                                         *\n***************************************************************\n*/\n  AvgPx = 6,\n/*\n***********************************************************\n* Message sequence number of first message in range to be *\n* resent                                                  *\n***********************************************************\n*/\n  BeginSeqNo = 7,\n/*\n*************************************************************\n* Identifies beginning of new message and protocol version. *\n* ALWAYS FIRST FIELD IN MESSAGE. (Always unencrypted)       *\n* Valid values:                                             *\n* FIXT.1.1                                                  *\n*************************************************************\n*/\n  BeginString = 8,\n/*\n************************************************************\n* Message length, in bytes, forward to the CheckSum field. *\n* ALWAYS SECOND FIELD IN MESSAGE. (Always unencrypted)     *\n************************************************************\n*/\n  BodyLength = 9,\n/*\n****************************************************************\n* Three byte, simple checksum (see Volume 2: \"Checksum         *\n* Calculation\" for description). ALWAYS LAST FIELD IN MESSAGE; *\n* i.e. serves, with the trailing <SOH>, as the end-of-message  *\n* delimiter. Always defined as three characters. (Always       *\n* unencrypted)                                                 *\n****************************************************************\n*/\n  CheckSum = 10,\n/*\n***************************************************************\n* Unique identifier for Order as assigned by the buy-side     *\n* (institution, broker, intermediary etc.) (identified by     *\n* SenderCompID (49) or OnBehalfOfCompID (5) as appropriate).  *\n* Uniqueness must be guaranteed within a single trading day.  *\n* Firms, particularly those which electronically submit       *\n* multi-day orders, trade globally or throughout market close *\n* periods, should ensure uniqueness across days, for example  *\n* by embedding a date within the ClOrdID field.               *\n***************************************************************\n*/\n  ClOrdID = 11,\n/*\n***************************************************************\n* Commission. Note if CommType (13) is percentage, Commission *\n* of 5% should be represented as .05.                         *\n***************************************************************\n*/\n  Commission = 12,\n/*\n*******************\n* Commission type *\n*******************\n*/\n  CommType = 13,\n/*\n**************************************************\n* Total quantity (e.g. number of shares) filled. *\n* (Prior to FIX 4.2 this field was of type int)  *\n**************************************************\n*/\n  CumQty = 14,\n/*\n****************************************************************\n* Identifies currency used for price. Absence of this field is *\n* interpreted as the default for the security. It is           *\n* recommended that systems provide the currency value whenever *\n* possible. See \"Appendix 6-A: Valid Currency Codes\" for       *\n* information on obtaining valid values.                       *\n****************************************************************\n*/\n  Currency = 15,\n/*\n***************************************************************\n* Message sequence number of last message in range to be      *\n* resent. If request is for a single message BeginSeqNo (7) = *\n* EndSeqNo. If request is for all messages subsequent to a    *\n* particular message, EndSeqNo = \"0\" (representing infinity). *\n***************************************************************\n*/\n  EndSeqNo = 16,\n/*\n****************************************************************\n* Unique identifier of execution message as assigned by        *\n* sell-side (broker, exchange, ECN) (will be 0 (zero) for      *\n* ExecType (150)=I (Order Status)).                            *\n* Uniqueness must be guaranteed within a single trading day or *\n* the life of a multi-day order. Firms which accept multi-day  *\n* orders should consider embedding a date within the ExecID    *\n* field to assure uniqueness across days.                      *\n* (Prior to FIX 4.1 this field was of type int).               *\n****************************************************************\n*/\n  ExecID = 17,\n/*\n****************************************************************\n* Instructions for order handling on exchange trading floor.   *\n* If more than one instruction is applicable to an order, this *\n* field can contain multiple instructions separated by space.  *\n* *** SOME VALUES HAVE BEEN REPLACED - See \"Replaced Features  *\n* and Supported Approach\" *** (see Volume : \"Glossary\" for     *\n* value definitions)                                           *\n****************************************************************\n*/\n  ExecInst = 18,\n/*\n****************************************************************\n* Reference identifier used with Trade, Trade Cancel and Trade *\n* Correct execution types.                                     *\n* (Prior to FIX 4.1 this field was of type int)                *\n****************************************************************\n*/\n  ExecRefID = 19,\n/*\n***********************************************************\n* Instructions for order handling on Broker trading floor *\n***********************************************************\n*/\n  HandlInst = 21,\n/*\n************************************************************\n* Identifies class or source of the SecurityID (48) value. *\n* Required if SecurityID is specified.                     *\n* 100+ are reserved for private security identifications   *\n************************************************************\n*/\n  SecurityIDSource = 22,\n/*\n*************************************************\n* Unique identifier of IOI message.             *\n* (Prior to FIX 4.1 this field was of type int) *\n*************************************************\n*/\n  IOIID = 23,\n/*\n**********************************\n* Relative quality of indication *\n**********************************\n*/\n  IOIQltyInd = 25,\n/*\n******************************************************\n* Reference identifier used with CANCEL and REPLACE, *\n* transaction types.                                 *\n* (Prior to FIX 4.1 this field was of type int)      *\n******************************************************\n*/\n  IOIRefID = 26,\n/*\n****************************************************************\n* Quantity (e.g. number of shares) in numeric form or relative *\n* size.                                                        *\n****************************************************************\n*/\n  IOIQty = 27,\n/*\n*******************************************\n* Identifies IOI message transaction type *\n*******************************************\n*/\n  IOITransType = 28,\n/*\n**************************************\n* Broker capacity in order execution *\n**************************************\n*/\n  LastCapacity = 29,\n/*\n**************************************************************\n* Market of execution for last fill, or an indication of the *\n* market where an order was routed                           *\n* Valid values:                                              *\n* See \"Appendix 6-C\"                                         *\n**************************************************************\n*/\n  LastMkt = 30,\n/*\n******************************\n* Price of this (last) fill. *\n******************************\n*/\n  LastPx = 31,\n/*\n***********************************************************\n* Quantity (e.g. shares) bought/sold on this (last) fill. *\n* (Prior to FIX 4.2 this field was of type int)           *\n***********************************************************\n*/\n  LastQty = 32,\n/*\n*******************************************\n* Identifies number of lines of text body *\n*******************************************\n*/\n  NoLinesOfText = 33,\n/*\n************************************\n* Integer message sequence number. *\n************************************\n*/\n  MsgSeqNum = 34,\n/*\n***************************************************************\n* Defines message type ALWAYS THIRD FIELD IN MESSAGE. (Always *\n* unencrypted)                                                *\n* Note: A \"U\" as the first character in the MsgType field     *\n* (i.e. U, U2, etc) indicates that the message format is      *\n* privately defined between the sender and receiver.          *\n* *** Note the use of lower case letters ***                  *\n***************************************************************\n*/\n  MsgType = 35,\n/*\n***********************\n* New sequence number *\n***********************\n*/\n  NewSeqNo = 36,\n/*\n**************************************************************\n* Unique identifier for Order as assigned by sell-side       *\n* (broker, exchange, ECN). Uniqueness must be guaranteed     *\n* within a single trading day. Firms which accept multi-day  *\n* orders should consider embedding a date within the OrderID *\n* field to assure uniqueness across days.                    *\n**************************************************************\n*/\n  OrderID = 37,\n/*\n**************************************************************\n* Quantity ordered. This represents the number of shares for *\n* equities or par, face or nominal value for FI instruments. *\n* (Prior to FIX 4.2 this field was of type int)              *\n**************************************************************\n*/\n  OrderQty = 38,\n/*\n************************************************************\n* Identifies current status of order. *** SOME VALUES HAVE *\n* BEEN REPLACED - See \"Replaced Features and Supported     *\n* Approach\" *** (see Volume : \"Glossary\" for value         *\n* definitions)                                             *\n************************************************************\n*/\n  OrdStatus = 39,\n/*\n*************************************************************\n* Order type. *** SOME VALUES ARE NO LONGER USED - See      *\n* \"Deprecated (Phased-out) Features and Supported Approach\" *\n* *** (see Volume : \"Glossary\" for value definitions)       *\n*************************************************************\n*/\n  OrdType = 40,\n/*\n****************************************************************\n* ClOrdID (11) of the previous order (NOT the initial order of *\n* the day) as assigned by the institution, used to identify    *\n* the previous order in cancel and cancel/replace requests.    *\n****************************************************************\n*/\n  OrigClOrdID = 41,\n/*\n********************************************************\n* Time of message origination (always expressed in UTC *\n* (Universal Time Coordinated, also known as \"GMT\"))   *\n********************************************************\n*/\n  OrigTime = 42,\n/*\n**********************************************************\n* Indicates possible retransmission of message with this *\n* sequence number                                        *\n**********************************************************\n*/\n  PossDupFlag = 43,\n/*\n***********************************************\n* Price per unit of quantity (e.g. per share) *\n***********************************************\n*/\n  Price = 44,\n/*\n*************************************\n* Reference message sequence number *\n*************************************\n*/\n  RefSeqNum = 45,\n/*\n**************************************************************\n* Security identifier value of SecurityIDSource (22) type    *\n* (e.g. CUSIP, SEDOL, ISIN, etc). Requires SecurityIDSource. *\n**************************************************************\n*/\n  SecurityID = 48,\n/*\n*********************************************************\n* Assigned value used to identify firm sending message. *\n*********************************************************\n*/\n  SenderCompID = 49,\n/*\n***************************************************************\n* Assigned value used to identify specific message originator *\n* (desk, trader, etc.)                                        *\n***************************************************************\n*/\n  SenderSubID = 50,\n/*\n*********************************************************\n* Time of message transmission (always expressed in UTC *\n* (Universal Time Coordinated, also known as \"GMT\")     *\n*********************************************************\n*/\n  SendingTime = 52,\n/*\n**************************************************\n* Overall/total quantity (e.g. number of shares) *\n* (Prior to FIX 4.2 this field was of type int)  *\n**************************************************\n*/\n  Quantity = 53,\n/*\n****************************************************\n* Side of order (see Volume : \"Glossary\" for value *\n* definitions)                                     *\n****************************************************\n*/\n  Side = 54,\n/*\n***************************************************************\n* Ticker symbol. Common, \"human understood\" representation of *\n* the security. SecurityID (48) value can be specified if no  *\n* symbol exists (e.g. non-exchange traded Collective          *\n* Investment Vehicles)                                        *\n* Use \"[N/A]\" for products which do not have a symbol.        *\n***************************************************************\n*/\n  Symbol = 55,\n/*\n***************************************************\n* Assigned value used to identify receiving firm. *\n***************************************************\n*/\n  TargetCompID = 56,\n/*\n***************************************************************\n* Assigned value used to identify specific individual or unit *\n* intended to receive message. \"ADMIN\" reserved for           *\n* administrative messages not intended for a specific user.   *\n***************************************************************\n*/\n  TargetSubID = 57,\n/*\n***************************************************************\n* Free format text string                                     *\n* (Note: this field does not have a specified maximum length) *\n***************************************************************\n*/\n  Text = 58,\n/*\n****************************************************************\n* Specifies how long the order remains in effect. Absence of   *\n* this field is interpreted as DAY. NOTE not applicable to CIV *\n* Orders. (see Volume : \"Glossary\" for value definitions)      *\n****************************************************************\n*/\n  TimeInForce = 59,\n/*\n**************************************************************\n* Timestamp when the business transaction represented by the *\n* message occurred.                                          *\n**************************************************************\n*/\n  TransactTime = 60,\n/*\n****************\n* Urgency flag *\n****************\n*/\n  Urgency = 61,\n/*\n***************************************************************\n* Indicates expiration time of indication message (always     *\n* expressed in UTC (Universal Time Coordinated, also known as *\n* \"GMT\")                                                      *\n***************************************************************\n*/\n  ValidUntilTime = 62,\n/*\n****************************************************************\n* Indicates order settlement period. If present, SettlDate     *\n* (64) overrides this field. If both SettlType (63) and        *\n* SettDate (64) are omitted, the default for SettlType (63) is *\n* 0 (Regular)                                                  *\n* Regular is defined as the default settlement period for the  *\n* particular security on the exchange of execution.            *\n* In Fixed Income the contents of this field may influence the *\n* instrument definition if the SecurityID (48) is ambiguous.   *\n* In the US an active Treasury offering may be re-opened, and  *\n* for a time one CUSIP will apply to both the current and      *\n* \"when-issued\" securities. Supplying a value of \"7\" clarifies *\n* the instrument description; any other value or the absence   *\n* of this field should cause the respondent to default to the  *\n* active issue.                                                *\n* Additionally the following patterns may be uses as well as   *\n* enum values                                                  *\n* Dx = FX tenor expression for \"days\", e.g. \"D5\", where \"x\" is *\n* any integer > 0                                              *\n* Mx = FX tenor expression for \"months\", e.g. \"M3\", where \"x\"  *\n* is any integer > 0                                           *\n* Wx = FX tenor expression for \"weeks\", e.g. \"W13\", where \"x\"  *\n* is any integer > 0                                           *\n* Yx = FX tenor expression for \"years\", e.g. \"Y1\", where \"x\"   *\n* is any integer > 0                                           *\n* Noted that for FX the tenors expressed using Dx, Mx, Wx, and *\n* Yx values do not denote business days, but calendar days.    *\n****************************************************************\n*/\n  SettlType = 63,\n/*\n***************************************************************\n* Specific date of trade settlement (SettlementDate) in       *\n* YYYYMMDD format.                                            *\n* If present, this field overrides SettlType (63). This field *\n* is required if the value of SettlType (63) is 6 (Future) or *\n* 8 (Sellers Option). This field must be omitted if the value *\n* of SettlType (63) is 7 (When and If Issued)                 *\n* (expressed in local time at place of settlement)            *\n***************************************************************\n*/\n  SettlDate = 64,\n/*\n**************************************************************\n* Additional information about the security (e.g. preferred, *\n* warrants, etc.). Note also see SecurityType (167).         *\n* As defined in the NYSE Stock and bond Symbol Directory and *\n* in the AMEX Fitch Directory.                               *\n**************************************************************\n*/\n  SymbolSfx = 65,\n/*\n****************************************************************\n* Unique identifier for list as assigned by institution, used  *\n* to associate multiple individual orders. Uniqueness must be  *\n* guaranteed within a single trading day. Firms which generate *\n* multi-day orders should consider embedding a date within the *\n* ListID field to assure uniqueness across days.               *\n****************************************************************\n*/\n  ListID = 66,\n/*\n***************************************************************\n* Sequence of individual order within list (i.e. ListSeqNo of *\n* TotNoOrders (68), 2 of 25, 3 of 25, . . . )                 *\n***************************************************************\n*/\n  ListSeqNo = 67,\n/*\n***************************************************************\n* Total number of list order entries across all messages.     *\n* Should be the sum of all NoOrders (73) in each message that *\n* has repeating list order entries related to the same ListID *\n* (66). Used to support fragmentation.                        *\n* (Prior to FIX 4.2 this field was named \"ListNoOrds\")        *\n***************************************************************\n*/\n  TotNoOrders = 68,\n/*\n*********************************************************\n* Free format text message containing list handling and *\n* execution instructions.                               *\n*********************************************************\n*/\n  ListExecInst = 69,\n/*\n*************************************************\n* Unique identifier for allocation message.     *\n* (Prior to FIX 4.1 this field was of type int) *\n*************************************************\n*/\n  AllocID = 70,\n/*\n***************************************************************\n* Identifies allocation transaction type *** SOME VALUES HAVE *\n* BEEN REPLACED - See \"Replaced Features and Supported        *\n* Approach\" ***                                               *\n***************************************************************\n*/\n  AllocTransType = 71,\n/*\n**************************************************************\n* Reference identifier to be used with AllocTransType (71) = *\n* Replace or Cancel.                                         *\n* (Prior to FIX 4.1 this field was of type int)              *\n**************************************************************\n*/\n  RefAllocID = 72,\n/*\n*********************************************************\n* Indicates number of orders to be combined for average *\n* pricing and allocation.                               *\n*********************************************************\n*/\n  NoOrders = 73,\n/*\n***************************************************************\n* Indicates number of decimal places to be used for average   *\n* pricing. Absence of this field indicates that default       *\n* precision arranged by the broker/institution is to be used. *\n***************************************************************\n*/\n  AvgPxPrecision = 74,\n/*\n****************************************************************\n* Indicates date of trade referenced in this message in        *\n* YYYYMMDD format. Absence of this field indicates current day *\n* (expressed in local time at place of trade).                 *\n****************************************************************\n*/\n  TradeDate = 75,\n/*\n***************************************************************\n* Indicates whether the resulting position after a trade      *\n* should be an opening position or closing position. Used for *\n* omnibus accounting - where accounts are held on a gross     *\n* basis instead of being netted together.                     *\n***************************************************************\n*/\n  PositionEffect = 77,\n/*\n**********************************************************\n* Number of repeating AllocAccount (79)/AllocPrice (366) *\n* entries.                                               *\n**********************************************************\n*/\n  NoAllocs = 78,\n/*\n************************\n* Sub-account mnemonic *\n************************\n*/\n  AllocAccount = 79,\n/*\n****************************************************\n* Quantity to be allocated to specific sub-account *\n* (Prior to FIX 4.2 this field was of type int)    *\n****************************************************\n*/\n  AllocQty = 80,\n/*\n*************************************************************\n* Processing code for sub-account. Absence of this field in *\n* AllocAccount (79) / AllocPrice (366) /AllocQty (80) /     *\n* ProcessCode instance indicates regular trade.             *\n*************************************************************\n*/\n  ProcessCode = 81,\n/*\n******************************************\n* Total number of reports within series. *\n******************************************\n*/\n  NoRpts = 82,\n/*\n**************************************************************\n* Sequence number of message within report series. Used to   *\n* carry reporting sequence number of the fill as represented *\n* on the Trade Report Side.                                  *\n**************************************************************\n*/\n  RptSeq = 83,\n/*\n*************************************************\n* Total quantity canceled for this order.       *\n* (Prior to FIX 4.2 this field was of type int) *\n*************************************************\n*/\n  CxlQty = 84,\n/*\n****************************************************************\n* Number of delivery instruction fields in repeating group.    *\n* Note this field was removed in FIX 4.1 and reinstated in FIX *\n* 4.4.                                                         *\n****************************************************************\n*/\n  NoDlvyInst = 85,\n/*\n************************************\n* Identifies status of allocation. *\n************************************\n*/\n  AllocStatus = 87,\n/*\n************************************\n* Identifies reason for rejection. *\n************************************\n*/\n  AllocRejCode = 88,\n/*\n************************\n* Electronic signature *\n************************\n*/\n  Signature = 89,\n/*\n*******************************\n* Length of encrypted message *\n*******************************\n*/\n  SecureDataLen = 90,\n/*\n********************************\n* Actual encrypted data stream *\n********************************\n*/\n  SecureData = 91,\n/*\n**************************************\n* Number of bytes in signature field *\n**************************************\n*/\n  SignatureLength = 93,\n/*\n***********************\n* Email message type. *\n***********************\n*/\n  EmailType = 94,\n/*\n**************************************\n* Number of bytes in raw data field. *\n**************************************\n*/\n  RawDataLength = 95,\n/*\n*************************************************************\n* Unformatted raw data, can include bitmaps, word processor *\n* documents, etc.                                           *\n*************************************************************\n*/\n  RawData = 96,\n/*\n****************************************************************\n* Indicates that message may contain information that has been *\n* sent under another sequence number.                          *\n****************************************************************\n*/\n  PossResend = 97,\n/*\n*************************\n* Method of encryption. *\n*************************\n*/\n  EncryptMethod = 98,\n/*\n***********************************************\n* Price per unit of quantity (e.g. per share) *\n***********************************************\n*/\n  StopPx = 99,\n/*\n**************************************************************\n* Execution destination as defined by institution when order *\n* is entered.                                                *\n* Valid values:                                              *\n* See \"Appendix 6-C\"                                         *\n**************************************************************\n*/\n  ExDestination = 100,\n/*\n*************************************************\n* Code to identify reason for cancel rejection. *\n*************************************************\n*/\n  CxlRejReason = 102,\n/*\n****************************************************************\n* Code to identify reason for order rejection. Note: Values 3, *\n* 4, and 5 will be used when rejecting an order due to         *\n* pre-allocation information errors.                           *\n****************************************************************\n*/\n  OrdRejReason = 103,\n/*\n***************************************************************\n* Code to qualify IOI use. (see Volume : \"Glossary\" for value *\n* definitions)                                                *\n***************************************************************\n*/\n  IOIQualifier = 104,\n/*\n***********************************************************\n* Name of security issuer (e.g. International Business    *\n* Machines, GNMA).                                        *\n* see also Volume 7: \"PRODUCT: FIXED INCOME - Euro Issuer *\n* Values\"                                                 *\n***********************************************************\n*/\n  Issuer = 106,\n/*\n****************************************************************\n* Can be used to provide an optional textual description for a *\n* financial instrument.                                        *\n****************************************************************\n*/\n  SecurityDesc = 107,\n/*\n********************************\n* Heartbeat interval (seconds) *\n********************************\n*/\n  HeartBtInt = 108,\n/*\n*************************************************\n* Minimum quantity of an order to be executed.  *\n* (Prior to FIX 4.2 this field was of type int) *\n*************************************************\n*/\n  MinQty = 110,\n/*\n***************************************************************\n* The quantity to be displayed . Required for reserve orders. *\n* On orders specifies the qty to be displayed, on execution   *\n* reports the currently displayed quantity.                   *\n***************************************************************\n*/\n  MaxFloor = 111,\n/*\n**************************************************************\n* Identifier included in Test Request message to be returned *\n* in resulting Heartbeat                                     *\n**************************************************************\n*/\n  TestReqID = 112,\n/*\n******************************************************\n* Identifies party of trade responsible for exchange *\n* reporting.                                         *\n******************************************************\n*/\n  ReportToExch = 113,\n/*\n**********************************************************\n* Indicates whether the broker is to locate the stock in *\n* conjunction with a short sell order.                   *\n**********************************************************\n*/\n  LocateReqd = 114,\n/*\n****************************************************************\n* Assigned value used to identify firm originating message if  *\n* the message was delivered by a third party i.e. the third    *\n* party firm identifier would be delivered in the SenderCompID *\n* field and the firm originating the message in this field.    *\n****************************************************************\n*/\n  OnBehalfOfCompID = 115,\n/*\n***************************************************************\n* Assigned value used to identify specific message originator *\n* (i.e. trader) if the message was delivered by a third party *\n***************************************************************\n*/\n  OnBehalfOfSubID = 116,\n/*\n*******************************\n* Unique identifier for quote *\n*******************************\n*/\n  QuoteID = 117,\n/*\n***************************************************************\n* Total amount due as the result of the transaction (e.g. for *\n* Buy order - principal + commission + fees) reported in      *\n* currency of execution.                                      *\n***************************************************************\n*/\n  NetMoney = 118,\n/*\n***************************************************************\n* Total amount due expressed in settlement currency (includes *\n* the effect of the forex transaction)                        *\n***************************************************************\n*/\n  SettlCurrAmt = 119,\n/*\n*********************************************\n* Currency code of settlement denomination. *\n*********************************************\n*/\n  SettlCurrency = 120,\n/*\n*********************************************************\n* Indicates request for forex accommodation trade to be *\n* executed along with security transaction.             *\n*********************************************************\n*/\n  ForexReq = 121,\n/*\n**************************************************************\n* Original time of message transmission (always expressed in *\n* UTC (Universal Time Coordinated, also known as \"GMT\") when *\n* transmitting orders as the result of a resend request.     *\n**************************************************************\n*/\n  OrigSendingTime = 122,\n/*\n************************************************************\n* Indicates that the Sequence Reset message is replacing   *\n* administrative or application messages which will not be *\n* resent.                                                  *\n************************************************************\n*/\n  GapFillFlag = 123,\n/*\n******************************************************\n* No of execution repeating group entries to follow. *\n******************************************************\n*/\n  NoExecs = 124,\n/*\n***************************************************************\n* Time/Date of order expiration (always expressed in UTC      *\n* (Universal Time Coordinated, also known as \"GMT\")           *\n* The meaning of expiration is specific to the context where  *\n* the field is used.                                          *\n* For orders, this is the expiration time of a Good Til Date  *\n* TimeInForce.                                                *\n* For Quotes - this is the expiration of the quote.           *\n* Expiration time is provided across the quote message dialog *\n* to control the length of time of the overall quoting        *\n* process.                                                    *\n* For collateral requests, this is the time by which          *\n* collateral must be assigned.                                *\n* For collateral assignments, this is the time by which a     *\n* response to the assignment is expected.                     *\n***************************************************************\n*/\n  ExpireTime = 126,\n/*\n***********************************\n* Reason for execution rejection. *\n***********************************\n*/\n  DKReason = 127,\n/*\n****************************************************************\n* Assigned value used to identify the firm targeted to receive *\n* the message if the message is delivered by a third party     *\n* i.e. the third party firm identifier would be delivered in   *\n* the TargetCompID (56) field and the ultimate receiver firm   *\n* ID in this field.                                            *\n****************************************************************\n*/\n  DeliverToCompID = 128,\n/*\n**************************************************************\n* Assigned value used to identify specific message recipient *\n* (i.e. trader) if the message is delivered by a third party *\n**************************************************************\n*/\n  DeliverToSubID = 129,\n/*\n****************************************************************\n* Indicates that IOI is the result of an existing agency order *\n* or a facilitation position resulting from an agency order,   *\n* not from principal trading or order solicitation activity.   *\n****************************************************************\n*/\n  IOINaturalFlag = 130,\n/*\n***************************************\n* Unique identifier for quote request *\n***************************************\n*/\n  QuoteReqID = 131,\n/*\n******************\n* Bid price/rate *\n******************\n*/\n  BidPx = 132,\n/*\n********************\n* Offer price/rate *\n********************\n*/\n  OfferPx = 133,\n/*\n*************************************************\n* Quantity of bid                               *\n* (Prior to FIX 4.2 this field was of type int) *\n*************************************************\n*/\n  BidSize = 134,\n/*\n*************************************************\n* Quantity of offer                             *\n* (Prior to FIX 4.2 this field was of type int) *\n*************************************************\n*/\n  OfferSize = 135,\n/*\n****************************************************\n* Number of repeating groups of miscellaneous fees *\n****************************************************\n*/\n  NoMiscFees = 136,\n/*\n***************************\n* Miscellaneous fee value *\n***************************\n*/\n  MiscFeeAmt = 137,\n/*\n*********************************\n* Currency of miscellaneous fee *\n*********************************\n*/\n  MiscFeeCurr = 138,\n/*\n****************************************\n* Indicates type of miscellaneous fee. *\n****************************************\n*/\n  MiscFeeType = 139,\n/*\n***************************************\n* Previous closing price of security. *\n***************************************\n*/\n  PrevClosePx = 140,\n/*\n***********************************************************\n* Indicates that the both sides of the FIX session should *\n* reset sequence numbers.                                 *\n***********************************************************\n*/\n  ResetSeqNumFlag = 141,\n/*\n****************************************************************\n* Assigned value used to identify specific message             *\n* originator's location (i.e. geographic location and/or desk, *\n* trader)                                                      *\n****************************************************************\n*/\n  SenderLocationID = 142,\n/*\n***********************************************************\n* Assigned value used to identify specific message        *\n* destination's location (i.e. geographic location and/or *\n* desk, trader)                                           *\n***********************************************************\n*/\n  TargetLocationID = 143,\n/*\n****************************************************************\n* Assigned value used to identify specific message             *\n* originator's location (i.e. geographic location and/or desk, *\n* trader) if the message was delivered by a third party        *\n****************************************************************\n*/\n  OnBehalfOfLocationID = 144,\n/*\n****************************************************************\n* Assigned value used to identify specific message recipient's *\n* location (i.e. geographic location and/or desk, trader) if   *\n* the message was delivered by a third party                   *\n****************************************************************\n*/\n  DeliverToLocationID = 145,\n/*\n********************************************************\n* Specifies the number of repeating symbols specified. *\n********************************************************\n*/\n  NoRelatedSym = 146,\n/*\n***********************************\n* The subject of an Email message *\n***********************************\n*/\n  Subject = 147,\n/*\n**********************************\n* The headline of a News message *\n**********************************\n*/\n  Headline = 148,\n/*\n****************************************************************\n* A URI (Uniform Resource Identifier) or URL (Uniform Resource *\n* Locator) link to additional information (i.e.                *\n* http://www.XYZ.com/research.html)                            *\n* See \"Appendix 6-B FIX Fields Based Upon Other Standards\"     *\n****************************************************************\n*/\n  URLLink = 149,\n/*\n***************************************************************\n* Describes the specific ExecutionRpt (i.e. Pending Cancel)   *\n* while OrdStatus (39) will always identify the current order *\n* status (i.e. Partially Filled) *** SOME VALUES HAVE BEEN    *\n* REPLACED - See \"Replaced Features and Supported Approach\"   *\n* ***                                                         *\n***************************************************************\n*/\n  ExecType = 150,\n/*\n****************************************************************\n* Quantity open for further execution. If the OrdStatus (39)   *\n* is Canceled, DoneForTheDay, Expired, Calculated, or Rejected *\n* (in which case the order is no longer active) then LeavesQty *\n* could be 0, otherwise LeavesQty = OrderQty (38) - CumQty     *\n* (14).                                                        *\n* (Prior to FIX 4.2 this field was of type int)                *\n****************************************************************\n*/\n  LeavesQty = 151,\n/*\n**************************************************************\n* Specifies the approximate order quantity desired in total  *\n* monetary units vs. as tradeable units (e.g. number of      *\n* shares). The broker or fund manager (for CIV orders) would *\n* be responsible for converting and calculating a tradeable  *\n* unit (e.g. share) quantity (OrderQty (38)) based upon this *\n* amount to be used for the actual order and subsequent      *\n* messages.                                                  *\n**************************************************************\n*/\n  CashOrderQty = 152,\n/*\n************************************************************\n* AvgPx (6) for a specific AllocAccount (79)               *\n* For Fixed Income this is always expressed as \"percent of *\n* par\" price type.                                         *\n************************************************************\n*/\n  AllocAvgPx = 153,\n/*\n*************************************************\n* NetMoney (8) for a specific AllocAccount (79) *\n*************************************************\n*/\n  AllocNetMoney = 154,\n/*\n***************************************************************\n* Foreign exchange rate used to compute SettlCurrAmt (9) from *\n* Currency (5) to SettlCurrency (20)                          *\n***************************************************************\n*/\n  SettlCurrFxRate = 155,\n/*\n***********************************************************\n* Specifies whether or not SettlCurrFxRate (55) should be *\n* multiplied or divided.                                  *\n***********************************************************\n*/\n  SettlCurrFxRateCalc = 156,\n/*\n**************************************************************\n* Number of Days of Interest for convertible bonds and fixed *\n* income. Note value may be negative.                        *\n**************************************************************\n*/\n  NumDaysInterest = 157,\n/*\n****************************************************************\n* The amount the buyer compensates the seller for the portion  *\n* of the next coupon interest payment the seller has earned    *\n* but will not receive from the issuer because the issuer will *\n* send the next coupon payment to the buyer. Accrued Interest  *\n* Rate is the annualized Accrued Interest amount divided by    *\n* the purchase price of the bond.                              *\n****************************************************************\n*/\n  AccruedInterestRate = 158,\n/*\n**************************************************************\n* Amount of Accrued Interest for convertible bonds and fixed *\n* income                                                     *\n**************************************************************\n*/\n  AccruedInterestAmt = 159,\n/*\n****************************************************************\n* Indicates mode used for Settlement Instructions message. *** *\n* SOME VALUES HAVE BEEN REPLACED - See \"Replaced Features and  *\n* Supported Approach\" ***                                      *\n****************************************************************\n*/\n  SettlInstMode = 160,\n/*\n*************************************************************\n* Free format text related to a specific AllocAccount (79). *\n*************************************************************\n*/\n  AllocText = 161,\n/*\n*************************************************\n* Unique identifier for Settlement Instruction. *\n*************************************************\n*/\n  SettlInstID = 162,\n/*\n****************************************************\n* Settlement Instructions message transaction type *\n****************************************************\n*/\n  SettlInstTransType = 163,\n/*\n***********************************************************\n* Unique identifier for an email thread (new and chain of *\n* replies)                                                *\n***********************************************************\n*/\n  EmailThreadID = 164,\n/*\n***********************************************\n* Indicates source of Settlement Instructions *\n***********************************************\n*/\n  SettlInstSource = 165,\n/*\n****************************************************************\n* Indicates type of security. Security type enumerations are   *\n* grouped by Product(460) field value. NOTE: Additional values *\n* may be used by mutual agreement of the counterparties.       *\n****************************************************************\n*/\n  SecurityType = 167,\n/*\n**************************************************************\n* Time the details within the message should take effect     *\n* (always expressed in UTC (Universal Time Coordinated, also *\n* known as \"GMT\")                                            *\n**************************************************************\n*/\n  EffectiveTime = 168,\n/*\n*****************************************************\n* Identifies the Standing Instruction database used *\n*****************************************************\n*/\n  StandInstDbType = 169,\n/*\n**************************************************************\n* Name of the Standing Instruction database represented with *\n* StandInstDbType (169) (i.e. the Global Custodian's name).  *\n**************************************************************\n*/\n  StandInstDbName = 170,\n/*\n****************************************************************\n* Unique identifier used on the Standing Instructions database *\n* for the Standing Instructions to be referenced.              *\n****************************************************************\n*/\n  StandInstDbID = 171,\n/*\n*********************************\n* Identifies type of settlement *\n*********************************\n*/\n  SettlDeliveryType = 172,\n/*\n**********************\n* Bid F/X spot rate. *\n**********************\n*/\n  BidSpotRate = 188,\n/*\n****************************************************************\n* Bid F/X forward points added to spot rate. May be a negative *\n* value.                                                       *\n****************************************************************\n*/\n  BidForwardPoints = 189,\n/*\n************************\n* Offer F/X spot rate. *\n************************\n*/\n  OfferSpotRate = 190,\n/*\n*********************************************************\n* Offer F/X forward points added to spot rate. May be a *\n* negative value.                                       *\n*********************************************************\n*/\n  OfferForwardPoints = 191,\n/*\n*********************************************************\n* OrderQty (38) of the future part of a F/X swap order. *\n*********************************************************\n*/\n  OrderQty2 = 192,\n/*\n*********************************************************\n* SettDate (64) of the future part of a F/X swap order. *\n*********************************************************\n*/\n  SettlDate2 = 193,\n/*\n******************\n* F/X spot rate. *\n******************\n*/\n  LastSpotRate = 194,\n/*\n***********************************************************\n* F/X forward points added to LastSpotRate (94). May be a *\n* negative value. Expressed in decimal form. For example, *\n* 61.99 points is expressed and sent as 0.006199          *\n***********************************************************\n*/\n  LastForwardPoints = 195,\n/*\n***************************************************************\n* Can be used to link two different Allocation messages (each *\n* with unique AllocID (70)) together, i.e. for F/X \"Netting\"  *\n* or \"Swaps\". Should be unique.                               *\n***************************************************************\n*/\n  AllocLinkID = 196,\n/*\n**************************************************************\n* Identifies the type of Allocation linkage when AllocLinkID *\n* (96) is used.                                              *\n**************************************************************\n*/\n  AllocLinkType = 197,\n/*\n****************************************************************\n* Assigned by the party which accepts the order. Can be used   *\n* to provide the OrderID (37) used by an exchange or executing *\n* system.                                                      *\n****************************************************************\n*/\n  SecondaryOrderID = 198,\n/*\n*****************************************************\n* Number of repeating groups of IOIQualifiers (04). *\n*****************************************************\n*/\n  NoIOIQualifiers = 199,\n/*\n****************************************************************\n* Can be used with standardized derivatives vs. the            *\n* MaturityDate (54) field.  Month and Year of the maturity     *\n* (used for standardized futures and options).                 *\n* Format:                                                      *\n* YYYYMM (e.g. 199903)                                         *\n* YYYYMMDD (e.g. 20030323)                                     *\n* YYYYMMwN (e.g. 200303w) for week                             *\n* A specific date or can be appended to the MaturityMonthYear. *\n* For instance, if multiple standard products exist that       *\n* mature in the same Year and Month, but actually mature at a  *\n* different time, a value can be appended, such as \"w\" or \"w2\" *\n* to indicate week  as opposed to week 2 expiration. Likewise, *\n* the date (0-3) can be appended to indicate a specific        *\n* expiration (maturity date).                                  *\n****************************************************************\n*/\n  MaturityMonthYear = 200,\n/*\n*********************************************************\n* Indicates whether an option contract is a put or call *\n*********************************************************\n*/\n  PutOrCall = 201,\n/*\n*******************************\n* Strike Price for an Option. *\n*******************************\n*/\n  StrikePrice = 202,\n/*\n*************************************************\n* Used for derivative products, such as options *\n*************************************************\n*/\n  CoveredOrUncovered = 203,\n/*\n***************************************************************\n* Provided to support versioning of option contracts as a     *\n* result of corporate actions or events. Use of this field is *\n* defined by counterparty agreement or market conventions.    *\n***************************************************************\n*/\n  OptAttribute = 206,\n/*\n********************************************\n* Market used to help identify a security. *\n* Valid values:                            *\n* See \"Appendix 6-C\"                       *\n********************************************\n*/\n  SecurityExchange = 207,\n/*\n**************************************************************\n* Indicates whether or not details should be communicated to *\n* BrokerOfCredit (i.e. step-in broker).                      *\n**************************************************************\n*/\n  NotifyBrokerOfCredit = 208,\n/*\n***************************************************************\n* Indicates how the receiver (i.e. third party) of Allocation *\n* message should handle/process the account details.          *\n***************************************************************\n*/\n  AllocHandlInst = 209,\n/*\n***************************************************************\n* Maximum quantity (e.g. number of shares) within an order to *\n* be shown to other customers (i.e. sent via an IOI).         *\n* (Prior to FIX 4.2 this field was of type int)               *\n***************************************************************\n*/\n  MaxShow = 210,\n/*\n**************************************************************\n* Amount (signed) added to the peg for a pegged order in the *\n* context of the PegOffsetType (836)                         *\n* (Prior to FIX 4.4 this field was of type PriceOffset)      *\n**************************************************************\n*/\n  PegOffsetValue = 211,\n/*\n*************************************\n* Length of the XmlData data block. *\n*************************************\n*/\n  XmlDataLen = 212,\n/*\n***********************************************************\n* Actual XML data stream (e.g. FIXML). See approriate XML *\n* reference (e.g. FIXML). Note: may contain embedded SOH  *\n* characters.                                             *\n***********************************************************\n*/\n  XmlData = 213,\n/*\n**************************************************************\n* Reference identifier for the SettlInstID (162) with Cancel *\n* and Replace SettlInstTransType (163) transaction types.    *\n**************************************************************\n*/\n  SettlInstRefID = 214,\n/*\n*******************************************************\n* Number of repeating groups of RoutingID (217) and   *\n* RoutingType (216) values.                           *\n* See Volume 3: \"Pre-Trade Message Targeting/Routing\" *\n*******************************************************\n*/\n  NoRoutingIDs = 215,\n/*\n****************************************************\n* Indicates the type of RoutingID (217) specified. *\n****************************************************\n*/\n  RoutingType = 216,\n/*\n******************************************************\n* Assigned value used to identify a specific routing *\n* destination.                                       *\n******************************************************\n*/\n  RoutingID = 217,\n/*\n****************************************************************\n* For Fixed Income. Either Swap Spread or Spread to Benchmark  *\n* depending upon the order type.                               *\n* Spread to Benchmark: Basis points relative to a benchmark.   *\n* To be expressed as \"count of basis points\" (vs. an absolute  *\n* value). E.g. High Grade Corporate Bonds may express price as *\n* basis points relative to benchmark (the BenchmarkCurveName   *\n* (22) field). Note: Basis points can be negative.             *\n* Swap Spread: Target spread for a swap.                       *\n****************************************************************\n*/\n  Spread = 218,\n/*\n***************************************************************\n* Identifies currency used for benchmark curve. See \"Appendix *\n* 6-A: Valid Currency Codes\" for information on obtaining     *\n* valid values.                                               *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)      *\n***************************************************************\n*/\n  BenchmarkCurveCurrency = 220,\n/*\n**********************************************************\n* Name of benchmark curve.                               *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n**********************************************************\n*/\n  BenchmarkCurveName = 221,\n/*\n****************************************************************\n* Point on benchmark curve. Free form values: e.g. \"Y\", \"7Y\",  *\n* \"INTERPOLATED\".                                              *\n* Sample values:                                               *\n* M = combination of a number between 1-12 and a \"M\" for month *\n* Y = combination of number between 1-100 and a \"Y\" for year}  *\n* 10Y-OLD = see above, then add \"-OLD\" when appropriate        *\n* INTERPOLATED = the point is mathematically derived           *\n* 2/2031 5 3/8 = the point is stated via a combination of      *\n* maturity month / year and coupon                             *\n* See Fixed Income-specific documentation at                   *\n* http://www.fixprotocol.org for additional values.            *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n****************************************************************\n*/\n  BenchmarkCurvePoint = 222,\n/*\n****************************************************************\n* The rate of interest that, when multiplied by the principal, *\n* par value, or face value of a bond, provides the currency    *\n* amount of the periodic interest payment. The coupon is       *\n* always cited, along with maturity, in any quotation of a     *\n* bond's price.                                                *\n****************************************************************\n*/\n  CouponRate = 223,\n/*\n**************************************************************\n* Date interest is to be paid. Used in identifying Corporate *\n* Bond issues.                                               *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)     *\n* (prior to FIX 4.4 field was of type UTCDate)               *\n**************************************************************\n*/\n  CouponPaymentDate = 224,\n/*\n****************************************************************\n* The date on which a bond or stock offering is issued. It may *\n* or may not be the same as the effective date (\"Dated Date\")  *\n* or the date on which interest begins to accrue (\"Interest    *\n* Accrual Date\")                                               *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n* (prior to FIX 4.4 field was of type UTCDate)                 *\n****************************************************************\n*/\n  IssueDate = 225,\n/*\n**************************************************************\n* Number of business days before repurchase of a repo. (Note *\n* tag # was reserved in FIX 4.1, added in FIX 4.3)           *\n**************************************************************\n*/\n  RepurchaseTerm = 226,\n/*\n**************************************************************\n* Percent of par at which a Repo will be repaid. Represented *\n* as a percent, e.g. .9525 represents 95-/4 percent of par.  *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)     *\n**************************************************************\n*/\n  RepurchaseRate = 227,\n/*\n***************************************************************\n* For Fixed Income: Amorization Factor for deriving Current   *\n* face from Original face for ABS or MBS securities, note the *\n* fraction may be greater than, equal to or less than . In    *\n* TIPS securities this is the Inflation index.                *\n* Qty * Factor * Price = Gross Trade Amount                   *\n* For Derivatives: Contract Value Factor by which price must  *\n* be adjusted to determine the true nominal value of one      *\n* futures/options contract.                                   *\n* (Qty * Price) * Factor = Nominal Value                      *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)      *\n***************************************************************\n*/\n  Factor = 228,\n/*\n***********************************************************\n* Used with Fixed Income for Muncipal New Issue Market.   *\n* Agreement in principal between counter-parties prior to *\n* actual trade date.                                      *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)  *\n* (prior to FIX 4.4 field was of type UTCDate)            *\n***********************************************************\n*/\n  TradeOriginationDate = 229,\n/*\n***************************************************************\n* The date when a distribution of interest is deducted from a *\n* securities assets or set aside for payment to bondholders.  *\n* On the ex-date, the securities price drops by the amount of *\n* the distribution (plus or minus any market activity).       *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)      *\n* (prior to FIX 4.4 field was of type UTCDate)                *\n***************************************************************\n*/\n  ExDate = 230,\n/*\n****************************************************************\n* Specifies the ratio or multiply factor to convert from       *\n* \"nominal\" units (e.g. contracts) to total units (e.g.        *\n* shares) (e.g. 1.0, 100, 1000, etc). Applicable For Fixed     *\n* Income, Convertible Bonds, Derivatives, etc.                 *\n* In general quantities for all calsses should be expressed in *\n* the basic unit of the instrument, e.g. shares for equities,  *\n* norminal or par amount for bonds, currency for foreign       *\n* exchange. When quantity is expressed in contracts, e.g.      *\n* financing transactions and bond trade reporting,             *\n* ContractMutliplier should contain the number of units in one *\n* contract and can be omitted if the multiplier is the default *\n* amount for the instrument, i.e. 1,000 par of bonds,          *\n* 1,000,000 par for financing transactions.                    *\n****************************************************************\n*/\n  ContractMultiplier = 231,\n/*\n***********************************************************\n* Number of stipulation entries                           *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3). *\n***********************************************************\n*/\n  NoStipulations = 232,\n/*\n**********************************************************\n* For Fixed Income.                                      *\n* Type of Stipulation.                                   *\n* Other types may be used by mutual agreement of the     *\n* counterparties.                                        *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n**********************************************************\n*/\n  StipulationType = 233,\n/*\n****************************************************************\n* For Fixed Income. Value of stipulation.                      *\n* The expression can be an absolute single value or a          *\n* combination of values and logical operators:                 *\n* < value                                                      *\n* > value                                                      *\n* <= value                                                     *\n* >= value                                                     *\n* value                                                        *\n* value - value2                                               *\n* value OR value2                                              *\n* value AND value2                                             *\n* YES                                                          *\n* NO                                                           *\n* Bargain conditions recognized by the London Stock Exchange - *\n* to be used when StipulationType is \"BGNCON\".                 *\n* CD = Special cum Dividend                                    *\n* XD = Special ex Dividend                                     *\n* CC = Special cum Coupon                                      *\n* XC = Special ex Coupon                                       *\n* CB = Special cum Bonus                                       *\n* XB = Special ex Bonus                                        *\n* CR = Special cum Rights                                      *\n* XR = Special ex Rights                                       *\n* CP = Special cum Capital Repayments                          *\n* XP = Special ex Capital Repayments                           *\n* CS = Cash Settlement                                         *\n* SP = Special Price                                           *\n* TR = Report for European Equity Market Securities in         *\n* accordance with Chapter 8 of the Rules.                      *\n* GD = Guaranteed Delivery                                     *\n* Values for StipulationType = \"PXSOURCE\":                     *\n* BB GENERIC                                                   *\n* BB FAIRVALUE                                                 *\n* BROKERTEC                                                    *\n* ESPEED                                                       *\n* GOVPX                                                        *\n* HILLIARD FARBER                                              *\n* ICAP                                                         *\n* TRADEWEB                                                     *\n* TULLETT LIBERTY                                              *\n* If a particular side of the market is wanted append /BID     *\n* /OFFER or /MID.                                              *\n* plus appropriate combinations of the above and other         *\n* expressions by mutual agreement of the counterparties.       *\n* Examples: \">=60\", \".25\", \"ORANGE OR CONTRACOSTA\", etc.       *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n****************************************************************\n*/\n  StipulationValue = 234,\n/*\n****************************************************************\n* Type of yield. (Note tag # was reserved in FIX 4.1, added in *\n* FIX 4.3)                                                     *\n****************************************************************\n*/\n  YieldType = 235,\n/*\n**********************************************************\n* Yield percentage.                                      *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n**********************************************************\n*/\n  Yield = 236,\n/*\n**************************************************************\n* The price at which the securities are distributed to the   *\n* different members of an underwriting group for the primary *\n* market in Municipals, total gross underwriter's spread.    *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)     *\n**************************************************************\n*/\n  TotalTakedown = 237,\n/*\n***************************************************************\n* Provides the reduction in price for the secondary market in *\n* Muncipals.                                                  *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)      *\n***************************************************************\n*/\n  Concession = 238,\n/*\n**************************************************************\n* Identifies the collateral used in the transaction.         *\n* Valid values: see SecurityType (167) field (Note tag # was *\n* reserved in FIX 4.1, added in FIX 4.3)                     *\n**************************************************************\n*/\n  RepoCollateralSecurityType = 239,\n/*\n*************************************************************\n* Return of investor's principal in a security. Bond        *\n* redemption can occur before maturity date.(Note tag # was *\n* reserved in FIX 4.1, added in FIX 4.3) (prior to FIX 4.4  *\n* field was of type UTCDate)                                *\n*************************************************************\n*/\n  RedemptionDate = 240,\n/*\n**********************************************************\n* Underlying security's CouponPaymentDate.               *\n* See CouponPaymentDate (224) field for description      *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n* (prior to FIX 4.4 field was of type UTCDate)           *\n**********************************************************\n*/\n  UnderlyingCouponPaymentDate = 241,\n/*\n**********************************************************\n* Underlying security's IssueDate.                       *\n* See IssueDate (225) field for description              *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n* (prior to FIX 4.4 field was of type UTCDate)           *\n**********************************************************\n*/\n  UnderlyingIssueDate = 242,\n/*\n****************************************************************\n* Underlying security's RepoCollateralSecurityType. See        *\n* RepoCollateralSecurityType (239) field for description.(Note *\n* tag # was reserved in FIX 4.1, added in FIX 4.3)             *\n****************************************************************\n*/\n  UnderlyingRepoCollateralSecurityType = 243,\n/*\n***************************************************************\n* Underlying security's RepurchaseTerm. See RepurchaseTerm    *\n* (226) field for description (Note tag # was reserved in FIX *\n* 4.1, added in FIX 4.3)                                      *\n***************************************************************\n*/\n  UnderlyingRepurchaseTerm = 244,\n/*\n***************************************************************\n* Underlying security's RepurchaseRate. See RepurchaseRate    *\n* (227) field for description (Note tag # was reserved in FIX *\n* 4.1, added in FIX 4.3)                                      *\n***************************************************************\n*/\n  UnderlyingRepurchaseRate = 245,\n/*\n**********************************************************\n* Underlying security's Factor.                          *\n* See Factor (228) field for description                 *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n**********************************************************\n*/\n  UnderlyingFactor = 246,\n/*\n***************************************************************\n* Underlying security's RedemptionDate. See RedemptionDate    *\n* (240) field for description (Note tag # was reserved in FIX *\n* 4.1, added in FIX 4.3) (prior to FIX 4.4 field was of type  *\n* UTCDate)                                                    *\n***************************************************************\n*/\n  UnderlyingRedemptionDate = 247,\n/*\n**********************************************************\n* Multileg instrument's individual leg security's        *\n* CouponPaymentDate.                                     *\n* See CouponPaymentDate (224) field for description      *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n* (prior to FIX 4.4 field was of type UTCDate)           *\n**********************************************************\n*/\n  LegCouponPaymentDate = 248,\n/*\n**************************************************************\n* Multileg instrument's individual leg security's IssueDate. *\n* See IssueDate (225) field for description                  *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)     *\n* (prior to FIX 4.4 field was of type UTCDate)               *\n**************************************************************\n*/\n  LegIssueDate = 249,\n/*\n***************************************************************\n* Multileg instrument's individual leg security's             *\n* RepoCollateralSecurityType. See RepoCollateralSecurityType  *\n* (239) field for description (Note tag # was reserved in FIX *\n* 4.1, added in FIX 4.3)                                      *\n***************************************************************\n*/\n  LegRepoCollateralSecurityType = 250,\n/*\n*************************************************************\n* Multileg instrument's individual leg security's           *\n* RepurchaseTerm. See RepurchaseTerm (226) field for        *\n* description (Note tag # was reserved in FIX 4.1, added in *\n* FIX 4.3)                                                  *\n*************************************************************\n*/\n  LegRepurchaseTerm = 251,\n/*\n*************************************************************\n* Multileg instrument's individual leg security's           *\n* RepurchaseRate. See RepurchaseRate (227) field for        *\n* description (Note tag # was reserved in FIX 4.1, added in *\n* FIX 4.3)                                                  *\n*************************************************************\n*/\n  LegRepurchaseRate = 252,\n/*\n***********************************************************\n* Multileg instrument's individual leg security's Factor. *\n* See Factor (228) field for description                  *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)  *\n***********************************************************\n*/\n  LegFactor = 253,\n/*\n*************************************************************\n* Multileg instrument's individual leg security's           *\n* RedemptionDate. See RedemptionDate (240) field for        *\n* description (Note tag # was reserved in FIX 4.1, added in *\n* FIX 4.3) (prior to FIX 4.4 field was of type UTCDate)     *\n*************************************************************\n*/\n  LegRedemptionDate = 254,\n/*\n****************************************************************\n* An evaluation of a company's ability to repay obligations or *\n* its likelihood of not defaulting. These evaluation are       *\n* provided by Credit Rating Agencies, i.e. S&P, Moody's.       *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n****************************************************************\n*/\n  CreditRating = 255,\n/*\n**********************************************************\n* Underlying security's CreditRating.                    *\n* See CreditRating (255) field for description           *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n**********************************************************\n*/\n  UnderlyingCreditRating = 256,\n/*\n**********************************************************\n* Multileg instrument's individual leg security's        *\n* CreditRating.                                          *\n* See CreditRating (255) field for description           *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n**********************************************************\n*/\n  LegCreditRating = 257,\n/*\n**************************************************************\n* Driver and part of trade in the event that the Security    *\n* Master file was wrong at the point of entry(Note tag # was *\n* reserved in FIX 4.1, added in FIX 4.3)                     *\n**************************************************************\n*/\n  TradedFlatSwitch = 258,\n/*\n****************************************************************\n* BasisFeatureDate allows requesting firms within fixed income *\n* the ability to request an alternative yield-to-worst,        *\n* -maturity, -extended or other call. This flows through the   *\n* confirm process.                                             *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n* (prior to FIX 4.4 field was of type UTCDate)                 *\n****************************************************************\n*/\n  BasisFeatureDate = 259,\n/*\n**********************************************************\n* Price for BasisFeatureDate.                            *\n* See BasisFeatureDate (259)                             *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n**********************************************************\n*/\n  BasisFeaturePrice = 260,\n/*\n*********************************************\n* Unique identifier for Market Data Request *\n*********************************************\n*/\n  MDReqID = 262,\n/*\n*****************************\n* Subscription Request Type *\n*****************************\n*/\n  SubscriptionRequestType = 263,\n/*\n***********************************************************\n* Depth of market for Book Snapshot / Incremental updates *\n* 0 - full book depth                                     *\n* 1 - top of book                                         *\n* 2 and above - book depth (number of levels)             *\n***********************************************************\n*/\n  MarketDepth = 264,\n/*\n*********************************************\n* Specifies the type of Market Data update. *\n*********************************************\n*/\n  MDUpdateType = 265,\n/*\n***************************************************************\n* Specifies whether or not book entries should be aggregated. *\n* (Not specified) = broker option                             *\n***************************************************************\n*/\n  AggregatedBook = 266,\n/*\n*************************************************\n* Number of MDEntryType (269) fields requested. *\n*************************************************\n*/\n  NoMDEntryTypes = 267,\n/*\n*********************************************\n* Number of entries in Market Data message. *\n*********************************************\n*/\n  NoMDEntries = 268,\n/*\n***************************\n* Type Market Data entry. *\n***************************\n*/\n  MDEntryType = 269,\n/*\n***********************************\n* Price of the Market Data Entry. *\n***********************************\n*/\n  MDEntryPx = 270,\n/*\n************************************************************\n* Quantity or volume represented by the Market Data Entry. *\n************************************************************\n*/\n  MDEntrySize = 271,\n/*\n************************************************\n* Date of Market Data Entry.                   *\n* (prior to FIX 4.4 field was of type UTCDate) *\n************************************************\n*/\n  MDEntryDate = 272,\n/*\n******************************\n* Time of Market Data Entry. *\n******************************\n*/\n  MDEntryTime = 273,\n/*\n****************************\n* Direction of the \"tick\". *\n****************************\n*/\n  TickDirection = 274,\n/*\n*********************************\n* Market posting quote / trade. *\n* Valid values:                 *\n* See \"Appendix 6-C\"            *\n*********************************\n*/\n  MDMkt = 275,\n/*\n**********************************************************\n* Space-delimited list of conditions describing a quote. *\n**********************************************************\n*/\n  QuoteCondition = 276,\n/*\n*********************************************************\n* Space-delimited list of conditions describing a trade *\n*********************************************************\n*/\n  TradeCondition = 277,\n/*\n****************************************\n* Unique Market Data Entry identifier. *\n****************************************\n*/\n  MDEntryID = 278,\n/*\n**************************************\n* Type of Market Data update action. *\n**************************************\n*/\n  MDUpdateAction = 279,\n/*\n*****************************************\n* Refers to a previous MDEntryID (278). *\n*****************************************\n*/\n  MDEntryRefID = 280,\n/*\n******************************************************\n* Reason for the rejection of a Market Data request. *\n******************************************************\n*/\n  MDReqRejReason = 281,\n/*\n*************************************\n* Originator of a Market Data Entry *\n*************************************\n*/\n  MDEntryOriginator = 282,\n/*\n***********************************************\n* Identification of a Market Maker's location *\n***********************************************\n*/\n  LocationID = 283,\n/*\n*******************************************\n* Identification of a Market Maker's desk *\n*******************************************\n*/\n  DeskID = 284,\n/*\n************************\n* Reason for deletion. *\n************************\n*/\n  DeleteReason = 285,\n/*\n***************************************************************\n* Flag that identifies a market data entry. (Prior to FIX 4.3 *\n* this field was of type char)                                *\n***************************************************************\n*/\n  OpenCloseSettlFlag = 286,\n/*\n****************************************************************\n* Specifies the number of days that may elapse before delivery *\n* of the security                                              *\n****************************************************************\n*/\n  SellerDays = 287,\n/*\n***************************\n* Buying party in a trade *\n***************************\n*/\n  MDEntryBuyer = 288,\n/*\n****************************\n* Selling party in a trade *\n****************************\n*/\n  MDEntrySeller = 289,\n/*\n****************************************************************\n* Display position of a bid or offer, numbered from most       *\n* competitive to least competitive, per market side, beginning *\n* with .                                                       *\n****************************************************************\n*/\n  MDEntryPositionNo = 290,\n/*\n********************************************************\n* Identifies a firm's or a security's financial status *\n********************************************************\n*/\n  FinancialStatus = 291,\n/*\n********************************************\n* Identifies the type of Corporate Action. *\n********************************************\n*/\n  CorporateAction = 292,\n/*\n*********************\n* Default Bid Size. *\n*********************\n*/\n  DefBidSize = 293,\n/*\n***********************\n* Default Offer Size. *\n***********************\n*/\n  DefOfferSize = 294,\n/*\n***********************************************\n* The number of quote entries for a QuoteSet. *\n***********************************************\n*/\n  NoQuoteEntries = 295,\n/*\n************************************************\n* The number of sets of quotes in the message. *\n************************************************\n*/\n  NoQuoteSets = 296,\n/*\n*******************************************************\n* Identifies the status of the quote acknowledgement. *\n*******************************************************\n*/\n  QuoteStatus = 297,\n/*\n****************************************\n* Identifies the type of quote cancel. *\n****************************************\n*/\n  QuoteCancelType = 298,\n/*\n**************************************************************\n* Unique identifier for a quote. The QuoteEntryID stays with *\n* the quote as a static identifier even if the quote is      *\n* updated.                                                   *\n**************************************************************\n*/\n  QuoteEntryID = 299,\n/*\n******************************\n* Reason Quote was rejected: *\n******************************\n*/\n  QuoteRejectReason = 300,\n/*\n****************************************************************\n* Level of Response requested from receiver of quote messages. *\n* A default value should be bilaterally agreed.                *\n****************************************************************\n*/\n  QuoteResponseLevel = 301,\n/*\n********************************\n* Unique id for the Quote Set. *\n********************************\n*/\n  QuoteSetID = 302,\n/*\n*******************************************************\n* Indicates the type of Quote Request being generated *\n*******************************************************\n*/\n  QuoteRequestType = 303,\n/*\n*********************************************\n* Total number of quotes for the quote set. *\n*********************************************\n*/\n  TotNoQuoteEntries = 304,\n/*\n*************************************************\n* Underlying security's SecurityIDSource.       *\n* Valid values: see SecurityIDSource (22) field *\n*************************************************\n*/\n  UnderlyingSecurityIDSource = 305,\n/*\n*****************************************\n* Underlying security's Issuer.         *\n* See Issuer (06) field for description *\n*****************************************\n*/\n  UnderlyingIssuer = 306,\n/*\n*******************************************\n* Description of the Underlying security. *\n* See SecurityDesc(107).                  *\n*******************************************\n*/\n  UnderlyingSecurityDesc = 307,\n/*\n**********************************************************\n* Underlying security's SecurityExchange. Can be used to *\n* identify the underlying security.                      *\n* Valid values: see SecurityExchange (207)               *\n**********************************************************\n*/\n  UnderlyingSecurityExchange = 308,\n/*\n*********************************************\n* Underlying security's SecurityID.         *\n* See SecurityID (48) field for description *\n*********************************************\n*/\n  UnderlyingSecurityID = 309,\n/*\n***************************************************************\n* Underlying security's SecurityType.                         *\n* Valid values: see SecurityType (167) field                  *\n* (see below for details concerning this fields use in        *\n* conjunction with SecurityType=REPO)                         *\n* The following applies when used in conjunction with         *\n* SecurityType=REPO                                           *\n* Represents the general or specific type of security that    *\n* underlies a financing agreement                             *\n* Valid values for SecurityType=REPO:                         *\n* If bonds of a particular issuer or country are wanted in an *\n* Order or are in the basket of an Execution and the          *\n* SecurityType is not granular enough, include the            *\n* UnderlyingIssuer (306), UnderlyingCountryOfIssue (592),     *\n* UnderlyingProgram, UnderlyingRegType and/or <               *\n* UnderlyingStipulations > block e.g.:                        *\n***************************************************************\n*/\n  UnderlyingSecurityType = 310,\n/*\n*****************************************\n* Underlying security's Symbol.         *\n* See Symbol (55) field for description *\n*****************************************\n*/\n  UnderlyingSymbol = 311,\n/*\n********************************************\n* Underlying security's SymbolSfx.         *\n* See SymbolSfx (65) field for description *\n********************************************\n*/\n  UnderlyingSymbolSfx = 312,\n/*\n*************************************************************\n* Underlying security's MaturityMonthYear. Can be used with *\n* standardized derivatives vs. the UnderlyingMaturityDate   *\n* (542) field.                                              *\n* See MaturityMonthYear (200) field for description         *\n*************************************************************\n*/\n  UnderlyingMaturityMonthYear = 313,\n/*\n*****************************************************\n* Put or call indicator of the underlying security. *\n* See PutOrCall(201).                               *\n*****************************************************\n*/\n  UnderlyingPutOrCall = 315,\n/*\n***********************************************\n* Underlying security's StrikePrice.          *\n* See StrikePrice (202) field for description *\n***********************************************\n*/\n  UnderlyingStrikePrice = 316,\n/*\n************************************************\n* Underlying security's OptAttribute.          *\n* See OptAttribute (206) field for description *\n************************************************\n*/\n  UnderlyingOptAttribute = 317,\n/*\n***********************************************************\n* Underlying security's Currency.                         *\n* See Currency (5) field for description and valid values *\n***********************************************************\n*/\n  UnderlyingCurrency = 318,\n/*\n***********************************************\n* Unique ID of a Security Definition Request. *\n***********************************************\n*/\n  SecurityReqID = 320,\n/*\n****************************************\n* Type of Security Definition Request. *\n****************************************\n*/\n  SecurityRequestType = 321,\n/*\n***********************************************\n* Unique ID of a Security Definition message. *\n***********************************************\n*/\n  SecurityResponseID = 322,\n/*\n*************************************************\n* Type of Security Definition message response. *\n*************************************************\n*/\n  SecurityResponseType = 323,\n/*\n***************************************************\n* Unique ID of a Security Status Request message. *\n***************************************************\n*/\n  SecurityStatusReqID = 324,\n/*\n**************************************************************\n* Indicates whether or not message is being sent as a result *\n* of a subscription request or not.                          *\n**************************************************************\n*/\n  UnsolicitedIndicator = 325,\n/*\n****************************************************************\n* Identifies the trading status applicable to the transaction. *\n****************************************************************\n*/\n  SecurityTradingStatus = 326,\n/*\n*************************************************************\n* Denotes the reason for the Opening Delay or Trading Halt. *\n*************************************************************\n*/\n  HaltReason = 327,\n/*\n*************************************************************\n* Indicates whether or not the halt was due to Common Stock *\n* trading being halted.                                     *\n*************************************************************\n*/\n  InViewOfCommon = 328,\n/*\n************************************************************\n* Indicates whether or not the halt was due to the Related *\n* Security being halted.                                   *\n************************************************************\n*/\n  DueToRelated = 329,\n/*\n********************\n* Quantity bought. *\n********************\n*/\n  BuyVolume = 330,\n/*\n******************\n* Quantity sold. *\n******************\n*/\n  SellVolume = 331,\n/*\n***************************************************************\n* Represents an indication of the high end of the price range *\n* for a security prior to the open or reopen                  *\n***************************************************************\n*/\n  HighPx = 332,\n/*\n**************************************************************\n* Represents an indication of the low end of the price range *\n* for a security prior to the open or reopen                 *\n**************************************************************\n*/\n  LowPx = 333,\n/*\n**************************************\n* Identifies the type of adjustment. *\n**************************************\n*/\n  Adjustment = 334,\n/*\n**************************************************\n* Unique ID of a Trading Session Status message. *\n**************************************************\n*/\n  TradSesReqID = 335,\n/*\n***************************************************************\n* Identifier for Trading Session                              *\n* A trading session spans an extended period of time that can *\n* also be expressed informally in terms of the trading day.   *\n* Usage is determined by market or counterparties.            *\n* To specify good for session where session spans more than   *\n* one calendar day, use TimeInForce = Day in conjunction with *\n* TradingSessionID.                                           *\n* Bilaterally agreed values of data type \"String\" that start  *\n* with a character can be used for backward compatibility.    *\n***************************************************************\n*/\n  TradingSessionID = 336,\n/*\n******************************************************\n* Identifies the trader (e.g. \"badge number\") of the *\n* ContraBroker.                                      *\n******************************************************\n*/\n  ContraTrader = 337,\n/*\n*********************\n* Method of trading *\n*********************\n*/\n  TradSesMethod = 338,\n/*\n************************\n* Trading Session Mode *\n************************\n*/\n  TradSesMode = 339,\n/*\n*********************************\n* State of the trading session. *\n*********************************\n*/\n  TradSesStatus = 340,\n/*\n****************************************\n* Starting time of the trading session *\n****************************************\n*/\n  TradSesStartTime = 341,\n/*\n**********************************************\n* Time of the opening of the trading session *\n**********************************************\n*/\n  TradSesOpenTime = 342,\n/*\n*************************************************\n* Time of the pre-closed of the trading session *\n*************************************************\n*/\n  TradSesPreCloseTime = 343,\n/*\n***************************************\n* Closing time of the trading session *\n***************************************\n*/\n  TradSesCloseTime = 344,\n/*\n***********************************\n* End time of the trading session *\n***********************************\n*/\n  TradSesEndTime = 345,\n/*\n***********************************\n* Number of orders in the market. *\n***********************************\n*/\n  NumberOfOrders = 346,\n/*\n*****************************************************\n* Type of message encoding (non-ASCII (non-English) *\n* characters) used in a message's \"Encoded\" fields. *\n*****************************************************\n*/\n  MessageEncoding = 347,\n/*\n***************************************************************\n* Byte length of encoded (non-ASCII characters) EncodedIssuer *\n* (349) field.                                                *\n***************************************************************\n*/\n  EncodedIssuerLen = 348,\n/*\n****************************************************************\n* Encoded (non-ASCII characters) representation of the Issuer  *\n* field in the encoded format specified via the                *\n* MessageEncoding (347) field. If used, the ASCII (English)    *\n* representation should also be specified in the Issuer field. *\n****************************************************************\n*/\n  EncodedIssuer = 349,\n/*\n*************************************************\n* Byte length of encoded (non-ASCII characters) *\n* EncodedSecurityDesc (351) field.              *\n*************************************************\n*/\n  EncodedSecurityDescLen = 350,\n/*\n****************************************************************\n* Encoded (non-ASCII characters) representation of the         *\n* SecurityDesc (107) field in the encoded format specified via *\n* the MessageEncoding (347) field. If used, the ASCII          *\n* (English) representation should also be specified in the     *\n* SecurityDesc field.                                          *\n****************************************************************\n*/\n  EncodedSecurityDesc = 351,\n/*\n*************************************************\n* Byte length of encoded (non-ASCII characters) *\n* EncodedListExecInst (353) field.              *\n*************************************************\n*/\n  EncodedListExecInstLen = 352,\n/*\n***************************************************************\n* Encoded (non-ASCII characters) representation of the        *\n* ListExecInst (69) field in the encoded format specified via *\n* the MessageEncoding (347) field. If used, the ASCII         *\n* (English) representation should also be specified in the    *\n* ListExecInst field.                                         *\n***************************************************************\n*/\n  EncodedListExecInst = 353,\n/*\n*************************************************************\n* Byte length of encoded (non-ASCII characters) EncodedText *\n* (355) field.                                              *\n*************************************************************\n*/\n  EncodedTextLen = 354,\n/*\n**************************************************************\n* Encoded (non-ASCII characters) representation of the Text  *\n* (58) field in the encoded format specified via the         *\n* MessageEncoding (347) field. If used, the ASCII (English)  *\n* representation should also be specified in the Text field. *\n**************************************************************\n*/\n  EncodedText = 355,\n/*\n****************************************************************\n* Byte length of encoded (non-ASCII characters) EncodedSubject *\n* (357) field.                                                 *\n****************************************************************\n*/\n  EncodedSubjectLen = 356,\n/*\n****************************************************************\n* Encoded (non-ASCII characters) representation of the Subject *\n* (147) field in the encoded format specified via the          *\n* MessageEncoding (347) field. If used, the ASCII (English)    *\n* representation should also be specified in the Subject       *\n* field.                                                       *\n****************************************************************\n*/\n  EncodedSubject = 357,\n/*\n*************************************************\n* Byte length of encoded (non-ASCII characters) *\n* EncodedHeadline (359) field.                  *\n*************************************************\n*/\n  EncodedHeadlineLen = 358,\n/*\n****************************************************************\n* Encoded (non-ASCII characters) representation of the         *\n* Headline (148) field in the encoded format specified via the *\n* MessageEncoding (347) field. If used, the ASCII (English)    *\n* representation should also be specified in the Headline      *\n* field.                                                       *\n****************************************************************\n*/\n  EncodedHeadline = 359,\n/*\n*************************************************\n* Byte length of encoded (non-ASCII characters) *\n* EncodedAllocText (361) field.                 *\n*************************************************\n*/\n  EncodedAllocTextLen = 360,\n/*\n*************************************************************\n* Encoded (non-ASCII characters) representation of the      *\n* AllocText (161) field in the encoded format specified via *\n* the MessageEncoding (347) field. If used, the ASCII       *\n* (English) representation should also be specified in the  *\n* AllocText field.                                          *\n*************************************************************\n*/\n  EncodedAllocText = 361,\n/*\n*************************************************\n* Byte length of encoded (non-ASCII characters) *\n* EncodedUnderlyingIssuer (363) field.          *\n*************************************************\n*/\n  EncodedUnderlyingIssuerLen = 362,\n/*\n****************************************************************\n* Encoded (non-ASCII characters) representation of the         *\n* UnderlyingIssuer (306) field in the encoded format specified *\n* via the MessageEncoding (347) field. If used, the ASCII      *\n* (English) representation should also be specified in the     *\n* UnderlyingIssuer field.                                      *\n****************************************************************\n*/\n  EncodedUnderlyingIssuer = 363,\n/*\n*************************************************\n* Byte length of encoded (non-ASCII characters) *\n* EncodedUnderlyingSecurityDesc (365) field.    *\n*************************************************\n*/\n  EncodedUnderlyingSecurityDescLen = 364,\n/*\n***************************************************************\n* Encoded (non-ASCII characters) representation of the        *\n* UnderlyingSecurityDesc (307) field in the encoded format    *\n* specified via the MessageEncoding (347) field. If used, the *\n* ASCII (English) representation should also be specified in  *\n* the UnderlyingSecurityeDesc field.                          *\n***************************************************************\n*/\n  EncodedUnderlyingSecurityDesc = 365,\n/*\n****************************************************************\n* Executed price for an AllocAccount (79) entry used when      *\n* using \"executed price\" vs. \"average price\" allocations (e.g. *\n* Japan).                                                      *\n****************************************************************\n*/\n  AllocPrice = 366,\n/*\n**************************************************************\n* Indicates expiration time of this particular QuoteSet      *\n* (always expressed in UTC (Universal Time Coordinated, also *\n* known as \"GMT\")                                            *\n**************************************************************\n*/\n  QuoteSetValidUntilTime = 367,\n/*\n************************************\n* Reason Quote Entry was rejected: *\n************************************\n*/\n  QuoteEntryRejectReason = 368,\n/*\n****************************************************************\n* The last MsgSeqNum (34) value received by the FIX engine and *\n* processed by downstream application, such as trading engine  *\n* or order routing system. Can be specified on every message   *\n* sent. Useful for detecting a backlog with a counterparty.    *\n****************************************************************\n*/\n  LastMsgSeqNumProcessed = 369,\n/*\n*****************************************************\n* The tag number of the FIX field being referenced. *\n*****************************************************\n*/\n  RefTagID = 371,\n/*\n*********************************************************\n* The MsgType (35) of the FIX message being referenced. *\n*********************************************************\n*/\n  RefMsgType = 372,\n/*\n***************************************************************\n* Code to identify reason for a session-level Reject message. *\n***************************************************************\n*/\n  SessionRejectReason = 373,\n/*\n********************************************\n* Identifies the Bid Request message type. *\n********************************************\n*/\n  BidRequestTransType = 374,\n/*\n********************************************************\n* Identifies contra broker. Standard NASD market-maker *\n* mnemonic is preferred.                               *\n********************************************************\n*/\n  ContraBroker = 375,\n/*\n********************************************************\n* ID used to represent this transaction for compliance *\n* purposes (e.g. OATS reporting).                      *\n********************************************************\n*/\n  ComplianceID = 376,\n/*\n*****************************************************\n* Indicates whether or not the order was solicited. *\n*****************************************************\n*/\n  SolicitedFlag = 377,\n/*\n************************************************************\n* Code to identify reason for an ExecutionRpt message sent *\n* with ExecType=Restated or used when communicating an     *\n* unsolicited cancel.                                      *\n************************************************************\n*/\n  ExecRestatementReason = 378,\n/*\n*************************************************************\n* The value of the business-level \"ID\" field on the message *\n* being referenced.                                         *\n*************************************************************\n*/\n  BusinessRejectRefID = 379,\n/*\n*********************************************************\n* Code to identify reason for a Business Message Reject *\n* message.                                              *\n*********************************************************\n*/\n  BusinessRejectReason = 380,\n/*\n****************************************************************\n* Total amount traded (i.e. quantity * price) expressed in     *\n* units of currency. For FX Futures this is used to express    *\n* the notional value of a fill when quantity fields are        *\n* expressed in terms of contract size (i.e. quantity * price * *\n* contract size).                                              *\n****************************************************************\n*/\n  GrossTradeAmt = 381,\n/*\n*********************************************\n* The number of ContraBroker (375) entries. *\n*********************************************\n*/\n  NoContraBrokers = 382,\n/*\n***********************************************************\n* Maximum number of bytes supported for a single message. *\n***********************************************************\n*/\n  MaxMessageSize = 383,\n/*\n***********************************************\n* Number of MsgTypes (35) in repeating group. *\n***********************************************\n*/\n  NoMsgTypes = 384,\n/*\n********************************************\n* Specifies the direction of the messsage. *\n********************************************\n*/\n  MsgDirection = 385,\n/*\n*********************************************************\n* Number of TradingSessionIDs (336) in repeating group. *\n*********************************************************\n*/\n  NoTradingSessions = 386,\n/*\n***********************************\n* Total volume (quantity) traded. *\n***********************************\n*/\n  TotalVolumeTraded = 387,\n/*\n***************************************************************\n* Code to identify the price a DiscretionOffsetValue (389) is *\n* related to and should be mathematically added to.           *\n***************************************************************\n*/\n  DiscretionInst = 388,\n/*\n*************************************************************\n* Amount (signed) added to the \"related to\" price specified *\n* via DiscretionInst (388), in the context of               *\n* DiscretionOffsetType (842)                                *\n* (Prior to FIX 4.4 this field was of type PriceOffset)     *\n*************************************************************\n*/\n  DiscretionOffsetValue = 389,\n/*\n***************************************************************\n* Unique identifier for Bid Response as assigned by sell-side *\n* (broker, exchange, ECN). Uniqueness must be guaranteed      *\n* within a single trading day.                                *\n***************************************************************\n*/\n  BidID = 390,\n/*\n**************************************************************\n* Unique identifier for a Bid Request as assigned by         *\n* institution. Uniqueness must be guaranteed within a single *\n* trading day.                                               *\n**************************************************************\n*/\n  ClientBidID = 391,\n/*\n************************************\n* Descriptive name for list order. *\n************************************\n*/\n  ListName = 392,\n/*\n**************************************************************\n* Total number of securities.                                *\n* (Prior to FIX 4.4 this field was named TotalNumSecurities) *\n**************************************************************\n*/\n  TotNoRelatedSym = 393,\n/*\n*********************************************\n* Code to identify the type of Bid Request. *\n*********************************************\n*/\n  BidType = 394,\n/*\n****************************\n* Total number of tickets. *\n****************************\n*/\n  NumTickets = 395,\n/*\n***********************\n* Amounts in currency *\n***********************\n*/\n  SideValue1 = 396,\n/*\n***********************\n* Amounts in currency *\n***********************\n*/\n  SideValue2 = 397,\n/*\n******************************************\n* Number of BidDescriptor (400) entries. *\n******************************************\n*/\n  NoBidDescriptors = 398,\n/*\n*****************************************************\n* Code to identify the type of BidDescriptor (400). *\n*****************************************************\n*/\n  BidDescriptorType = 399,\n/*\n************************************************************\n* BidDescriptor value. Usage depends upon BidDescriptorTyp *\n* (399).                                                   *\n* If BidDescriptorType = 1                                 *\n* Industrials etc - Free text                              *\n* If BidDescriptorType = 2                                 *\n* \"FR\" etc - ISO Country Codes                             *\n* If BidDescriptorType = 3                                 *\n* FT00, FT250, STOX - Free text                            *\n************************************************************\n*/\n  BidDescriptor = 400,\n/*\n****************************************************************\n* Code to identify which \"SideValue\" the value refers to.      *\n* SideValue1 and SideValue2 are used as opposed to Buy or Sell *\n* so that the basket can be quoted either way as Buy or Sell.  *\n****************************************************************\n*/\n  SideValueInd = 401,\n/*\n************************************************************\n* Liquidity indicator or lower limit if TotalNumSecurities *\n* (393) > 1. Represented as a percentage.                  *\n************************************************************\n*/\n  LiquidityPctLow = 402,\n/*\n**************************************************************\n* Upper liquidity indicator if TotalNumSecurities (393) > 1. *\n* Represented as a percentage.                               *\n**************************************************************\n*/\n  LiquidityPctHigh = 403,\n/*\n************************************************************\n* Value between LiquidityPctLow (402) and LiquidityPctHigh *\n* (403) in Currency                                        *\n************************************************************\n*/\n  LiquidityValue = 404,\n/*\n************************************************************\n* Eg Used in EFP trades 2% (EFP - Exchange for Physical ). *\n* Represented as a percentage.                             *\n************************************************************\n*/\n  EFPTrackingError = 405,\n/*\n**********************\n* Used in EFP trades *\n**********************\n*/\n  FairValue = 406,\n/*\n****************************************************\n* Used in EFP trades. Represented as a percentage. *\n****************************************************\n*/\n  OutsideIndexPct = 407,\n/*\n**********************\n* Used in EFP trades *\n**********************\n*/\n  ValueOfFutures = 408,\n/*\n*****************************************************\n* Code to identify the type of liquidity indicator. *\n*****************************************************\n*/\n  LiquidityIndType = 409,\n/*\n**********************************************************\n* Overall weighted average liquidity expressed as a % of *\n* average daily volume. Represented as a percentage.     *\n**********************************************************\n*/\n  WtAverageLiquidity = 410,\n/*\n******************************************************\n* Indicates whether or not to exchange for phsyical. *\n******************************************************\n*/\n  ExchangeForPhysical = 411,\n/*\n*******************************\n* Value of stocks in Currency *\n*******************************\n*/\n  OutMainCntryUIndex = 412,\n/*\n***************************************************************\n* Percentage of program that crosses in Currency. Represented *\n* as a percentage.                                            *\n***************************************************************\n*/\n  CrossPercent = 413,\n/*\n***************************************************************\n* Code to identify the desired frequency of progress reports. *\n***************************************************************\n*/\n  ProgRptReqs = 414,\n/*\n**********************************************************\n* Time in minutes between each ListStatus report sent by *\n* SellSide. Zero means don't send status.                *\n**********************************************************\n*/\n  ProgPeriodInterval = 415,\n/*\n****************************************************************\n* Code to represent whether value is net (inclusive of tax) or *\n* gross.                                                       *\n****************************************************************\n*/\n  IncTaxInd = 416,\n/*\n*****************************************************\n* Indicates the total number of bidders on the list *\n*****************************************************\n*/\n  NumBidders = 417,\n/*\n*******************************************************\n* Code to represent the type of trade.                *\n* (Prior to FIX 4.4 this field was named \"TradeType\") *\n*******************************************************\n*/\n  BidTradeType = 418,\n/*\n*******************************************\n* Code to represent the basis price type. *\n*******************************************\n*/\n  BasisPxType = 419,\n/*\n*****************************************\n* Indicates the number of list entries. *\n*****************************************\n*/\n  NoBidComponents = 420,\n/*\n*****************************\n* ISO Country Code in field *\n*****************************\n*/\n  Country = 421,\n/*\n***************************************************************\n* Total number of strike price entries across all messages.   *\n* Should be the sum of all NoStrikes (428) in each message    *\n* that has repeating strike price entries related to the same *\n* ListID (66). Used to support fragmentation.                 *\n***************************************************************\n*/\n  TotNoStrikes = 422,\n/*\n***************************************************************\n* Code to represent the price type.                           *\n* (For Financing transactions PriceType implies the \"repo     *\n* type\" - Fixed or Floating - 9 (Yield) or 6 (Spread)         *\n* respectively - and Price (44) gives the corresponding \"repo *\n* rate\".                                                      *\n* See Volume : \"Glossary\" for further value definitions)      *\n***************************************************************\n*/\n  PriceType = 423,\n/*\n****************************************************************\n* For GT orders, the OrderQty (38) less all quantity (adjusted *\n* for stock splits) that traded on previous days. DayOrderQty  *\n* (424) = OrderQty - (CumQty (14) - DayCumQty (425))           *\n****************************************************************\n*/\n  DayOrderQty = 424,\n/*\n*************************************************\n* Quantity on a GT order that has traded today. *\n*************************************************\n*/\n  DayCumQty = 425,\n/*\n****************************************************************\n* The average price for quantity on a GT order that has traded *\n* today.                                                       *\n****************************************************************\n*/\n  DayAvgPx = 426,\n/*\n********************************************************\n* Code to identify whether to book out executions on a *\n* part-filled GT order on the day of execution or to   *\n* accumulate.                                          *\n********************************************************\n*/\n  GTBookingInst = 427,\n/*\n****************************************\n* Number of list strike price entries. *\n****************************************\n*/\n  NoStrikes = 428,\n/*\n**************************************\n* Code to represent the status type. *\n**************************************\n*/\n  ListStatusType = 429,\n/*\n****************************************************************\n* Code to represent whether value is net (inclusive of tax) or *\n* gross.                                                       *\n****************************************************************\n*/\n  NetGrossInd = 430,\n/*\n*************************************************\n* Code to represent the status of a list order. *\n*************************************************\n*/\n  ListOrderStatus = 431,\n/*\n****************************************************************\n* Date of order expiration (last day the order can trade),     *\n* always expressed in terms of the local market date. The time *\n* at which the order expires is determined by the local        *\n* market's business practices                                  *\n****************************************************************\n*/\n  ExpireDate = 432,\n/*\n*********************************************\n* Identifies the type of ListExecInst (69). *\n*********************************************\n*/\n  ListExecInstType = 433,\n/*\n*************************************************************\n* Identifies the type of request that a Cancel Reject is in *\n* response to.                                              *\n*************************************************************\n*/\n  CxlRejResponseTo = 434,\n/*\n**********************************************\n* Underlying security's CouponRate.          *\n* See CouponRate (223) field for description *\n**********************************************\n*/\n  UnderlyingCouponRate = 435,\n/*\n******************************************************\n* Underlying security's ContractMultiplier.          *\n* See ContractMultiplier (231) field for description *\n******************************************************\n*/\n  UnderlyingContractMultiplier = 436,\n/*\n************************************************\n* Quantity traded with the ContraBroker (375). *\n************************************************\n*/\n  ContraTradeQty = 437,\n/*\n****************************************************************\n* Identifes the time of the trade with the ContraBroker (375). *\n* (always expressed in UTC (Universal Time Coordinated, also   *\n* known as \"GMT\")                                              *\n****************************************************************\n*/\n  ContraTradeTime = 438,\n/*\n*********************************************************\n* Number of Securites between LiquidityPctLow (402) and *\n* LiquidityPctHigh (403) in Currency.                   *\n*********************************************************\n*/\n  LiquidityNumSecurities = 441,\n/*\n**************************************************************\n* Used to indicate what an Execution Report represents (e.g. *\n* used with multi-leg securities, such as option strategies, *\n* spreads, etc.).                                            *\n**************************************************************\n*/\n  MultiLegReportingType = 442,\n/*\n*******************************************************\n* The time at which current market prices are used to *\n* determine the value of a basket.                    *\n*******************************************************\n*/\n  StrikeTime = 443,\n/*\n***************************************************\n* Free format text string related to List Status. *\n***************************************************\n*/\n  ListStatusText = 444,\n/*\n*************************************************\n* Byte length of encoded (non-ASCII characters) *\n* EncodedListStatusText (446) field.            *\n*************************************************\n*/\n  EncodedListStatusTextLen = 445,\n/*\n**************************************************************\n* Encoded (non-ASCII characters) representation of the       *\n* ListStatusText (444) field in the encoded format specified *\n* via the MessageEncoding (347) field. If used, the ASCII    *\n* (English) representation should also be specified in the   *\n* ListStatusText field.                                      *\n**************************************************************\n*/\n  EncodedListStatusText = 446,\n/*\n*************************************************************\n* Identifies class or source of the PartyID (448) value.    *\n* Required if PartyID is specified. Note: applicable values *\n* depend upon PartyRole (452) specified.                    *\n* See \"Appendix 6-G - Use of <Parties> Component Block\"     *\n*************************************************************\n*/\n  PartyIDSource = 447,\n/*\n****************************************************************\n* Party identifier/code. See PartyIDSource (447) and PartyRole *\n* (452).                                                       *\n* See \"Appendix 6-G - Use of <Parties> Component Block\"        *\n****************************************************************\n*/\n  PartyID = 448,\n/*\n****************************************************************\n* Net change from previous day's closing price vs. last traded *\n* price.                                                       *\n****************************************************************\n*/\n  NetChgPrevDay = 451,\n/*\n***************************************************************\n* Identifies the type or role of the PartyID (448) specified. *\n* See \"Appendix 6-G - Use of <Parties> Component Block\"       *\n* (see Volume : \"Glossary\" for value definitions)             *\n***************************************************************\n*/\n  PartyRole = 452,\n/*\n***************************************************************\n* Number of PartyID (448), PartyIDSource (447), and PartyRole *\n* (452) entries                                               *\n***************************************************************\n*/\n  NoPartyIDs = 453,\n/*\n******************************************\n* Number of SecurityAltID (455) entries. *\n******************************************\n*/\n  NoSecurityAltID = 454,\n/*\n************************************************************\n* Alternate Security identifier value for this security of *\n* SecurityAltIDSource (456) type (e.g. CUSIP, SEDOL, ISIN, *\n* etc). Requires SecurityAltIDSource.                      *\n************************************************************\n*/\n  SecurityAltID = 455,\n/*\n****************************************************************\n* Identifies class or source of the SecurityAltID (455) value. *\n* Required if SecurityAltID is specified.                      *\n* Valid values:                                                *\n* Same valid values as the SecurityIDSource (22) field         *\n****************************************************************\n*/\n  SecurityAltIDSource = 456,\n/*\n****************************************************\n* Number of UnderlyingSecurityAltID (458) entries. *\n****************************************************\n*/\n  NoUnderlyingSecurityAltID = 457,\n/*\n**************************************************************\n* Alternate Security identifier value for this underlying    *\n* security of UnderlyingSecurityAltIDSource (459) type (e.g. *\n* CUSIP, SEDOL, ISIN, etc). Requires                         *\n* UnderlyingSecurityAltIDSource.                             *\n**************************************************************\n*/\n  UnderlyingSecurityAltID = 458,\n/*\n*************************************************************\n* Identifies class or source of the UnderlyingSecurityAltID *\n* (458) value. Required if UnderlyingSecurityAltID is       *\n* specified.                                                *\n* Valid values:                                             *\n* Same valid values as the SecurityIDSource (22) field      *\n*************************************************************\n*/\n  UnderlyingSecurityAltIDSource = 459,\n/*\n************************************************************\n* Indicates the type of product the security is associated *\n* with. See also the CFICode (461) and SecurityType (167)  *\n* fields.                                                  *\n************************************************************\n*/\n  Product = 460,\n/*\n***************************************************************\n* Indicates the type of security using ISO 10962 standard,    *\n* Classification of Financial Instruments (CFI code) values.  *\n* ISO 10962 is maintained by ANNA (Association of National    *\n* Numbering Agencies) acting as Registration Authority. See   *\n* \"Appendix 6-B FIX Fields Based Upon Other Standards\". See   *\n* also the Product (460) and SecurityType (167) fields. It is *\n* recommended that CFICode be used instead of SecurityType    *\n* (167) for non-Fixed Income instruments.                     *\n* A subset of possible values applicable to FIX usage are     *\n* identified in \"Appendix 6-D CFICode Usage - ISO 10962       *\n* Classification of Financial Instruments (CFI code)\"         *\n***************************************************************\n*/\n  CFICode = 461,\n/*\n****************************************\n* Underlying security's Product.       *\n* Valid values: see Product(460) field *\n****************************************\n*/\n  UnderlyingProduct = 462,\n/*\n*****************************************\n* Underlying security's CFICode.        *\n* Valid values: see CFICode (461) field *\n*****************************************\n*/\n  UnderlyingCFICode = 463,\n/*\n***************************************************************\n* Indicates whether or not this FIX Session is a \"test\" vs.   *\n* \"production\" connection. Useful for preventing \"accidents\". *\n***************************************************************\n*/\n  TestMessageIndicator = 464,\n/*\n***********************************************************\n* Common reference passed to a post-trade booking process *\n* (e.g. industry matching utility).                       *\n***********************************************************\n*/\n  BookingRefID = 466,\n/*\n************************************************************\n* Unique identifier for a specific NoAllocs (78) repeating *\n* group instance (e.g. for an AllocAccount).               *\n************************************************************\n*/\n  IndividualAllocID = 467,\n/*\n****************************************************************\n* Specifies which direction to round For CIV - indicates       *\n* whether or not the quantity of shares/units is to be rounded *\n* and in which direction where CashOrdQty (152) or (for CIV    *\n* only) OrderPercent (516) are specified on an order.          *\n* The default is for rounding to be at the discretion of the   *\n* executing broker or fund manager.                            *\n* e.g. for an order specifying CashOrdQty or OrderPercent if   *\n* the calculated number of shares/units was 325.76 and         *\n* RoundingModulus (469) was 0 - \"round down\" would give 320    *\n* units, 1 - \"round up\" would give 330 units and \"round to     *\n* nearest\" would give 320 units.                               *\n****************************************************************\n*/\n  RoundingDirection = 468,\n/*\n****************************************************************\n* For CIV - a float value indicating the value to which        *\n* rounding is required.                                        *\n* i.e. 0 means round to a multiple of 0 units/shares; 0.5      *\n* means round to a multiple of 0.5 units/shares.               *\n* The default, if RoundingDirection (468) is specified without *\n* RoundingModulus, is to round to a whole unit/share.          *\n****************************************************************\n*/\n  RoundingModulus = 469,\n/*\n***************************************************************\n* ISO Country code of instrument issue (e.g. the country      *\n* portion typically used in ISIN). Can be used in conjunction *\n* with non-ISIN SecurityID (48) (e.g. CUSIP for Municipal     *\n* Bonds without ISIN) to provide uniqueness.                  *\n***************************************************************\n*/\n  CountryOfIssue = 470,\n/*\n***************************************************\n* A two-character state or province abbreviation. *\n***************************************************\n*/\n  StateOrProvinceOfIssue = 471,\n/*\n***************************************************************\n* Identifies the locale. For Municipal Security Issuers other *\n* than state or province. Refer to                            *\n* http://www.atmos.albany.edu/cgi/stagrep-cgi                 *\n* Reference the IATA city codes for values.                   *\n* Note IATA (International Air Transport Association)         *\n* maintains the codes at www.iata.org.                        *\n***************************************************************\n*/\n  LocaleOfIssue = 472,\n/*\n********************************************************\n* The number of registration details on a Registration *\n* Instructions message                                 *\n********************************************************\n*/\n  NoRegistDtls = 473,\n/*\n*************************************************************\n* Set of Correspondence address details, possibly including *\n* phone, fax, etc.                                          *\n*************************************************************\n*/\n  MailingDtls = 474,\n/*\n************************************************************\n* The ISO 366 Country code (2 character) identifying which *\n* country the beneficial investor is resident for tax      *\n* purposes.                                                *\n************************************************************\n*/\n  InvestorCountryOfResidence = 475,\n/*\n**********************************************************\n* \"Settlement Payment Reference\" - A free format Payment *\n* reference to assist with reconciliation, e.g. a Client *\n* and/or Order ID number.                                *\n**********************************************************\n*/\n  PaymentRef = 476,\n/*\n****************************************************************\n* A code identifying the payment method for a (fractional)     *\n* distribution.                                                *\n* 13 through 998 are reserved for future use                   *\n* Values above 1000 are available for use by private agreement *\n* among counterparties                                         *\n****************************************************************\n*/\n  DistribPaymentMethod = 477,\n/*\n************************************************************\n* Specifies currency to be used for Cash Distributions see *\n* \"Appendix 6-A Valid Currency Codes\".                     *\n************************************************************\n*/\n  CashDistribCurr = 478,\n/*\n*************************************************************\n* Specifies currency to be use for Commission (12) if the   *\n* Commission currency is different from the Deal Currency - *\n* see \"Appendix 6-A; Valid Currency Codes\".                 *\n*************************************************************\n*/\n  CommCurrency = 479,\n/*\n******************************************************\n* For CIV - A one character code identifying whether *\n* Cancellation rights/Cooling off period applies.    *\n******************************************************\n*/\n  CancellationRights = 480,\n/*\n*************************************************************\n* A one character code identifying Money laundering status. *\n*************************************************************\n*/\n  MoneyLaunderingStatus = 481,\n/*\n***************************************************\n* Free format text to specify mailing instruction *\n* requirements, e.g. \"no third party mailings\".   *\n***************************************************\n*/\n  MailingInst = 482,\n/*\n***************************************************************\n* For CIV A date and time stamp to indicate the time a CIV    *\n* order was booked by the fund manager.                       *\n* For derivatives a date and time stamp to indicate when this *\n* order was booked with the agent prior to submission to the  *\n* VMU. Indicates the time at which the order was finalized    *\n* between the buyer and seller prior to submission.           *\n***************************************************************\n*/\n  TransBkdTime = 483,\n/*\n****************************************************************\n* For CIV - Identifies how the execution price LastPx (31) was *\n* calculated from the fund unit/share price(s) calculated at   *\n* the fund valuation point.                                    *\n****************************************************************\n*/\n  ExecPriceType = 484,\n/*\n****************************************************************\n* For CIV the amount or percentage by which the fund           *\n* unit/share price was adjusted, as indicated by ExecPriceType *\n* (484)                                                        *\n****************************************************************\n*/\n  ExecPriceAdjustment = 485,\n/*\n********************************************************\n* The date of birth applicable to the individual, e.g. *\n* required to open some types of tax-exempt account.   *\n********************************************************\n*/\n  DateOfBirth = 486,\n/*\n****************************************************\n* Identifies Trade Report message transaction type *\n* (Prior to FIX 4.4 this field was of type char)   *\n****************************************************\n*/\n  TradeReportTransType = 487,\n/*\n****************************************************************\n* The name of the payment card holder as specified on the card *\n* being used for payment.                                      *\n****************************************************************\n*/\n  CardHolderName = 488,\n/*\n***********************************************************\n* The number of the payment card as specified on the card *\n* being used for payment.                                 *\n***********************************************************\n*/\n  CardNumber = 489,\n/*\n****************************************************************\n* The expiry date of the payment card as specified on the card *\n* being used for payment.                                      *\n****************************************************************\n*/\n  CardExpDate = 490,\n/*\n************************************************************\n* The issue number of the payment card as specified on the *\n* card being used for payment. This is only applicable to  *\n* certain types of card.                                   *\n************************************************************\n*/\n  CardIssNum = 491,\n/*\n****************************************************************\n* A code identifying the Settlement payment method. 16 through *\n* 998 are reserved for future use                              *\n* Values above 1000 are available for use by private agreement *\n* among counterparties                                         *\n****************************************************************\n*/\n  PaymentMethod = 492,\n/*\n**************************************************************\n* For CIV - a fund manager-defined code identifying which of *\n* the fund manager's account types is required.              *\n**************************************************************\n*/\n  RegistAcctType = 493,\n/*\n****************************************************************\n* Free format text defining the designation to be associated   *\n* with a holding on the register. Used to identify assets of a *\n* specific underlying investor using a common registration,    *\n* e.g. a broker's nominee or street name.                      *\n****************************************************************\n*/\n  Designation = 494,\n/*\n****************************************************************\n* For CIV - a code identifying the type of tax exempt account  *\n* in which purchased shares/units are to be held.              *\n* 30 - 998 are reserved for future use by recognized taxation  *\n* authorities                                                  *\n* 999=Other                                                    *\n* values above 1000 are available for use by private agreement *\n* among counterparties                                         *\n****************************************************************\n*/\n  TaxAdvantageType = 495,\n/*\n****************************************************************\n* Text indicating reason(s) why a Registration Instruction has *\n* been rejected.                                               *\n****************************************************************\n*/\n  RegistRejReasonText = 496,\n/*\n***********************************************************\n* A one character code identifying whether the Fund based *\n* renewal commission is to be waived.                     *\n***********************************************************\n*/\n  FundRenewWaiv = 497,\n/*\n******************************************************\n* Name of local agent bank if for cash distributions *\n******************************************************\n*/\n  CashDistribAgentName = 498,\n/*\n***************************************************************\n* BIC (Bank Identification Code--Swift managed) code of agent *\n* bank for cash distributions                                 *\n***************************************************************\n*/\n  CashDistribAgentCode = 499,\n/*\n***************************************************\n* Account number at agent bank for distributions. *\n***************************************************\n*/\n  CashDistribAgentAcctNumber = 500,\n/*\n***************************************************************\n* Free format Payment reference to assist with reconciliation *\n* of distributions.                                           *\n***************************************************************\n*/\n  CashDistribPayRef = 501,\n/*\n****************************************************\n* Name of account at agent bank for distributions. *\n****************************************************\n*/\n  CashDistribAgentAcctName = 502,\n/*\n*************************************************************\n* The start date of the card as specified on the card being *\n* used for payment.                                         *\n*************************************************************\n*/\n  CardStartDate = 503,\n/*\n**********************************************************\n* The date written on a cheque or date payment should be *\n* submitted to the relevant clearing system.             *\n**********************************************************\n*/\n  PaymentDate = 504,\n/*\n****************************************************************\n* Identifies sender of a payment, e.g. the payment remitter or *\n* a customer reference number.                                 *\n****************************************************************\n*/\n  PaymentRemitterID = 505,\n/*\n**************************************************************\n* Registration status as returned by the broker or (for CIV) *\n* the fund manager:                                          *\n**************************************************************\n*/\n  RegistStatus = 506,\n/*\n**************************************************************\n* Reason(s) why Registration Instructions has been rejected. *\n* The reason may be further amplified in the                 *\n* RegistRejReasonCode field.                                 *\n* Possible values of reason code include:                    *\n**************************************************************\n*/\n  RegistRejReasonCode = 507,\n/*\n**************************************************************\n* Reference identifier for the RegistID (53) with Cancel and *\n* Replace RegistTransType (54) transaction types.            *\n**************************************************************\n*/\n  RegistRefID = 508,\n/*\n**********************************************************\n* Set of Registration name and address details, possibly *\n* including phone, fax etc.                              *\n**********************************************************\n*/\n  RegistDtls = 509,\n/*\n*************************************************************\n* The number of Distribution Instructions on a Registration *\n* Instructions message                                      *\n*************************************************************\n*/\n  NoDistribInsts = 510,\n/*\n***********************************************************\n* Email address relating to Registration name and address *\n* details                                                 *\n***********************************************************\n*/\n  RegistEmail = 511,\n/*\n**************************************************************\n* The amount of each distribution to go to this beneficiary, *\n* expressed as a percentage                                  *\n**************************************************************\n*/\n  DistribPercentage = 512,\n/*\n****************************************************************\n* Unique identifier of the registration details as assigned by *\n* institution or intermediary.                                 *\n****************************************************************\n*/\n  RegistID = 513,\n/*\n*********************************************************\n* Identifies Registration Instructions transaction type *\n*********************************************************\n*/\n  RegistTransType = 514,\n/*\n***************************************************************\n* For CIV - a date and time stamp to indicate the fund        *\n* valuation point with respect to which a order was priced by *\n* the fund manager.                                           *\n***************************************************************\n*/\n  ExecValuationPoint = 515,\n/*\n**************************************************************\n* For CIV specifies the approximate order quantity desired.  *\n* For a CIV Sale it specifies percentage of investor's total *\n* holding to be sold. For a CIV switch/exchange it specifies *\n* percentage of investor's cash realised from sales to be    *\n* re-invested. The executing broker, intermediary or fund    *\n* manager is responsible for converting and calculating      *\n* OrderQty (38) in shares/units for subsequent messages.     *\n**************************************************************\n*/\n  OrderPercent = 516,\n/*\n**************************************************\n* The relationship between Registration parties. *\n**************************************************\n*/\n  OwnershipType = 517,\n/*\n****************************************************************\n* The number of Contract Amount details on an Execution Report *\n* message                                                      *\n****************************************************************\n*/\n  NoContAmts = 518,\n/*\n**************************************************************\n* Type of ContAmtValue (520).                                *\n* NOTE That Commission Amount / % in Contract Amounts is the *\n* commission actually charged, rather than the commission    *\n* instructions given in Fields 2/3.                          *\n**************************************************************\n*/\n  ContAmtType = 519,\n/*\n********************************************************\n* Value of Contract Amount, e.g. a financial amount or *\n* percentage as indicated by ContAmtType (519).        *\n********************************************************\n*/\n  ContAmtValue = 520,\n/*\n****************************************************************\n* Specifies currency for the Contract amount if different from *\n* the Deal Currency - see \"Appendix 6-A; Valid Currency        *\n* Codes\".                                                      *\n****************************************************************\n*/\n  ContAmtCurr = 521,\n/*\n*********************************\n* Identifies the type of owner. *\n*********************************\n*/\n  OwnerType = 522,\n/*\n****************************************************************\n* Sub-identifier (e.g. Clearing Account for PartyRole          *\n* (452)=Clearing Firm, Locate ID # for                         *\n* PartyRole=Locate/Lending Firm, etc). Not required when using *\n* PartyID (448), PartyIDSource (447), and PartyRole.           *\n****************************************************************\n*/\n  PartySubID = 523,\n/*\n**************************************************\n* PartyID value within a nested repeating group. *\n* Same values as PartyID (448)                   *\n**************************************************\n*/\n  NestedPartyID = 524,\n/*\n********************************************************\n* PartyIDSource value within a nested repeating group. *\n* Same values as PartyIDSource (447)                   *\n********************************************************\n*/\n  NestedPartyIDSource = 525,\n/*\n************************************************************\n* Assigned by the party which originates the order. Can be *\n* used to provide the ClOrdID (11) used by an exchange or  *\n* executing system.                                        *\n************************************************************\n*/\n  SecondaryClOrdID = 526,\n/*\n***************************************************************\n* Assigned by the party which accepts the order. Can be used  *\n* to provide the ExecID (17) used by an exchange or executing *\n* system.                                                     *\n***************************************************************\n*/\n  SecondaryExecID = 527,\n/*\n***************************************************************\n* Designates the capacity of the firm placing the order.      *\n* (as of FIX 4.3, this field replaced Rule80A (tag 47) --used *\n* in conjunction with OrderRestrictions (529) field)          *\n* (see Volume : \"Glossary\" for value definitions)             *\n***************************************************************\n*/\n  OrderCapacity = 528,\n/*\n***********************************************************\n* Restrictions associated with an order. If more than one *\n* restriction is applicable to an order, this field can   *\n* contain multiple instructions separated by space.       *\n***********************************************************\n*/\n  OrderRestrictions = 529,\n/*\n*************************************************\n* Specifies scope of Order Mass Cancel Request. *\n*************************************************\n*/\n  MassCancelRequestType = 530,\n/*\n*************************************************************\n* Specifies the action taken by counterparty order handling *\n* system as a result of the Order Mass Cancel Request       *\n*************************************************************\n*/\n  MassCancelResponse = 531,\n/*\n*************************************************\n* Reason Order Mass Cancel Request was rejected *\n*************************************************\n*/\n  MassCancelRejectReason = 532,\n/*\n*************************************************\n* Total number of orders affected by either the *\n* OrderMassActionRequest(MsgType=CA) or         *\n* OrderMassCancelRequest(MsgType=Q).            *\n*************************************************\n*/\n  TotalAffectedOrders = 533,\n/*\n*************************************************************\n* Number of affected orders in the repeating group of order *\n* ids.                                                      *\n*************************************************************\n*/\n  NoAffectedOrders = 534,\n/*\n***************************************************************\n* OrderID (37) of an order affected by a mass cancel request. *\n***************************************************************\n*/\n  AffectedOrderID = 535,\n/*\n****************************************************************\n* SecondaryOrderID (198) of an order affected by a mass cancel *\n* request.                                                     *\n****************************************************************\n*/\n  AffectedSecondaryOrderID = 536,\n/*\n****************************************************************\n* Identifies the type of quote.                                *\n* An indicative quote is used to inform a counterparty of a    *\n* market. An indicative quote does not result directly in a    *\n* trade.                                                       *\n* A tradeable quote is submitted to a market and will result   *\n* directly in a trade against other orders and quotes in a     *\n* market.                                                      *\n* A restricted tradeable quote is submitted to a market and    *\n* within a certain restriction (possibly based upon price or   *\n* quantity) will automatically trade against orders. Order     *\n* that do not comply with restrictions are sent to the quote   *\n* issuer who can choose to accept or decline the order.        *\n* A counter quote is used in the negotiation model. See Volume *\n* 7 - Product: Fixed Income for example usage.                 *\n****************************************************************\n*/\n  QuoteType = 537,\n/*\n****************************************************\n* PartyRole value within a nested repeating group. *\n* Same values as PartyRole (452)                   *\n****************************************************\n*/\n  NestedPartyRole = 538,\n/*\n*************************************************************\n* Number of NestedPartyID (524), NestedPartyIDSource (525), *\n* and NestedPartyRole (538) entries                         *\n*************************************************************\n*/\n  NoNestedPartyIDs = 539,\n/*\n**************************************************************\n* Total Amount of Accrued Interest for convertible bonds and *\n* fixed income                                               *\n**************************************************************\n*/\n  TotalAccruedInterestAmt = 540,\n/*\n*********************\n* Date of maturity. *\n*********************\n*/\n  MaturityDate = 541,\n/*\n************************************************\n* Underlying security's maturity date.         *\n* See MaturityDate (541) field for description *\n************************************************\n*/\n  UnderlyingMaturityDate = 542,\n/*\n****************************************************************\n* Values may include BIC for the depository or custodian who   *\n* maintain ownership records, the ISO country code for the     *\n* location of the record, or the value \"ZZ\" to specify         *\n* physical ownership of the security (e.g. stock certificate). *\n****************************************************************\n*/\n  InstrRegistry = 543,\n/*\n****************************************************************\n* Identifies whether an order is a margin order or a           *\n* non-margin order. This is primarily used when sending orders *\n* to Japanese exchanges to indicate sell margin or buy to      *\n* cover. The same tag could be assigned also by buy-side to    *\n* indicate the intent to sell or buy margin and the sell-side  *\n* to accept or reject (base on some validation criteria) the   *\n* margin request.                                              *\n****************************************************************\n*/\n  CashMargin = 544,\n/*\n*****************************************************\n* PartySubID value within a nested repeating group. *\n* Same values as PartySubID (523)                   *\n*****************************************************\n*/\n  NestedPartySubID = 545,\n/*\n**************************************************\n* Specifies the market scope of the market data. *\n**************************************************\n*/\n  Scope = 546,\n/*\n************************************************************\n* Defines how a server handles distribution of a truncated *\n* book. Defaults to broker option.                         *\n************************************************************\n*/\n  MDImplicitDelete = 547,\n/*\n****************************************************************\n* Identifier for a cross order. Must be unique during a given  *\n* trading day. Recommend that firms use the order date as part *\n* of the CrossID for Good Till Cancel (GT) orders.             *\n****************************************************************\n*/\n  CrossID = 548,\n/*\n*********************************************\n* Type of cross being submitted to a market *\n*********************************************\n*/\n  CrossType = 549,\n/*\n**************************************************************\n* Indicates if one side or the other of a cross order should *\n* be prioritized.                                            *\n* The definition of prioritization is left to the market. In *\n* some markets prioritization means which side of the cross  *\n* order is applied to the market first. In other markets -   *\n* prioritization may mean that the prioritized side is fully *\n* executed (sometimes referred to as the side being          *\n* protected).                                                *\n**************************************************************\n*/\n  CrossPrioritization = 550,\n/*\n***************************************************************\n* CrossID of the previous cross order (NOT the initial cross  *\n* order of the day) as assigned by the institution, used to   *\n* identify the previous cross order in Cross Cancel and Cross *\n* Cancel/Replace Requests.                                    *\n***************************************************************\n*/\n  OrigCrossID = 551,\n/*\n*********************************************\n* Number of Side repeating group instances. *\n*********************************************\n*/\n  NoSides = 552,\n/*\n***********************\n* Userid or username. *\n***********************\n*/\n  Username = 553,\n/*\n***************************\n* Password or passphrase. *\n***************************\n*/\n  Password = 554,\n/*\n******************************************************\n* Number of InstrumentLeg repeating group instances. *\n******************************************************\n*/\n  NoLegs = 555,\n/*\n********************************************************\n* Currency associated with a particular Leg's quantity *\n********************************************************\n*/\n  LegCurrency = 556,\n/*\n****************************************************************\n* Used to support fragmentation. Indicates total number of     *\n* security types when multiple Security Type messages are used *\n* to return results.                                           *\n****************************************************************\n*/\n  TotNoSecurityTypes = 557,\n/*\n******************************************************\n* Number of Security Type repeating group instances. *\n******************************************************\n*/\n  NoSecurityTypes = 558,\n/*\n*********************************************************\n* Identifies the type/criteria of Security List Request *\n*********************************************************\n*/\n  SecurityListRequestType = 559,\n/*\n******************************************************\n* The results returned to a Security Request message *\n******************************************************\n*/\n  SecurityRequestResult = 560,\n/*\n**************************************\n* The trading lot size of a security *\n**************************************\n*/\n  RoundLot = 561,\n/*\n*********************************************\n* The minimum trading volume for a security *\n*********************************************\n*/\n  MinTradeVol = 562,\n/*\n************************************************************\n* Indicates the method of execution reporting requested by *\n* issuer of the order.                                     *\n************************************************************\n*/\n  MultiLegRptTypeReq = 563,\n/*\n*************************************************\n* PositionEffect for leg of a multileg          *\n* See PositionEffect (77) field for description *\n*************************************************\n*/\n  LegPositionEffect = 564,\n/*\n******************************************************\n* CoveredOrUncovered for leg of a multileg           *\n* See CoveredOrUncovered (203) field for description *\n******************************************************\n*/\n  LegCoveredOrUncovered = 565,\n/*\n****************************************\n* Price for leg of a multileg          *\n* See Price (44) field for description *\n****************************************\n*/\n  LegPrice = 566,\n/*\n*************************************************************\n* Indicates the reason a Trading Session Status Request was *\n* rejected.                                                 *\n*************************************************************\n*/\n  TradSesStatusRejReason = 567,\n/*\n***********************************\n* Trade Capture Report Request ID *\n***********************************\n*/\n  TradeRequestID = 568,\n/*\n*********************************\n* Type of Trade Capture Report. *\n*********************************\n*/\n  TradeRequestType = 569,\n/*\n********************************************************\n* Indicates if the trade capture report was previously *\n* reported to the counterparty                         *\n********************************************************\n*/\n  PreviouslyReported = 570,\n/*\n*********************************************\n* Unique identifier of trade capture report *\n*********************************************\n*/\n  TradeReportID = 571,\n/*\n*****************************************************\n* Reference identifier used with CANCEL and REPLACE *\n* transaction types.                                *\n*****************************************************\n*/\n  TradeReportRefID = 572,\n/*\n********************************************************\n* The status of this trade with respect to matching or *\n* comparison.                                          *\n********************************************************\n*/\n  MatchStatus = 573,\n/*\n*************************************************************\n* The point in the matching process at which this trade was *\n* matched.                                                  *\n*************************************************************\n*/\n  MatchType = 574,\n/*\n***********************************************************\n* This trade is to be treated as an odd lot               *\n* If this field is not specified, the default will be \"N\" *\n***********************************************************\n*/\n  OddLot = 575,\n/*\n***********************************\n* Number of clearing instructions *\n***********************************\n*/\n  NoClearingInstructions = 576,\n/*\n****************************************************************\n* Eligibility of this trade for clearing and central           *\n* counterparty processing                                      *\n* values above 4000 are reserved for agreement between parties *\n****************************************************************\n*/\n  ClearingInstruction = 577,\n/*\n***********************************************************\n* Type of input device or system from which the trade was *\n* entered.                                                *\n***********************************************************\n*/\n  TradeInputSource = 578,\n/*\n************************************************************\n* Specific device number, terminal number or station where *\n* trade was entered                                        *\n************************************************************\n*/\n  TradeInputDevice = 579,\n/*\n************************************************\n* Number of Date fields provided in date range *\n************************************************\n*/\n  NoDates = 580,\n/*\n********************************************\n* Type of account associated with an order *\n********************************************\n*/\n  AccountType = 581,\n/*\n***************************************************************\n* Capacity of customer placing the order                      *\n* Primarily used by futures exchanges to indicate the CTICode *\n* (customer type indicator) as required by the US CFTC        *\n* (Commodity Futures Trading Commission).                     *\n***************************************************************\n*/\n  CustOrderCapacity = 582,\n/*\n**************************************************************\n* Permits order originators to tie together groups of orders *\n* in which trades resulting from orders are associated for a *\n* specific purpose, for example the calculation of average   *\n* execution price for a customer or to associate lists       *\n* submitted to a broker as waves of a larger program trade.  *\n**************************************************************\n*/\n  ClOrdLinkID = 583,\n/*\n***************************************************************\n* Value assigned by issuer of Mass Status Request to uniquely *\n* identify the request                                        *\n***************************************************************\n*/\n  MassStatusReqID = 584,\n/*\n****************************\n* Mass Status Request Type *\n****************************\n*/\n  MassStatusReqType = 585,\n/*\n****************************************************************\n* The most recent (or current) modification TransactTime (tag  *\n* 60) reported on an Execution Report for the order. The       *\n* OrigOrdModTime is provided as an optional field on Order     *\n* Cancel Request and Order Cancel Replace Requests to identify *\n* that the state of the order has not changed since the        *\n* request was issued. The use of this approach is not          *\n* recommended.                                                 *\n****************************************************************\n*/\n  OrigOrdModTime = 586,\n/*\n*************************************\n* Refer to values for SettlType[63] *\n*************************************\n*/\n  LegSettlType = 587,\n/*\n******************************************\n* Refer to description for SettlDate[64] *\n******************************************\n*/\n  LegSettlDate = 588,\n/*\n*********************************************************\n* Indicates whether or not automatic booking can occur. *\n*********************************************************\n*/\n  DayBookingInst = 589,\n/*\n***********************************************\n* Indicates what constitutes a bookable unit. *\n***********************************************\n*/\n  BookingUnit = 590,\n/*\n******************************************\n* Indicates the method of preallocation. *\n******************************************\n*/\n  PreallocMethod = 591,\n/*\n**************************************************\n* Underlying security's CountryOfIssue.          *\n* See CountryOfIssue (470) field for description *\n**************************************************\n*/\n  UnderlyingCountryOfIssue = 592,\n/*\n**********************************************************\n* Underlying security's StateOrProvinceOfIssue.          *\n* See StateOrProvinceOfIssue (471) field for description *\n**********************************************************\n*/\n  UnderlyingStateOrProvinceOfIssue = 593,\n/*\n*************************************************\n* Underlying security's LocaleOfIssue.          *\n* See LocaleOfIssue (472) field for description *\n*************************************************\n*/\n  UnderlyingLocaleOfIssue = 594,\n/*\n*************************************************\n* Underlying security's InstrRegistry.          *\n* See InstrRegistry (543) field for description *\n*************************************************\n*/\n  UnderlyingInstrRegistry = 595,\n/*\n***************************************************\n* Multileg instrument's individual leg security's *\n* CountryOfIssue.                                 *\n* See CountryOfIssue (470) field for description  *\n***************************************************\n*/\n  LegCountryOfIssue = 596,\n/*\n**********************************************************\n* Multileg instrument's individual leg security's        *\n* StateOrProvinceOfIssue.                                *\n* See StateOrProvinceOfIssue (471) field for description *\n**********************************************************\n*/\n  LegStateOrProvinceOfIssue = 597,\n/*\n***************************************************\n* Multileg instrument's individual leg security's *\n* LocaleOfIssue.                                  *\n* See LocaleOfIssue (472) field for description   *\n***************************************************\n*/\n  LegLocaleOfIssue = 598,\n/*\n***************************************************\n* Multileg instrument's individual leg security's *\n* InstrRegistry.                                  *\n* See InstrRegistry (543) field for description   *\n***************************************************\n*/\n  LegInstrRegistry = 599,\n/*\n*******************************************************\n* Multileg instrument's individual security's Symbol. *\n* See Symbol (55) field for description               *\n*******************************************************\n*/\n  LegSymbol = 600,\n/*\n**********************************************************\n* Multileg instrument's individual security's SymbolSfx. *\n* See SymbolSfx (65) field for description               *\n**********************************************************\n*/\n  LegSymbolSfx = 601,\n/*\n***********************************************************\n* Multileg instrument's individual security's SecurityID. *\n* See SecurityID (48) field for description               *\n***********************************************************\n*/\n  LegSecurityID = 602,\n/*\n***************************************************\n* Multileg instrument's individual security's     *\n* SecurityIDSource.                               *\n* See SecurityIDSource (22) field for description *\n***************************************************\n*/\n  LegSecurityIDSource = 603,\n/*\n****************************************************************\n* Multileg instrument's individual security's NoSecurityAltID. *\n* See NoSecurityAltID (454) field for description              *\n****************************************************************\n*/\n  NoLegSecurityAltID = 604,\n/*\n**************************************************************\n* Multileg instrument's individual security's SecurityAltID. *\n* See SecurityAltID (455) field for description              *\n**************************************************************\n*/\n  LegSecurityAltID = 605,\n/*\n*******************************************************\n* Multileg instrument's individual security's         *\n* SecurityAltIDSource.                                *\n* See SecurityAltIDSource (456) field for description *\n*******************************************************\n*/\n  LegSecurityAltIDSource = 606,\n/*\n********************************************************\n* Multileg instrument's individual security's Product. *\n* See Product (460) field for description              *\n********************************************************\n*/\n  LegProduct = 607,\n/*\n********************************************************\n* Multileg instrument's individual security's CFICode. *\n* See CFICode (461) field for description              *\n********************************************************\n*/\n  LegCFICode = 608,\n/*\n********************************************\n* Refer to definition of SecurityType(167) *\n********************************************\n*/\n  LegSecurityType = 609,\n/*\n*****************************************************\n* Multileg instrument's individual security's       *\n* MaturityMonthYear.                                *\n* See MaturityMonthYear (200) field for description *\n*****************************************************\n*/\n  LegMaturityMonthYear = 610,\n/*\n*************************************************************\n* Multileg instrument's individual security's MaturityDate. *\n* See MaturityDate (54) field for description               *\n*************************************************************\n*/\n  LegMaturityDate = 611,\n/*\n************************************************************\n* Multileg instrument's individual security's StrikePrice. *\n* See StrikePrice (202) field for description              *\n************************************************************\n*/\n  LegStrikePrice = 612,\n/*\n*************************************************************\n* Multileg instrument's individual security's OptAttribute. *\n* See OptAttribute (206) field for description              *\n*************************************************************\n*/\n  LegOptAttribute = 613,\n/*\n*****************************************************\n* Multileg instrument's individual security's       *\n* ContractMultiplier.                               *\n* See ContractMultiplier (23) field for description *\n*****************************************************\n*/\n  LegContractMultiplier = 614,\n/*\n***********************************************************\n* Multileg instrument's individual security's CouponRate. *\n* See CouponRate (223) field for description              *\n***********************************************************\n*/\n  LegCouponRate = 615,\n/*\n****************************************************\n* Multileg instrument's individual security's      *\n* SecurityExchange.                                *\n* See SecurityExchange (207) field for description *\n****************************************************\n*/\n  LegSecurityExchange = 616,\n/*\n*******************************************************\n* Multileg instrument's individual security's Issuer. *\n* See Issuer (106) field for description              *\n*******************************************************\n*/\n  LegIssuer = 617,\n/*\n****************************************************\n* Multileg instrument's individual security's      *\n* EncodedIssuerLen.                                *\n* See EncodedIssuerLen (348) field for description *\n****************************************************\n*/\n  EncodedLegIssuerLen = 618,\n/*\n**************************************************************\n* Multileg instrument's individual security's EncodedIssuer. *\n* See EncodedIssuer (349) field for description              *\n**************************************************************\n*/\n  EncodedLegIssuer = 619,\n/*\n**************************************************\n* Description of a leg of a multileg instrument. *\n* See SecurityDesc(107).                         *\n**************************************************\n*/\n  LegSecurityDesc = 620,\n/*\n**********************************************************\n* Multileg instrument's individual security's            *\n* EncodedSecurityDescLen.                                *\n* See EncodedSecurityDescLen (350) field for description *\n**********************************************************\n*/\n  EncodedLegSecurityDescLen = 621,\n/*\n******************************************************\n* Multileg instrument's individual security's        *\n* EncodedSecurityDesc.                               *\n* See EncodedSecurityDesc (35) field for description *\n******************************************************\n*/\n  EncodedLegSecurityDesc = 622,\n/*\n*************************************************************\n* The ratio of quantity for this individual leg relative to *\n* the entire multileg security.                             *\n*************************************************************\n*/\n  LegRatioQty = 623,\n/*\n********************************************************\n* The side of this individual leg (multileg security). *\n* See Side (54) field for description and values       *\n********************************************************\n*/\n  LegSide = 624,\n/*\n****************************************************************\n* Optional market assigned sub identifier for a trading phase  *\n* within a trading session. Usage is determined by market or   *\n* counterparties. Used by US based futures markets to identify *\n* exchange specific execution time bracket codes as required   *\n* by US market regulations. Bilaterally agreed values of data  *\n* type \"String\" that start with a character can be used for    *\n* backward compatibility                                       *\n****************************************************************\n*/\n  TradingSessionSubID = 625,\n/*\n***************************************************************\n* Describes the specific type or purpose of an Allocation     *\n* message (i.e. \"Buyside Calculated\")                         *\n* (see Volume : \"Glossary\" for value definitions)             *\n* *** SOME VALUES HAVE BEEN REPLACED - See \"Replaced Features *\n* and Supported Approach\" ***                                 *\n***************************************************************\n*/\n  AllocType = 626,\n/*\n***************************************************\n* Number of HopCompID entries in repeating group. *\n***************************************************\n*/\n  NoHops = 627,\n/*\n****************************************************************\n* Assigned value used to identify the third party firm which   *\n* delivered a specific message either from the firm which      *\n* originated the message or from another third party (if       *\n* multiple \"hops\" are performed). It is recommended that this  *\n* value be the SenderCompID (49) of the third party.           *\n* Applicable when messages are communicated/re-distributed via *\n* third parties which function as service bureaus or \"hubs\".   *\n* Only applicable if OnBehalfOfCompID (115) is being used.     *\n****************************************************************\n*/\n  HopCompID = 628,\n/*\n****************************************************************\n* Time that HopCompID (628) sent the message. It is            *\n* recommended that this value be the SendingTime (52) of the   *\n* message sent by the third party.                             *\n* Applicable when messages are communicated/re-distributed via *\n* third parties which function as service bureaus or \"hubs\".   *\n* Only applicable if OnBehalfOfCompID (115) is being used.     *\n****************************************************************\n*/\n  HopSendingTime = 629,\n/*\n****************************************************************\n* Reference identifier assigned by HopCompID (628) associated  *\n* with the message sent. It is recommended that this value be  *\n* the MsgSeqNum (34) of the message sent by the third party.   *\n* Applicable when messages are communicated/re-distributed via *\n* third parties which function as service bureaus or \"hubs\".   *\n* Only applicable if OnBehalfOfCompID (115) is being used.     *\n****************************************************************\n*/\n  HopRefID = 630,\n/*\n******************\n* Mid price/rate *\n******************\n*/\n  MidPx = 631,\n/*\n*************\n* Bid yield *\n*************\n*/\n  BidYield = 632,\n/*\n*************\n* Mid yield *\n*************\n*/\n  MidYield = 633,\n/*\n***************\n* Offer yield *\n***************\n*/\n  OfferYield = 634,\n/*\n************************************************************\n* Indicates type of fee being assessed of the customer for *\n* trade executions at an exchange. Applicable for futures  *\n* markets only at this time.                               *\n* (Values source CBOT, CME, NYBOT, and NYMEX):             *\n************************************************************\n*/\n  ClearingFeeIndicator = 635,\n/*\n****************************************************************\n* Indicates if the order is currently being worked. Applicable *\n* only for OrdStatus = \"New\". For open outcry markets this     *\n* indicates that the order is being worked in the crowd. For   *\n* electronic markets it indicates that the order has           *\n* transitioned from a contingent order to a market order.      *\n****************************************************************\n*/\n  WorkingIndicator = 636,\n/*\n***************************************************************\n* Execution price assigned to a leg of a multileg instrument. *\n* See LastPx (31) field for description and values            *\n***************************************************************\n*/\n  LegLastPx = 637,\n/*\n*************************************************************\n* Indicates if a Cancel/Replace has caused an order to lose *\n* book priority.                                            *\n*************************************************************\n*/\n  PriorityIndicator = 638,\n/*\n********************************\n* Amount of price improvement. *\n********************************\n*/\n  PriceImprovement = 639,\n/*\n*************************************************\n* Price of the future part of a F/X swap order. *\n* See Price (44) for description.               *\n*************************************************\n*/\n  Price2 = 640,\n/*\n*************************************************************\n* F/X forward points of the future part of a F/X swap order *\n* added to LastSpotRate (94). May be a negative value.      *\n*************************************************************\n*/\n  LastForwardPoints2 = 641,\n/*\n**************************************************************\n* Bid F/X forward points of the future portion of a F/X swap *\n* quote added to spot rate. May be a negative value.         *\n**************************************************************\n*/\n  BidForwardPoints2 = 642,\n/*\n****************************************************************\n* Offer F/X forward points of the future portion of a F/X swap *\n* quote added to spot rate. May be a negative value.           *\n****************************************************************\n*/\n  OfferForwardPoints2 = 643,\n/*\n*****************************************************\n* RFQ Request ID - used to identify an RFQ Request. *\n*****************************************************\n*/\n  RFQReqID = 644,\n/*\n*********************************************\n* Used to indicate the best bid in a market *\n*********************************************\n*/\n  MktBidPx = 645,\n/*\n***********************************************\n* Used to indicate the best offer in a market *\n***********************************************\n*/\n  MktOfferPx = 646,\n/*\n****************************************************************\n* Used to indicate a minimum quantity for a bid. If this field *\n* is used the BidSize (134) field is interpreted as the        *\n* maximum bid size                                             *\n****************************************************************\n*/\n  MinBidSize = 647,\n/*\n*************************************************************\n* Used to indicate a minimum quantity for an offer. If this *\n* field is used the OfferSize (135) field is interpreted as *\n* the maximum offer size.                                   *\n*************************************************************\n*/\n  MinOfferSize = 648,\n/*\n***********************************************\n* Unique identifier for Quote Status Request. *\n***********************************************\n*/\n  QuoteStatusReqID = 649,\n/*\n************************************************************\n* Indicates that this message is to serve as the final and *\n* legal confirmation.                                      *\n************************************************************\n*/\n  LegalConfirm = 650,\n/*\n****************************************************************\n* The calculated or traded price for the underlying instrument *\n* that corresponds to a derivative. Used for transactions that *\n* include the cash instrument and the derivative.              *\n****************************************************************\n*/\n  UnderlyingLastPx = 651,\n/*\n*********************************************************\n* The calculated or traded quantity for the underlying  *\n* instrument that corresponds to a derivative. Used for *\n* transactions that include the cash instrument and the *\n* derivative.                                           *\n*********************************************************\n*/\n  UnderlyingLastQty = 652,\n/*\n****************************************\n* Unique indicator for a specific leg. *\n****************************************\n*/\n  LegRefID = 654,\n/*\n************************************************************\n* Unique indicator for a specific leg for the ContraBroker *\n* (375).                                                   *\n************************************************************\n*/\n  ContraLegRefID = 655,\n/*\n****************************************************************\n* Foreign exchange rate used to compute the bid \"SettlCurrAmt\" *\n* (119) from Currency (15) to SettlCurrency (120)              *\n****************************************************************\n*/\n  SettlCurrBidFxRate = 656,\n/*\n************************************************************\n* Foreign exchange rate used to compute the offer          *\n* \"SettlCurrAmt\" (119) from Currency (15) to SettlCurrency *\n* (120)                                                    *\n************************************************************\n*/\n  SettlCurrOfferFxRate = 657,\n/*\n******************************\n* Reason Quote was rejected: *\n******************************\n*/\n  QuoteRequestRejectReason = 658,\n/*\n************************************************************\n* ID within repeating group of sides which is used to      *\n* represent this transaction for compliance purposes (e.g. *\n* OATS reporting).                                         *\n************************************************************\n*/\n  SideComplianceID = 659,\n/*\n****************************************************************\n* Used to identify the source of the Account (1) code. This is *\n* especially useful if the account is a new account that the   *\n* Respondent may not have setup yet in their system.           *\n****************************************************************\n*/\n  AcctIDSource = 660,\n/*\n**************************************************************\n* Used to identify the source of the AllocAccount (79) code. *\n* See AcctIDSource (660) for valid values.                   *\n**************************************************************\n*/\n  AllocAcctIDSource = 661,\n/*\n*****************************************\n* Specifies the price of the benchmark. *\n*****************************************\n*/\n  BenchmarkPrice = 662,\n/*\n********************************************\n* Identifies type of BenchmarkPrice (662). *\n* See PriceType (423) for valid values.    *\n********************************************\n*/\n  BenchmarkPriceType = 663,\n/*\n**************************************\n* Message reference for Confirmation *\n**************************************\n*/\n  ConfirmID = 664,\n/*\n**********************************************\n* Identifies the status of the Confirmation. *\n**********************************************\n*/\n  ConfirmStatus = 665,\n/*\n*************************************************\n* Identifies the Confirmation transaction type. *\n*************************************************\n*/\n  ConfirmTransType = 666,\n/*\n***********************************************************\n* Specifies when the contract (i.e. MBS/TBA) will settle. *\n***********************************************************\n*/\n  ContractSettlMonth = 667,\n/*\n************************************\n* Identifies the form of delivery. *\n************************************\n*/\n  DeliveryForm = 668,\n/*\n***********************************************************\n* Last price expressed in percent-of-par. Conditionally   *\n* required for Fixed Income trades when LastPx (31) is    *\n* expressed in Yield, Spread, Discount or any other type. *\n* Usage: Execution Report and Allocation Report repeating *\n* executions block (from sellside).                       *\n***********************************************************\n*/\n  LastParPx = 669,\n/*\n*************************************\n* Number of Allocations for the leg *\n*************************************\n*/\n  NoLegAllocs = 670,\n/*\n***********************************************************\n* Allocation Account for the leg                          *\n* See AllocAccount (79) for description and valid values. *\n***********************************************************\n*/\n  LegAllocAccount = 671,\n/*\n*********************************************************\n* Reference for the individual allocation ticket        *\n* See IndividualAllocID (467) for description and valid *\n* values.                                               *\n*********************************************************\n*/\n  LegIndividualAllocID = 672,\n/*\n*******************************************************\n* Leg allocation quantity.                            *\n* See AllocQty (80) for description and valid values. *\n*******************************************************\n*/\n  LegAllocQty = 673,\n/*\n*********************************************************\n* The source of the LegAllocAccount (671)               *\n* See AllocAcctIDSource (661) for description and valid *\n* values.                                               *\n*********************************************************\n*/\n  LegAllocAcctIDSource = 674,\n/*\n***********************************************************\n* Identifies settlement currency for the Leg.             *\n* See SettlCurrency (20) for description and valid values *\n***********************************************************\n*/\n  LegSettlCurrency = 675,\n/*\n**************************************************************\n* LegBenchmarkPrice (679) currency                           *\n* See BenchmarkCurveCurrency (220) for description and valid *\n* values.                                                    *\n**************************************************************\n*/\n  LegBenchmarkCurveCurrency = 676,\n/*\n*********************************************************\n* Name of the Leg Benchmark Curve.                      *\n* See BenchmarkCurveName (22) for description and valid *\n* values.                                               *\n*********************************************************\n*/\n  LegBenchmarkCurveName = 677,\n/*\n***********************************************************\n* Identifies the point on the Leg Benchmark Curve.        *\n* See BenchmarkCurvePoint (222) for description and valid *\n* values.                                                 *\n***********************************************************\n*/\n  LegBenchmarkCurvePoint = 678,\n/*\n**************************************************************\n* Used to identify the price of the benchmark security.      *\n* See BenchmarkPrice (662) for description and valid values. *\n**************************************************************\n*/\n  LegBenchmarkPrice = 679,\n/*\n**********************************************************\n* The price type of the LegBenchmarkPrice.               *\n* See BenchmarkPriceType (663) for description and valid *\n* values.                                                *\n**********************************************************\n*/\n  LegBenchmarkPriceType = 680,\n/*\n****************************************************\n* Bid price of this leg.                           *\n* See BidPx (32) for description and valid values. *\n****************************************************\n*/\n  LegBidPx = 681,\n/*\n****************************************************\n* Leg-specific IOI quantity.                       *\n* See IOIQty (27) for description and valid values *\n****************************************************\n*/\n  LegIOIQty = 682,\n/*\n*************************************\n* Number of leg stipulation entries *\n*************************************\n*/\n  NoLegStipulations = 683,\n/*\n******************************************************\n* Offer price of this leg.                           *\n* See OfferPx (133) for description and valid values *\n******************************************************\n*/\n  LegOfferPx = 684,\n/*\n******************************************************\n* Quantity ordered of this leg.                      *\n* See OrderQty (38) for description and valid values *\n******************************************************\n*/\n  LegOrderQty = 685,\n/*\n**********************************************************\n* The price type of the LegBidPx (681) and/or LegOfferPx *\n* (684).                                                 *\n* See PriceType (423) for description and valid values   *\n**********************************************************\n*/\n  LegPriceType = 686,\n/*\n******************************************************\n* Quantity of this leg, e.g. in Quote dialog.        *\n* See Quantity (53) for description and valid values *\n******************************************************\n*/\n  LegQty = 687,\n/*\n**************************************************************\n* For Fixed Income, type of Stipulation for this leg.        *\n* See StipulationType (233) for description and valid values *\n**************************************************************\n*/\n  LegStipulationType = 688,\n/*\n***************************************************************\n* For Fixed Income, value of stipulation.                     *\n* See StipulationValue (234) for description and valid values *\n***************************************************************\n*/\n  LegStipulationValue = 689,\n/*\n**************************************************************\n* For Fixed Income, used instead of LegQty (687) or          *\n* LegOrderQty (685) to requests the respondent to calculate  *\n* the quantity based on the quantity on the opposite side of *\n* the swap.                                                  *\n**************************************************************\n*/\n  LegSwapType = 690,\n/*\n************************************************\n* For Fixed Income, identifies MBS / ABS pool. *\n************************************************\n*/\n  Pool = 691,\n/*\n**************************************************************\n* Code to represent price type requested in Quote.           *\n* If the Quote Request is for a Swap values 1-8 apply to all *\n* legs.                                                      *\n**************************************************************\n*/\n  QuotePriceType = 692,\n/*\n****************************************\n* Message reference for Quote Response *\n****************************************\n*/\n  QuoteRespID = 693,\n/*\n******************************************\n* Identifies the type of Quote Response. *\n******************************************\n*/\n  QuoteRespType = 694,\n/*\n************************************************************\n* Code to qualify Quote use                                *\n* See IOIQualifier (104) for description and valid values. *\n************************************************************\n*/\n  QuoteQualifier = 695,\n/*\n***************************************************************\n* Date to which the yield has been calculated (i.e. maturity, *\n* par call or current call, pre-refunded date).               *\n***************************************************************\n*/\n  YieldRedemptionDate = 696,\n/*\n*************************************************\n* Price to which the yield has been calculated. *\n*************************************************\n*/\n  YieldRedemptionPrice = 697,\n/*\n*********************************************************\n* The price type of the YieldRedemptionPrice (697)      *\n* See PriceType (423) for description and valid values. *\n*********************************************************\n*/\n  YieldRedemptionPriceType = 698,\n/*\n*************************************************************\n* The identifier of the benchmark security, e.g. Treasury   *\n* against Corporate bond.                                   *\n* See SecurityID (tag 48) for description and valid values. *\n*************************************************************\n*/\n  BenchmarkSecurityID = 699,\n/*\n*****************************************************\n* Indicates a trade that reverses a previous trade. *\n*****************************************************\n*/\n  ReversalIndicator = 700,\n/*\n****************************************************************\n* Include as needed to clarify yield irregularities associated *\n* with date, e.g. when it falls on a non-business day.         *\n****************************************************************\n*/\n  YieldCalcDate = 701,\n/*\n*******************************\n* Number of position entries. *\n*******************************\n*/\n  NoPositions = 702,\n/*\n*******************************************************\n* Used to identify the type of quantity that is being *\n* returned.                                           *\n*******************************************************\n*/\n  PosType = 703,\n/*\n*****************\n* Long Quantity *\n*****************\n*/\n  LongQty = 704,\n/*\n******************\n* Short Quantity *\n******************\n*/\n  ShortQty = 705,\n/*\n****************************\n* Status of this position. *\n****************************\n*/\n  PosQtyStatus = 706,\n/*\n***************************\n* Type of Position amount *\n***************************\n*/\n  PosAmtType = 707,\n/*\n*******************\n* Position amount *\n*******************\n*/\n  PosAmt = 708,\n/*\n***********************************************\n* Identifies the type of position transaction *\n***********************************************\n*/\n  PosTransType = 709,\n/*\n*************************************************************\n* Unique identifier for the position maintenance request as *\n* assigned by the submitter                                 *\n*************************************************************\n*/\n  PosReqID = 710,\n/*\n********************************************************\n* Number of underlying legs that make up the security. *\n********************************************************\n*/\n  NoUnderlyings = 711,\n/*\n***************************************\n* Maintenance Action to be performed. *\n***************************************\n*/\n  PosMaintAction = 712,\n/*\n*************************************************************\n* Reference to the PosReqID (710) of a previous maintenance *\n* request that is being replaced or canceled.               *\n*************************************************************\n*/\n  OrigPosReqRefID = 713,\n/*\n***************************************************************\n* Reference to a PosMaintRptID (721) from a previous Position *\n* Maintenance Report that is being replaced or canceled.      *\n***************************************************************\n*/\n  PosMaintRptRefID = 714,\n/*\n****************************************************************\n* The \"Clearing Business Date\" referred to by this maintenance *\n* request.                                                     *\n****************************************************************\n*/\n  ClearingBusinessDate = 715,\n/*\n********************************************\n* Identifies a specific settlement session *\n********************************************\n*/\n  SettlSessID = 716,\n/*\n************************************************\n* SubID value associated with SettlSessID(716) *\n************************************************\n*/\n  SettlSessSubID = 717,\n/*\n**********************************************************\n* Type of adjustment to be applied, used for PCS and PAJ *\n**********************************************************\n*/\n  AdjustmentType = 718,\n/*\n****************************************************************\n* Used to indicate when a contrary instruction for exercise or *\n* abandonment is being submitted                               *\n****************************************************************\n*/\n  ContraryInstructionIndicator = 719,\n/*\n************************************************************\n* Indicates if requesting a rollover of prior day's spread *\n* submissions.                                             *\n************************************************************\n*/\n  PriorSpreadIndicator = 720,\n/*\n**********************************************\n* Unique identifier for this position report *\n**********************************************\n*/\n  PosMaintRptID = 721,\n/*\n******************************************\n* Status of Position Maintenance Request *\n******************************************\n*/\n  PosMaintStatus = 722,\n/*\n*************************************************************\n* Result of Position Maintenance Request.                   *\n* 4000+ Reserved and available for bi-laterally agreed upon *\n* user-defined values                                       *\n*************************************************************\n*/\n  PosMaintResult = 723,\n/*\n************************************************************\n* Used to specify the type of position request being made. *\n************************************************************\n*/\n  PosReqType = 724,\n/*\n********************************************************\n* Identifies how the response to the request should be *\n* transmitted.                                         *\n* Details specified via ResponseDestination (726).     *\n********************************************************\n*/\n  ResponseTransportType = 725,\n/*\n****************************************************************\n* URI (Uniform Resource Identifier) for details) or other      *\n* pre-arranged value. Used in conjunction with                 *\n* ResponseTransportType (725) value of Out-of-Band to identify *\n* the out-of-band destination.                                 *\n* See \"Appendix 6-B FIX Fields Based Upon Other Standards\"     *\n****************************************************************\n*/\n  ResponseDestination = 726,\n/*\n****************************************************\n* Total number of Position Reports being returned. *\n****************************************************\n*/\n  TotalNumPosReports = 727,\n/*\n*************************************************************\n* Result of Request for Position                            *\n* 4000+ Reserved and available for bi-laterally agreed upon *\n* user-defined values                                       *\n*************************************************************\n*/\n  PosReqResult = 728,\n/*\n***********************************\n* Status of Request for Positions *\n***********************************\n*/\n  PosReqStatus = 729,\n/*\n********************\n* Settlement price *\n********************\n*/\n  SettlPrice = 730,\n/*\n****************************\n* Type of settlement price *\n****************************\n*/\n  SettlPriceType = 731,\n/*\n**********************************************\n* Underlying security's SettlPrice.          *\n* See SettlPrice (730) field for description *\n**********************************************\n*/\n  UnderlyingSettlPrice = 732,\n/*\n**************************************************\n* Underlying security's SettlPriceType.          *\n* See SettlPriceType (731) field for description *\n**************************************************\n*/\n  UnderlyingSettlPriceType = 733,\n/*\n*****************************\n* Previous settlement price *\n*****************************\n*/\n  PriorSettlPrice = 734,\n/*\n********************************************************\n* Number of repeating groups of QuoteQualifiers (695). *\n********************************************************\n*/\n  NoQuoteQualifiers = 735,\n/*\n***********************************************************\n* Currency code of settlement denomination for a specific *\n* AllocAccount (79).                                      *\n***********************************************************\n*/\n  AllocSettlCurrency = 736,\n/*\n***************************************************************\n* Total amount due expressed in settlement currency (includes *\n* the effect of the forex transaction) for a specific         *\n* AllocAccount (79).                                          *\n***************************************************************\n*/\n  AllocSettlCurrAmt = 737,\n/*\n***************************************************\n* Amount of interest (i.e. lump-sum) at maturity. *\n***************************************************\n*/\n  InterestAtMaturity = 738,\n/*\n****************************************************************\n* The effective date of a new securities issue determined by   *\n* its underwriters. Often but not always the same as the Issue *\n* Date and the Interest Accrual Date                           *\n****************************************************************\n*/\n  LegDatedDate = 739,\n/*\n**************************************************************\n* For Fixed Income, identifies MBS / ABS pool for a specific *\n* leg of a multi-leg instrument.                             *\n* See Pool (691) for description and valid values.           *\n**************************************************************\n*/\n  LegPool = 740,\n/*\n*********************************************************\n* Amount of interest (i.e. lump-sum) at maturity at the *\n* account-level.                                        *\n*********************************************************\n*/\n  AllocInterestAtMaturity = 741,\n/*\n**************************************************************\n* Amount of Accrued Interest for convertible bonds and fixed *\n* income at the allocation-level.                            *\n**************************************************************\n*/\n  AllocAccruedInterestAmt = 742,\n/*\n*********************\n* Date of delivery. *\n*********************\n*/\n  DeliveryDate = 743,\n/*\n***************************************************************\n* Method by which short positions are assigned to an exercise *\n* notice during exercise and assignment processing            *\n***************************************************************\n*/\n  AssignmentMethod = 744,\n/*\n*****************************************************\n* Quantity Increment used in performing assignment. *\n*****************************************************\n*/\n  AssignmentUnit = 745,\n/*\n***************************************************\n* Open interest that was eligible for assignment. *\n***************************************************\n*/\n  OpenInterest = 746,\n/*\n*****************************************************\n* Exercise Method used to in performing assignment. *\n*****************************************************\n*/\n  ExerciseMethod = 747,\n/*\n*******************************************\n* Total number of trade reports returned. *\n*******************************************\n*/\n  TotNumTradeReports = 748,\n/*\n***************************\n* Result of Trade Request *\n***************************\n*/\n  TradeRequestResult = 749,\n/*\n****************************\n* Status of Trade Request. *\n****************************\n*/\n  TradeRequestStatus = 750,\n/*\n************************************************************\n* Reason Trade Capture Request was rejected.               *\n* 100+ Reserved and available for bi-laterally agreed upon *\n* user-defined values                                      *\n************************************************************\n*/\n  TradeReportRejectReason = 751,\n/*\n****************************************************************\n* Used to indicate if the side being reported on Trade Capture *\n* Report represents a leg of a multileg instrument or a single *\n* security.                                                    *\n****************************************************************\n*/\n  SideMultiLegReportingType = 752,\n/*\n**************************************\n* Number of position amount entries. *\n**************************************\n*/\n  NoPosAmt = 753,\n/*\n*************************************************************\n* Identifies whether or not an allocation has been          *\n* automatically accepted on behalf of the Carry Firm by the *\n* Clearing House.                                           *\n*************************************************************\n*/\n  AutoAcceptIndicator = 754,\n/*\n****************************************************\n* Unique identifier for Allocation Report message. *\n****************************************************\n*/\n  AllocReportID = 755,\n/*\n***************************************************************\n* Number of Nested2PartyID (757), Nested2PartyIDSource (758), *\n* and Nested2PartyRole (759) entries                          *\n***************************************************************\n*/\n  NoNested2PartyIDs = 756,\n/*\n*************************************************************\n* PartyID value within a \"second instance\" Nested repeating *\n* group.                                                    *\n* Same values as PartyID (448)                              *\n*************************************************************\n*/\n  Nested2PartyID = 757,\n/*\n*********************************************************\n* PartyIDSource value within a \"second instance\" Nested *\n* repeating group.                                      *\n* Same values as PartyIDSource (447)                    *\n*********************************************************\n*/\n  Nested2PartyIDSource = 758,\n/*\n***************************************************************\n* PartyRole value within a \"second instance\" Nested repeating *\n* group.                                                      *\n* Same values as PartyRole (452)                              *\n***************************************************************\n*/\n  Nested2PartyRole = 759,\n/*\n****************************************************************\n* PartySubID value within a \"second instance\" Nested repeating *\n* group.                                                       *\n* Same values as PartySubID (523)                              *\n****************************************************************\n*/\n  Nested2PartySubID = 760,\n/*\n***************************************************************\n* Identifies class or source of the BenchmarkSecurityID (699) *\n* value. Required if BenchmarkSecurityID is specified.        *\n* Same values as the SecurityIDSource (22) field              *\n***************************************************************\n*/\n  BenchmarkSecurityIDSource = 761,\n/*\n***************************************************************\n* Sub-type qualification/identification of the SecurityType.  *\n* As an example for SecurityType(167)=\"REPO\", the             *\n* SecuritySubType=\"General Collateral\" can be used to further *\n* specify the type of REPO.                                   *\n* If SecuritySubType is used then SecurityType is required.   *\n* For SecurityType=\"MLEG\" a name of the option or futures     *\n* strategy name can be specified, such as \"Calendar\",         *\n* \"Vertical\", \"Butterfly\".                                    *\n***************************************************************\n*/\n  SecuritySubType = 762,\n/*\n***************************************************\n* Underlying security's SecuritySubType.          *\n* See SecuritySubType (762) field for description *\n***************************************************\n*/\n  UnderlyingSecuritySubType = 763,\n/*\n***************************************************\n* SecuritySubType of the leg instrument.          *\n* See SecuritySubType (762) field for description *\n***************************************************\n*/\n  LegSecuritySubType = 764,\n/*\n**********************************************************\n* The maximum percentage that execution of one side of a *\n* program trade can exceed execution of the other.       *\n**********************************************************\n*/\n  AllowableOneSidednessPct = 765,\n/*\n**************************************************************\n* The maximum amount that execution of one side of a program *\n* trade can exceed execution of the other.                   *\n**************************************************************\n*/\n  AllowableOneSidednessValue = 766,\n/*\n*********************************************************\n* The currency that AllowableOneSidednessValue (766) is *\n* expressed in if AllowableOneSidednessValue is used.   *\n*********************************************************\n*/\n  AllowableOneSidednessCurr = 767,\n/*\n*******************************************\n* Number of TrdRegTimestamp (769) entries *\n*******************************************\n*/\n  NoTrdRegTimestamps = 768,\n/*\n*************************************************************\n* Traded / Regulatory timestamp value. Use to store time    *\n* information required by government regulators or self     *\n* regulatory organizations (such as an exchange or clearing *\n* house).                                                   *\n*************************************************************\n*/\n  TrdRegTimestamp = 769,\n/*\n************************************************************\n* Traded / Regulatory timestamp type.                      *\n* Note of Applicability: values are required in US futures *\n* markets by the CFTC to support computerized trade        *\n* reconstruction.                                          *\n* (see Volume : \"Glossary\" for value definitions)          *\n************************************************************\n*/\n  TrdRegTimestampType = 770,\n/*\n****************************************************************\n* Text which identifies the \"origin\" (i.e. system which was    *\n* used to generate the time stamp) for the Traded / Regulatory *\n* timestamp value.                                             *\n****************************************************************\n*/\n  TrdRegTimestampOrigin = 771,\n/*\n***************************************************************\n* Reference identifier to be used with ConfirmTransType (666) *\n* = Replace or Cancel                                         *\n***************************************************************\n*/\n  ConfirmRefID = 772,\n/*\n***********************************************************\n* Identifies the type of Confirmation message being sent. *\n***********************************************************\n*/\n  ConfirmType = 773,\n/*\n*******************************************************\n* Identifies the reason for rejecting a Confirmation. *\n*******************************************************\n*/\n  ConfirmRejReason = 774,\n/*\n**************************************************************\n* Method for booking out this order. Used when notifying a   *\n* broker that an order to be settled by that broker is to be *\n* booked out as an OTC derivative (e.g. CFD or similar).     *\n**************************************************************\n*/\n  BookingType = 775,\n/*\n**************************************************************\n* Identified reason for rejecting an individual AllocAccount *\n* (79) detail.                                               *\n* Same values as AllocRejCode (88)                           *\n**************************************************************\n*/\n  IndividualAllocRejCode = 776,\n/*\n*********************************************************\n* Unique identifier for Settlement Instruction message. *\n*********************************************************\n*/\n  SettlInstMsgID = 777,\n/*\n*************************************************************\n* Number of settlement instructions within repeating group. *\n*************************************************************\n*/\n  NoSettlInst = 778,\n/*\n************************************************************\n* Timestamp of last update to data item (or creation if no *\n* updates made since creation).                            *\n************************************************************\n*/\n  LastUpdateTime = 779,\n/*\n**************************************************************\n* Used to indicate whether settlement instructions are       *\n* provided on an allocation instruction message, and if not, *\n* how they are to be derived.                                *\n**************************************************************\n*/\n  AllocSettlInstType = 780,\n/*\n***************************************************************\n* Number of SettlPartyID (782), SettlPartyIDSource (783), and *\n* SettlPartyRole (784) entries                                *\n***************************************************************\n*/\n  NoSettlPartyIDs = 781,\n/*\n***************************************************************\n* PartyID value within a settlement parties component. Nested *\n* repeating group.                                            *\n* Same values as PartyID (448)                                *\n***************************************************************\n*/\n  SettlPartyID = 782,\n/*\n**************************************************************\n* PartyIDSource value within a settlement parties component. *\n* Same values as PartyIDSource (447)                         *\n**************************************************************\n*/\n  SettlPartyIDSource = 783,\n/*\n**********************************************************\n* PartyRole value within a settlement parties component. *\n* Same values as PartyRole (452)                         *\n**********************************************************\n*/\n  SettlPartyRole = 784,\n/*\n***********************************************************\n* PartySubID value within a settlement parties component. *\n* Same values as PartySubID (523)                         *\n***********************************************************\n*/\n  SettlPartySubID = 785,\n/*\n****************************************\n* Type of SettlPartySubID (785) value. *\n* Same values as PartySubIDType (803)  *\n****************************************\n*/\n  SettlPartySubIDType = 786,\n/*\n***************************************************************\n* Used to indicate whether a delivery instruction is used for *\n* securities or cash settlement.                              *\n***************************************************************\n*/\n  DlvyInstType = 787,\n/*\n**********************************\n* Type of financing termination. *\n**********************************\n*/\n  TerminationType = 788,\n/*\n*************************************************\n* Next expected MsgSeqNum value to be received. *\n*************************************************\n*/\n  NextExpectedMsgSeqNum = 789,\n/*\n************************************************************\n* Can be used to uniquely identify a specific Order Status *\n* Request message.                                         *\n************************************************************\n*/\n  OrdStatusReqID = 790,\n/*\n*******************************************************\n* Unique ID of settlement instruction request message *\n*******************************************************\n*/\n  SettlInstReqID = 791,\n/*\n****************************************************************\n* Identifies reason for rejection (of a settlement instruction *\n* request message).                                            *\n****************************************************************\n*/\n  SettlInstReqRejCode = 792,\n/*\n****************************************************************\n* Secondary allocation identifier. Unlike the AllocID (70),    *\n* this can be shared across a number of allocation instruction *\n* or allocation report messages, thereby making it possible to *\n* pass an identifier for an original allocation message on     *\n* multiple messages (e.g. from one party to a second to a      *\n* third, across cancel and replace messages etc.).             *\n****************************************************************\n*/\n  SecondaryAllocID = 793,\n/*\n***********************************************************\n* Describes the specific type or purpose of an Allocation *\n* Report message                                          *\n***********************************************************\n*/\n  AllocReportType = 794,\n/*\n*************************************************************\n* Reference identifier to be used with AllocTransType (7) = *\n* Replace or Cancel                                         *\n*************************************************************\n*/\n  AllocReportRefID = 795,\n/*\n****************************************************************\n* Reason for cancelling or replacing an Allocation Instruction *\n* or Allocation Report message                                 *\n****************************************************************\n*/\n  AllocCancReplaceReason = 796,\n/*\n***********************************************************\n* Indicates whether or not this message is a drop copy of *\n* another message.                                        *\n***********************************************************\n*/\n  CopyMsgIndicator = 797,\n/*\n***********************************************************\n* Type of account associated with a confirmation or other *\n* trade-level message                                     *\n***********************************************************\n*/\n  AllocAccountType = 798,\n/*\n**************************************\n* Average price for a specific order *\n**************************************\n*/\n  OrderAvgPx = 799,\n/*\n****************************************************************\n* Quantity of the order that is being booked out as part of an *\n* Allocation Instruction or Allocation Report message          *\n****************************************************************\n*/\n  OrderBookingQty = 800,\n/*\n***********************************************************\n* Number of SettlPartySubID (785) and SettlPartySubIDType *\n* (786) entries                                           *\n***********************************************************\n*/\n  NoSettlPartySubIDs = 801,\n/*\n**************************************************************\n* Number of PartySubID (523)and PartySubIDType (803) entries *\n**************************************************************\n*/\n  NoPartySubIDs = 802,\n/*\n***************************************************************\n* Type of PartySubID (523) value                              *\n* 4000+ = Reserved and available for bi-laterally agreed upon *\n* user defined values                                         *\n***************************************************************\n*/\n  PartySubIDType = 803,\n/*\n*************************************************************\n* Number of NestedPartySubID (545) and NestedPartySubIDType *\n* (805) entries                                             *\n*************************************************************\n*/\n  NoNestedPartySubIDs = 804,\n/*\n*****************************************\n* Type of NestedPartySubID (545) value. *\n* Same values as PartySubIDType (803)   *\n*****************************************\n*/\n  NestedPartySubIDType = 805,\n/*\n***************************************************************\n* Number of Nested2PartySubID (760) and Nested2PartySubIDType *\n* (807) entries. Second instance of <NestedParties>.          *\n***************************************************************\n*/\n  NoNested2PartySubIDs = 806,\n/*\n*************************************************************\n* Type of Nested2PartySubID (760) value. Second instance of *\n* <NestedParties>.                                          *\n* Same values as PartySubIDType (803)                       *\n*************************************************************\n*/\n  Nested2PartySubIDType = 807,\n/*\n***************************************************************\n* Response to allocation to be communicated to a counterparty *\n* through an intermediary, i.e. clearing house. Used in       *\n* conjunction with AllocType = \"Request to Intermediary\" and  *\n* AllocReportType = \"Request to Intermediary\"                 *\n***************************************************************\n*/\n  AllocIntermedReqType = 808,\n/*\n***************************************************************\n* Number of Usernames to which this this response is directed *\n***************************************************************\n*/\n  NoUsernames = 809,\n/*\n************************************************************\n* Underlying price associate with a derivative instrument. *\n************************************************************\n*/\n  UnderlyingPx = 810,\n/*\n****************************************************************\n* The rate of change in the price of a derivative with respect *\n* to the movement in the price of the underlying instrument(s) *\n* upon which the derivative instrument price is based.         *\n* This value is normally between -1.0 and 1.0.                 *\n****************************************************************\n*/\n  PriceDelta = 811,\n/*\n***************************************************************\n* Used to specify the maximum number of application messages  *\n* that can be queued bedore a corrective action needs to take *\n* place to resolve the queuing issue.                         *\n***************************************************************\n*/\n  ApplQueueMax = 812,\n/*\n**************************************************************\n* Current number of application messages that were queued at *\n* the time that the message was created by the counterparty. *\n**************************************************************\n*/\n  ApplQueueDepth = 813,\n/*\n**************************************************************\n* Resolution taken when ApplQueueDepth (813) exceeds         *\n* ApplQueueMax (812) or system specified maximum queue size. *\n**************************************************************\n*/\n  ApplQueueResolution = 814,\n/*\n**********************************************************\n* Action to take to resolve an application message queue *\n* (backlog).                                             *\n**********************************************************\n*/\n  ApplQueueAction = 815,\n/*\n*********************************************\n* Number of alternative market data sources *\n*********************************************\n*/\n  NoAltMDSource = 816,\n/*\n**********************************************************\n* Session layer source for market data                   *\n* (For the standard FIX session layer, this would be the *\n* TargetCompID (56) where market data can be obtained).  *\n**********************************************************\n*/\n  AltMDSourceID = 817,\n/*\n****************************************************************\n* Secondary trade report identifier - can be used to associate *\n* an additional identifier with a trade.                       *\n****************************************************************\n*/\n  SecondaryTradeReportID = 818,\n/*\n*****************************\n* Average Pricing Indicator *\n*****************************\n*/\n  AvgPxIndicator = 819,\n/*\n***************************************************************\n* Used to link a group of trades together. Useful for linking *\n* a group of trades together for average price calculations.  *\n***************************************************************\n*/\n  TradeLinkID = 820,\n/*\n************************************************************\n* Specific device number, terminal number or station where *\n* order was entered                                        *\n************************************************************\n*/\n  OrderInputDevice = 821,\n/*\n*************************************************************\n* Trading Session in which the underlying instrument trades *\n*************************************************************\n*/\n  UnderlyingTradingSessionID = 822,\n/*\n**********************************************************\n* Trading Session sub identifier in which the underlying *\n* instrument trades                                      *\n**********************************************************\n*/\n  UnderlyingTradingSessionSubID = 823,\n/*\n***************************************************************\n* Reference to the leg of a multileg instrument to which this *\n* trade refers                                                *\n***************************************************************\n*/\n  TradeLegRefID = 824,\n/*\n****************************************************************\n* Used to report any exchange rules that apply to this trade.  *\n* Primarily intended for US futures markets. Certain trading   *\n* practices are permitted by the CFTC, such as large lot       *\n* trading, block trading, all or none trades. If the rules are *\n* used, the exchanges are required to indicate these rules on  *\n* the trade.                                                   *\n****************************************************************\n*/\n  ExchangeRule = 825,\n/*\n***********************************************\n* Identifies how the trade is to be allocated *\n***********************************************\n*/\n  TradeAllocIndicator = 826,\n/*\n**************************************************************\n* Part of trading cycle when an instrument expires. Field is *\n* applicable for derivatives.                                *\n**************************************************************\n*/\n  ExpirationCycle = 827,\n/*\n******************\n* Type of Trade: *\n******************\n*/\n  TrdType = 828,\n/*\n*******************************************\n* Further qualification to the trade type *\n*******************************************\n*/\n  TrdSubType = 829,\n/*\n*************************************\n* Reason trade is being transferred *\n*************************************\n*/\n  TransferReason = 830,\n/*\n***************************************************************\n* Total Number of Assignment Reports being returned to a firm *\n***************************************************************\n*/\n  TotNumAssignmentReports = 832,\n/*\n***********************************************\n* Unique identifier for the Assignment Report *\n***********************************************\n*/\n  AsgnRptID = 833,\n/*\n**************************************************************\n* Amount that a position has to be in the money before it is *\n* exercised.                                                 *\n**************************************************************\n*/\n  ThresholdAmount = 834,\n/*\n*********************************************\n* Describes whether peg is static or floats *\n*********************************************\n*/\n  PegMoveType = 835,\n/*\n****************************\n* Type of Peg Offset value *\n****************************\n*/\n  PegOffsetType = 836,\n/*\n*********************\n* Type of Peg Limit *\n*********************\n*/\n  PegLimitType = 837,\n/*\n***********************************************************\n* If the calculated peg price is not a valid tick price,  *\n* specifies whether to round the price to be more or less *\n* aggressive                                              *\n***********************************************************\n*/\n  PegRoundDirection = 838,\n/*\n**********************************************\n* The price the order is currently pegged at *\n**********************************************\n*/\n  PeggedPrice = 839,\n/*\n************************\n* The scope of the peg *\n************************\n*/\n  PegScope = 840,\n/*\n************************************************************\n* Describes whether discretionay price is static or floats *\n************************************************************\n*/\n  DiscretionMoveType = 841,\n/*\n***********************************\n* Type of Discretion Offset value *\n***********************************\n*/\n  DiscretionOffsetType = 842,\n/*\n****************************\n* Type of Discretion Limit *\n****************************\n*/\n  DiscretionLimitType = 843,\n/*\n*************************************************************\n* If the calculated discretionary price is not a valid tick *\n* price, specifies whether to round the price to be more or *\n* less aggressive                                           *\n*************************************************************\n*/\n  DiscretionRoundDirection = 844,\n/*\n************************************************\n* The current discretionary price of the order *\n************************************************\n*/\n  DiscretionPrice = 845,\n/*\n*******************************\n* The scope of the discretion *\n*******************************\n*/\n  DiscretionScope = 846,\n/*\n***************************************************************\n* The target strategy of the order                            *\n* 1000+ = Reserved and available for bi-laterally agreed upon *\n* user defined values                                         *\n***************************************************************\n*/\n  TargetStrategy = 847,\n/*\n****************************************************************\n* Field to allow further specification of the TargetStrategy - *\n* usage to be agreed between counterparties                    *\n****************************************************************\n*/\n  TargetStrategyParameters = 848,\n/*\n***************************************************************\n* For a TargetStrategy=Participate order specifies the target *\n* particpation rate. For other order types this is a volume   *\n* limit (i.e. do not be more than this percent of the market  *\n* volume)                                                     *\n***************************************************************\n*/\n  ParticipationRate = 849,\n/*\n****************************************************************\n* For communication of the performance of the order versus the *\n* target strategy                                              *\n****************************************************************\n*/\n  TargetStrategyPerformance = 850,\n/*\n**************************************************************\n* Indicator to identify whether this fill was a result of a  *\n* liquidity provider providing or liquidity taker taking the *\n* liquidity. Applicable only for OrdStatus of Partial or     *\n* Filled.                                                    *\n**************************************************************\n*/\n  LastLiquidityInd = 851,\n/*\n********************************************************\n* Indicates if a trade should be reported via a market *\n* reporting service.                                   *\n********************************************************\n*/\n  PublishTrdIndicator = 852,\n/*\n**************************\n* Reason for short sale. *\n**************************\n*/\n  ShortSaleReason = 853,\n/*\n***************************************************\n* Type of quantity specified in a quantity field: *\n***************************************************\n*/\n  QtyType = 854,\n/*\n**************************************************************\n* Additional TrdType(828) assigned to a trade by trade match *\n* system.                                                    *\n**************************************************************\n*/\n  SecondaryTrdType = 855,\n/*\n************************\n* Type of Trade Report *\n************************\n*/\n  TradeReportType = 856,\n/*\n*************************************************************\n* Indicates how the orders being booked and allocated by an *\n* Allocation Instruction or Allocation Report message are   *\n* identified, i.e. by explicit definition in the NoOrders   *\n* group or not.                                             *\n*************************************************************\n*/\n  AllocNoOrdersType = 857,\n/*\n***************************************************************\n* Commission to be shared with a third party, e.g. as part of *\n* a directed brokerage commission sharing arrangement.        *\n***************************************************************\n*/\n  SharedCommission = 858,\n/*\n********************************************************\n* Unique identifier for a Confirmation Request message *\n********************************************************\n*/\n  ConfirmReqID = 859,\n/*\n***************************************************************\n* Used to express average price as percent of par (used where *\n* AvgPx field is expressed in some other way)                 *\n***************************************************************\n*/\n  AvgParPx = 860,\n/*\n***************************************************************\n* Reported price (used to differentiate from AvgPx on a       *\n* confirmation of a marked-up or marked-down principal trade) *\n***************************************************************\n*/\n  ReportedPx = 861,\n/*\n**********************************************\n* Number of repeating OrderCapacity entries. *\n**********************************************\n*/\n  NoCapacities = 862,\n/*\n***************************************************************\n* Quantity executed under a specific OrderCapacity (e.g.      *\n* quantity executed as agent, quantity executed as principal) *\n***************************************************************\n*/\n  OrderCapacityQty = 863,\n/*\n******************************************\n* Number of repeating EventType entries. *\n******************************************\n*/\n  NoEvents = 864,\n/*\n***************************************\n* Code to represent the type of event *\n***************************************\n*/\n  EventType = 865,\n/*\n*****************\n* Date of event *\n*****************\n*/\n  EventDate = 866,\n/*\n********************************************************\n* Predetermined price of issue at event, if applicable *\n********************************************************\n*/\n  EventPx = 867,\n/*\n**********************************\n* Comments related to the event. *\n**********************************\n*/\n  EventText = 868,\n/*\n************************************************\n* Percent at risk due to lowest possible call. *\n************************************************\n*/\n  PctAtRisk = 869,\n/*\n************************************************\n* Number of repeating InstrAttribType entries. *\n************************************************\n*/\n  NoInstrAttrib = 870,\n/*\n******************************************************\n* Code to represent the type of instrument attribute *\n******************************************************\n*/\n  InstrAttribType = 871,\n/*\n***********************************************************\n* Attribute value appropriate to the InstrAttribType (87) *\n* field.                                                  *\n***********************************************************\n*/\n  InstrAttribValue = 872,\n/*\n****************************************************************\n* The effective date of a new securities issue determined by   *\n* its underwriters. Often but not always the same as the Issue *\n* Date and the Interest Accrual Date                           *\n****************************************************************\n*/\n  DatedDate = 873,\n/*\n****************************************************************\n* The start date used for calculating accrued interest on debt *\n* instruments which are being sold between interest payment    *\n* dates. Often but not always the same as the Issue Date and   *\n* the Dated Date                                               *\n****************************************************************\n*/\n  InterestAccrualDate = 874,\n/*\n********************************************************\n* The program under which a commercial paper is issued *\n********************************************************\n*/\n  CPProgram = 875,\n/*\n********************************************************\n* The registration type of a commercial paper issuance *\n********************************************************\n*/\n  CPRegType = 876,\n/*\n**************************************************************\n* The program under which the underlying commercial paper is *\n* issued                                                     *\n**************************************************************\n*/\n  UnderlyingCPProgram = 877,\n/*\n************************************************************\n* The registration type of the underlying commercial paper *\n* issuance                                                 *\n************************************************************\n*/\n  UnderlyingCPRegType = 878,\n/*\n********************************************************\n* Unit amount of the underlying security (par, shares, *\n* currency, etc.)                                      *\n********************************************************\n*/\n  UnderlyingQty = 879,\n/*\n********************************************************\n* Identifier assigned to a trade by a matching system. *\n********************************************************\n*/\n  TrdMatchID = 880,\n/*\n**************************************************************\n* Used to refer to a previous SecondaryTradeReportRefID when *\n* amending the transaction (cancel, replace, release, or     *\n* reversal).                                                 *\n**************************************************************\n*/\n  SecondaryTradeReportRefID = 881,\n/*\n*********************************************************\n* Price (percent-of-par or per unit) of the underlying  *\n* security or basket. \"Dirty\" means it includes accrued *\n* interest                                              *\n*********************************************************\n*/\n  UnderlyingDirtyPrice = 882,\n/*\n********************************************************\n* Price (percent-of-par or per unit) of the underlying *\n* security or basket at the end of the agreement.      *\n********************************************************\n*/\n  UnderlyingEndPrice = 883,\n/*\n****************************************************************\n* Currency value attributed to this collateral at the start of *\n* the agreement                                                *\n****************************************************************\n*/\n  UnderlyingStartValue = 884,\n/*\n**********************************************************\n* Currency value currently attributed to this collateral *\n**********************************************************\n*/\n  UnderlyingCurrentValue = 885,\n/*\n**************************************************************\n* Currency value attributed to this collateral at the end of *\n* the agreement                                              *\n**************************************************************\n*/\n  UnderlyingEndValue = 886,\n/*\n********************************************\n* Number of underlying stipulation entries *\n********************************************\n*/\n  NoUnderlyingStips = 887,\n/*\n****************************************\n* Type of stipulation.                 *\n* Same values as StipulationType (233) *\n****************************************\n*/\n  UnderlyingStipType = 888,\n/*\n*****************************************\n* Value of stipulation.                 *\n* Same values as StipulationValue (234) *\n*****************************************\n*/\n  UnderlyingStipValue = 889,\n/*\n**************************************************************\n* Net Money at maturity if Zero Coupon and maturity value is *\n* different from par value                                   *\n**************************************************************\n*/\n  MaturityNetMoney = 890,\n/*\n*********************************************\n* Defines the unit for a miscellaneous fee. *\n*********************************************\n*/\n  MiscFeeBasis = 891,\n/*\n***************************************************************\n* Total number of NoAlloc entries across all messages. Should *\n* be the sum of all NoAllocs in each message that has         *\n* repeating NoAlloc entries related to the same AllocID or    *\n* AllocReportID. Used to support fragmentation.               *\n***************************************************************\n*/\n  TotNoAllocs = 892,\n/*\n****************************************************************\n* Indicates whether this message is the last in a sequence of  *\n* messages for those messages that support fragmentation, such *\n* as Allocation Instruction, Mass Quote, Security List,        *\n* Derivative Security List                                     *\n****************************************************************\n*/\n  LastFragment = 893,\n/*\n*********************************\n* Collateral Request Identifier *\n*********************************\n*/\n  CollReqID = 894,\n/*\n************************************\n* Reason for Collateral Assignment *\n************************************\n*/\n  CollAsgnReason = 895,\n/*\n**********************************\n* Collateral inquiry qualifiers: *\n**********************************\n*/\n  CollInquiryQualifier = 896,\n/*\n****************************************\n* Number of trades in repeating group. *\n****************************************\n*/\n  NoTrades = 897,\n/*\n****************************************************************\n* The fraction of the cash consideration that must be          *\n* collateralized, expressed as a percent. A MarginRatio of 02% *\n* indicates that the value of the collateral (after deducting  *\n* for \"haircut\") must exceed the cash consideration by 2%.     *\n****************************************************************\n*/\n  MarginRatio = 898,\n/*\n*******************************************************\n* Excess margin amount (deficit if value is negative) *\n*******************************************************\n*/\n  MarginExcess = 899,\n/*\n**************************************************************\n* TotalNetValue is determined as follows:                    *\n* At the initial collateral assignment TotalNetValue is the  *\n* sum of (UnderlyingStartValue * (1-haircut)).               *\n* In a collateral substitution TotalNetValue is the sum of   *\n* (UnderlyingCurrentValue * (1-haircut)).                    *\n* For listed derivatives clearing margin management, this is *\n* the collateral value which equals (Market value * haircut) *\n**************************************************************\n*/\n  TotalNetValue = 900,\n/*\n******************************************\n* Starting consideration less repayments *\n******************************************\n*/\n  CashOutstanding = 901,\n/*\n************************************\n* Collateral Assignment Identifier *\n************************************\n*/\n  CollAsgnID = 902,\n/*\n******************************************\n* Collateral Assignment Transaction Type *\n******************************************\n*/\n  CollAsgnTransType = 903,\n/*\n**********************************\n* Collateral Response Identifier *\n**********************************\n*/\n  CollRespID = 904,\n/*\n***************************************\n* Collateral Assignment Response Type *\n***************************************\n*/\n  CollAsgnRespType = 905,\n/*\n***************************************\n* Collateral Assignment Reject Reason *\n***************************************\n*/\n  CollAsgnRejectReason = 906,\n/*\n***********************************************************\n* Collateral Assignment Identifier to which a transaction *\n* refers                                                  *\n***********************************************************\n*/\n  CollAsgnRefID = 907,\n/*\n********************************\n* Collateral Report Identifier *\n********************************\n*/\n  CollRptID = 908,\n/*\n*********************************\n* Collateral Inquiry Identifier *\n*********************************\n*/\n  CollInquiryID = 909,\n/*\n*********************\n* Collateral Status *\n*********************\n*/\n  CollStatus = 910,\n/*\n**************************************************************\n* Total number of reports returned in response to a request. *\n**************************************************************\n*/\n  TotNumReports = 911,\n/*\n****************************************************************\n* Indicates whether this message is that last report message   *\n* in response to a request, such as Order Mass Status Request. *\n****************************************************************\n*/\n  LastRptRequested = 912,\n/*\n**************************************************************\n* The full name of the base standard agreement, annexes and  *\n* amendments in place between the principals applicable to a *\n* financing transaction.                                     *\n**************************************************************\n*/\n  AgreementDesc = 913,\n/*\n***********************************************************\n* A common reference to the applicable standing agreement *\n* between the counterparties to a financing transaction.  *\n***********************************************************\n*/\n  AgreementID = 914,\n/*\n**************************************************************\n* A reference to the date the underlying agreement specified *\n* by AgreementID and AgreementDesc was executed.             *\n**************************************************************\n*/\n  AgreementDate = 915,\n/*\n****************************************************************\n* Start date of a financing deal, i.e. the date the buyer pays *\n* the seller cash and takes control of the collateral          *\n****************************************************************\n*/\n  StartDate = 916,\n/*\n**********************************************************\n* End date of a financing deal, i.e. the date the seller *\n* reimburses the buyer and takes back control of the     *\n* collateral                                             *\n**********************************************************\n*/\n  EndDate = 917,\n/*\n***********************************************************\n* Contractual currency forming the basis of a financing   *\n* agreement and associated transactions. Usually, but not *\n* always, the same as the trade currency.                 *\n***********************************************************\n*/\n  AgreementCurrency = 918,\n/*\n*********************************\n* Identifies type of settlement *\n*********************************\n*/\n  DeliveryType = 919,\n/*\n*****************************************************\n* Accrued Interest Amount applicable to a financing *\n* transaction on the End Date.                      *\n*****************************************************\n*/\n  EndAccruedInterestAmt = 920,\n/*\n***************************************************************\n* Starting dirty cash consideration of a financing deal, i.e. *\n* paid to the seller on the Start Date.                       *\n***************************************************************\n*/\n  StartCash = 921,\n/*\n*************************************************************\n* Ending dirty cash consideration of a financing deal. i.e. *\n* reimbursed to the buyer on the End Date.                  *\n*************************************************************\n*/\n  EndCash = 922,\n/*\n*****************************************\n* Unique identifier for a User Request. *\n*****************************************\n*/\n  UserRequestID = 923,\n/*\n***********************************************************\n* Indicates the action required by a User Request Message *\n***********************************************************\n*/\n  UserRequestType = 924,\n/*\n******************************\n* New Password or passphrase *\n******************************\n*/\n  NewPassword = 925,\n/*\n**********************************\n* Indicates the status of a user *\n**********************************\n*/\n  UserStatus = 926,\n/*\n*****************************************************\n* A text description associated with a user status. *\n*****************************************************\n*/\n  UserStatusText = 927,\n/*\n************************************************\n* Indicates the status of a network connection *\n************************************************\n*/\n  StatusValue = 928,\n/*\n********************************************************\n* A text description associated with a network status. *\n********************************************************\n*/\n  StatusText = 929,\n/*\n*******************************************\n* Assigned value used to identify a firm. *\n*******************************************\n*/\n  RefCompID = 930,\n/*\n**************************************************************\n* Assigned value used to identify specific elements within a *\n* firm.                                                      *\n**************************************************************\n*/\n  RefSubID = 931,\n/*\n*********************************************\n* Unique identifier for a network response. *\n*********************************************\n*/\n  NetworkResponseID = 932,\n/*\n*********************************************\n* Unique identifier for a network resquest. *\n*********************************************\n*/\n  NetworkRequestID = 933,\n/*\n***************************************************************\n* Identifier of the previous Network Response message sent to *\n* a counterparty, used to allow incremental updates.          *\n***************************************************************\n*/\n  LastNetworkResponseID = 934,\n/*\n**********************************************************\n* Indicates the type and level of details required for a *\n* Network Status Request Message                         *\n* Boolean logic applies EG If you want to subscribe for  *\n* changes to certain id's then UserRequestType =0 (8+2), *\n* Snapshot for certain ID's = 9 (8+1)                    *\n**********************************************************\n*/\n  NetworkRequestType = 935,\n/*\n**************************************************\n* Number of CompID entries in a repeating group. *\n**************************************************\n*/\n  NoCompIDs = 936,\n/*\n***************************************************\n* Indicates the type of Network Response Message. *\n***************************************************\n*/\n  NetworkStatusResponseType = 937,\n/*\n****************************************************************\n* Number of CollInquiryQualifier entries in a repeating group. *\n****************************************************************\n*/\n  NoCollInquiryQualifier = 938,\n/*\n***********************\n* Trade Report Status *\n***********************\n*/\n  TrdRptStatus = 939,\n/*\n*************************************************\n* Identifies the status of the ConfirmationAck. *\n*************************************************\n*/\n  AffirmStatus = 940,\n/*\n*******************************************************\n* Currency in which the strike price of an underlying *\n* instrument is denominated                           *\n*******************************************************\n*/\n  UnderlyingStrikeCurrency = 941,\n/*\n***************************************************************\n* Currency in which the strike price of a instrument leg of a *\n* multileg instrument is denominated                          *\n***************************************************************\n*/\n  LegStrikeCurrency = 942,\n/*\n*************************************************************\n* A code that represents a time interval in which a fill or *\n* trade occurred.                                           *\n* Required for US futures markets.                          *\n*************************************************************\n*/\n  TimeBracket = 943,\n/*\n**********************************************************\n* Action proposed for an Underlying Instrument instance. *\n**********************************************************\n*/\n  CollAction = 944,\n/*\n********************************\n* Status of Collateral Inquiry *\n********************************\n*/\n  CollInquiryStatus = 945,\n/*\n*************************************************************\n* Result returned in response to Collateral Inquiry         *\n* 4000+ Reserved and available for bi-laterally agreed upon *\n* user-defined values                                       *\n*************************************************************\n*/\n  CollInquiryResult = 946,\n/*\n*****************************************************\n* Currency in which the StrikePrice is denominated. *\n*****************************************************\n*/\n  StrikeCurrency = 947,\n/*\n***************************************************************\n* Number of Nested3PartyID (949), Nested3PartyIDSource (950), *\n* and Nested3PartyRole (95) entries                           *\n***************************************************************\n*/\n  NoNested3PartyIDs = 948,\n/*\n************************************************************\n* PartyID value within a \"third instance\" Nested repeating *\n* group.                                                   *\n* Same values as PartyID (448)                             *\n************************************************************\n*/\n  Nested3PartyID = 949,\n/*\n********************************************************\n* PartyIDSource value within a \"third instance\" Nested *\n* repeating group.                                     *\n* Same values as PartyIDSource (447)                   *\n********************************************************\n*/\n  Nested3PartyIDSource = 950,\n/*\n**************************************************************\n* PartyRole value within a \"third instance\" Nested repeating *\n* group.                                                     *\n* Same values as PartyRole (452)                             *\n**************************************************************\n*/\n  Nested3PartyRole = 951,\n/*\n**********************************************\n* Number of Nested3PartySubIDs (953) entries *\n**********************************************\n*/\n  NoNested3PartySubIDs = 952,\n/*\n***************************************************************\n* PartySubID value within a \"third instance\" Nested repeating *\n* group.                                                      *\n* Same values as PartySubID (523)                             *\n***************************************************************\n*/\n  Nested3PartySubID = 953,\n/*\n*********************************************************\n* PartySubIDType value within a \"third instance\" Nested *\n* repeating group.                                      *\n* Same values as PartySubIDType (803)                   *\n*********************************************************\n*/\n  Nested3PartySubIDType = 954,\n/*\n***********************************************************\n* Specifies when the contract (i.e. MBS/TBA) will settle. *\n***********************************************************\n*/\n  LegContractSettlMonth = 955,\n/*\n****************************************************************\n* The start date used for calculating accrued interest on debt *\n* instruments which are being sold between interest payment    *\n* dates. Often but not always the same as the Issue Date and   *\n* the Dated Date                                               *\n****************************************************************\n*/\n  LegInterestAccrualDate = 956,\n/*\n*******************************************\n* Indicates number of strategy parameters *\n*******************************************\n*/\n  NoStrategyParameters = 957,\n/*\n*********************\n* Name of parameter *\n*********************\n*/\n  StrategyParameterName = 958,\n/*\n*****************************\n* Datatype of the parameter *\n*****************************\n*/\n  StrategyParameterType = 959,\n/*\n**************************\n* Value of the parameter *\n**************************\n*/\n  StrategyParameterValue = 960,\n/*\n****************************************************************\n* Host assigned entity ID that can be used to reference all    *\n* components of a cross; sides + strategy + legs. Used as the  *\n* primary key with which to refer to the Cross Order for       *\n* cancellation and replace. The HostCrossID will also be used  *\n* to link together components of the Cross Order. For example, *\n* each individual Execution Report associated with the order   *\n* will carry HostCrossID in order to tie back to the original  *\n* cross order.                                                 *\n****************************************************************\n*/\n  HostCrossID = 961,\n/*\n****************************************************************\n* Indicates how long the order as specified in the side stays  *\n* in effect. SideTimeInForce allows a two-sided cross order to *\n* specify order behavior separately for each side. Absence of  *\n* this field indicates that TimeInForce should be referenced.  *\n* SideTimeInForce will override TimeInForce if both are        *\n* provided.                                                    *\n****************************************************************\n*/\n  SideTimeInForce = 962,\n/*\n*************************************************\n* Unique identifier for the Market Data Report. *\n*************************************************\n*/\n  MDReportID = 963,\n/*\n***************************************\n* Identifies a Security List message. *\n***************************************\n*/\n  SecurityReportID = 964,\n/*\n**********************************************************\n* Used for derivatives. Denotes the current state of the *\n* Instrument.                                            *\n**********************************************************\n*/\n  SecurityStatus = 965,\n/*\n**********************************************************\n* Indicator to determine if instrument is settle on open *\n**********************************************************\n*/\n  SettleOnOpenFlag = 966,\n/*\n****************************************************************\n* Used for derivatives. Multiplier applied to the strike price *\n* for the purpose of calculating the settlement value.         *\n****************************************************************\n*/\n  StrikeMultiplier = 967,\n/*\n************************************************************\n* Used for derivatives. The number of shares/units for the *\n* financial instrument involved in the option trade.       *\n************************************************************\n*/\n  StrikeValue = 968,\n/*\n******************************************************\n* Minimum price increase for a given exchange-traded *\n* Instrument                                         *\n******************************************************\n*/\n  MinPriceIncrement = 969,\n/*\n*******************************************************\n* Position Limit for a given exchange-traded product. *\n*******************************************************\n*/\n  PositionLimit = 970,\n/*\n********************************************************\n* Position Limit in the near-term contract for a given *\n* exchange-traded product.                             *\n********************************************************\n*/\n  NTPositionLimit = 971,\n/*\n****************************************************************\n* Percent of the Strike Price that this underlying represents. *\n****************************************************************\n*/\n  UnderlyingAllocationPercent = 972,\n/*\n*********************************************************\n* Cash amount associated with the underlying component. *\n*********************************************************\n*/\n  UnderlyingCashAmount = 973,\n/*\n***********************************************************\n* Used for derivatives that deliver into cash underlying. *\n***********************************************************\n*/\n  UnderlyingCashType = 974,\n/*\n********************************************************\n* Indicates order settlement period for the underlying *\n* instrument.                                          *\n********************************************************\n*/\n  UnderlyingSettlementType = 975,\n/*\n**************************************************************\n* Date associated to the quantity that is being reported for *\n* the position.                                              *\n**************************************************************\n*/\n  QuantityDate = 976,\n/*\n*******************************************************\n* Unique identifier for the Contrary Intention report *\n*******************************************************\n*/\n  ContIntRptID = 977,\n/*\n**************************************************************\n* Indicates if the contrary intention was received after the *\n* exchange imposed cutoff time                               *\n**************************************************************\n*/\n  LateIndicator = 978,\n/*\n************************************\n* Source of the contrary intention *\n************************************\n*/\n  InputSource = 979,\n  SecurityUpdateAction = 980,\n/*\n************************************\n* Number of Expiration Qty entries *\n************************************\n*/\n  NoExpiration = 981,\n/*\n****************************\n* Expiration Quantity type *\n****************************\n*/\n  ExpirationQtyType = 982,\n/*\n***********************************************************\n* Expiration Quantity associated with the Expiration Type *\n***********************************************************\n*/\n  ExpQty = 983,\n/*\n************************************************************\n* Total number of occurrences of Amount to pay in order to *\n* receive the underlying instrument                        *\n************************************************************\n*/\n  NoUnderlyingAmounts = 984,\n/*\n***************************************************************\n* Amount to pay in order to receive the underlying instrument *\n***************************************************************\n*/\n  UnderlyingPayAmount = 985,\n/*\n********************************************************\n* Amount to collect in order to deliver the underlying *\n* instrument                                           *\n********************************************************\n*/\n  UnderlyingCollectAmount = 986,\n/*\n***********************************************************\n* Date the underlying instrument will settle. Used for    *\n* derivatives that deliver into more than one underlying  *\n* instrument. Settlement dates can vary across underlying *\n* instruments.                                            *\n***********************************************************\n*/\n  UnderlyingSettlementDate = 987,\n/*\n************************************************************\n* Settlement status of the underlying instrument. Used for *\n* derivatives that deliver into more than one underlying   *\n* instrument. Settlement can be delayed for an underlying  *\n* instrument.                                              *\n************************************************************\n*/\n  UnderlyingSettlementStatus = 988,\n/*\n***********************************************************\n* Will allow the intermediary to specify an allocation ID *\n* generated by their system.                              *\n***********************************************************\n*/\n  SecondaryIndividualAllocID = 989,\n/*\n**********************************************************\n* Additional attribute to store the Trade ID of the Leg. *\n**********************************************************\n*/\n  LegReportID = 990,\n/*\n********************************************************\n* Specifies average price rounded to quoted precision. *\n********************************************************\n*/\n  RndPx = 991,\n/*\n***************************************************************\n* Identifies whether the allocation is to be sub-allocated or *\n* allocated to a third party                                  *\n***************************************************************\n*/\n  IndividualAllocType = 992,\n/*\n*************************************************\n* Capacity of customer in the allocation block. *\n*************************************************\n*/\n  AllocCustomerCapacity = 993,\n/*\n**********************************************************\n* The Tier the trade was matched by the clearing system. *\n**********************************************************\n*/\n  TierCode = 994,\n/*\n****************************************************************\n* The unit of measure of the underlying commodity upon which   *\n* the contract is based. Two groups of units of measure        *\n* enumerations are supported.                                  *\n* Fixed Magnitude UOMs are primarily used in energy            *\n* derivatives and specify a magnitude (such as, MM, Kilo, M,   *\n* etc.) and the dimension (such as, watt hours, BTU's) to      *\n* produce standard fixed measures (such as MWh -               *\n* Megawatt-hours, MMBtu - One million BTUs).                   *\n* The second group, Variable Quantity UOMs, specifies the      *\n* dimension as a single unit without a magnitude (or more      *\n* accurately a magnitude of one) and uses the                  *\n* UnitOfMeasureQty(1147) field to define the quantity of units *\n* per contract. Variable Quantity UOMs are used for both       *\n* commodities (such as lbs of lean cattle, bushels of corn,    *\n* ounces of gold) and financial futures.                       *\n* Examples:                                                    *\n* For lean cattle futures contracts, a UnitOfMeasure of 'lbs'  *\n* with a UnitOfMeasureQty(1147) of 40,000, means each lean     *\n* cattle futures contract represents 40,000 lbs of lean        *\n* cattle.                                                      *\n* For Eurodollars futures contracts, a UnitOfMeasure of USD    *\n* with a UnitOfMeasureQty(1147) of 1,000,000, means a          *\n* Eurodollar futures contract represents 1,000,000 USD.        *\n* For gold futures contracts, a UnitOfMeasure is oz_tr (Troy   *\n* ounce) with a UnitOfMeasureQty(1147) of 1,000, means each    *\n* gold futures contract represents 1,000 troy ounces of gold.  *\n****************************************************************\n*/\n  UnitOfMeasure = 996,\n/*\n**************************************************************\n* Unit of time associated with the contract.                 *\n* NOTE: Additional values may be used by mutual agreement of *\n* the counterparties                                         *\n**************************************************************\n*/\n  TimeUnit = 997,\n/*\n********************************************\n* Refer to defintion of UnitOfMeasure(996) *\n********************************************\n*/\n  UnderlyingUnitOfMeasure = 998,\n/*\n********************************************\n* Refer to defintion of UnitOfMeasure(996) *\n********************************************\n*/\n  LegUnitOfMeasure = 999,\n/*\n*********************\n* Same as TimeUnit. *\n*********************\n*/\n  UnderlyingTimeUnit = 1000,\n/*\n*********************\n* Same as TimeUnit. *\n*********************\n*/\n  LegTimeUnit = 1001,\n/*\n*********************************************************\n* Specifies the method under which a trade quantity was *\n* allocated.                                            *\n*********************************************************\n*/\n  AllocMethod = 1002,\n/*\n****************************************************************\n* The unique ID assigned to the trade entity once it is        *\n* received or matched by the exchange or central counterparty. *\n****************************************************************\n*/\n  TradeID = 1003,\n/*\n*********************************************************\n* Used on a multi-sided trade to designate the ReportID *\n*********************************************************\n*/\n  SideTradeReportID = 1005,\n/*\n*******************************************************\n* Used on a multi-sided trade to convey order routing *\n* information                                         *\n*******************************************************\n*/\n  SideFillStationCd = 1006,\n/*\n**************************************************************\n* Used on a multi-sided trade to convey reason for execution *\n**************************************************************\n*/\n  SideReasonCd = 1007,\n/*\n****************************************************************\n* Used on a multi-sided trade to specify the type of trade for *\n* a given side. Same values as TrdSubType (829).               *\n****************************************************************\n*/\n  SideTrdSubTyp = 1008,\n/*\n***************************************************************\n* Used to indicate the quantity on one of a multi-sided Trade *\n* Capture Report                                              *\n***************************************************************\n*/\n  SideLastQty = 1009,\n/*\n***************************************************************\n* Used to identify the event or source which gave rise to a   *\n* message.                                                    *\n* Valid values will be based on an exchange's implementation. *\n* Example values are:                                         *\n* \"MQM\" (originated at Firm Back Office)                      *\n* \"Clear\" (originated in Clearing System)                     *\n* \"Reg\" (static data generated via Register request)          *\n***************************************************************\n*/\n  MessageEventSource = 1011,\n/*\n************************************************************\n* Will be used in a multi-sided message.                   *\n* Traded Regulatory timestamp value Use to store time      *\n* information required by government regulators or self    *\n* regulatory organizations such as an exchange or clearing *\n* house                                                    *\n************************************************************\n*/\n  SideTrdRegTimestamp = 1012,\n/*\n*******************************\n* Same as TrdRegTimeStampType *\n*******************************\n*/\n  SideTrdRegTimestampType = 1013,\n/*\n***************************************************************\n* Same as TrdRegTimestampOrigin                               *\n* Text which identifies the origin i.e. system which was used *\n* to generate the time stamp for the Traded Regulatory        *\n* timestamp value                                             *\n***************************************************************\n*/\n  SideTrdRegTimestampSrc = 1014,\n/*\n****************************************************************\n* Used to indicate that a floor-trade was originally submitted *\n* \"as of\" a specific trade date which is earlier than its      *\n* clearing date.                                               *\n****************************************************************\n*/\n  AsOfIndicator = 1015,\n/*\n*********************************************************\n* Indicates number of SideTimestamps contained in group *\n*********************************************************\n*/\n  NoSideTrdRegTS = 1016,\n/*\n************************************************************\n* Expresses the risk of an option leg                      *\n* Value must be between -1 and 1.                          *\n* A Call Option will require a ratio value between 0 and 1 *\n* A Put Option will require a ratio value between -1 and 0 *\n************************************************************\n*/\n  LegOptionRatio = 1017,\n/*\n*******************************************************\n* Identifies the number of parties identified with an *\n* instrument                                          *\n*******************************************************\n*/\n  NoInstrumentParties = 1018,\n/*\n*************************************************************\n* PartyID value within an instrument party repeating group. *\n* Same values as PartyID (448)                              *\n*************************************************************\n*/\n  InstrumentPartyID = 1019,\n/*\n**************************************\n* Used to report volume with a trade *\n**************************************\n*/\n  TradeVolume = 1020,\n/*\n**************************************************************\n* Describes the type of book for which the feed is intended. *\n* Used when multiple feeds are provided over the same        *\n* connection                                                 *\n**************************************************************\n*/\n  MDBookType = 1021,\n/*\n**************************************************************\n* Describes a class of service for a given data feed, ie     *\n* Regular and Market Maker, Bandwidth Intensive or Bandwidth *\n* Conservative                                               *\n**************************************************************\n*/\n  MDFeedType = 1022,\n/*\n***************************************************************\n* Integer to convey the level of a bid or offer at a given    *\n* price level. This is in contrast to MDEntryPositionNo which *\n* is used to convey the position of an order within a Price   *\n* level                                                       *\n***************************************************************\n*/\n  MDPriceLevel = 1023,\n/*\n*******************************************************\n* Used to describe the origin of an entry in the book *\n*******************************************************\n*/\n  MDOriginType = 1024,\n/*\n******************************************************\n* Indicates the first trade price of the day/session *\n******************************************************\n*/\n  FirstPx = 1025,\n/*\n*********************************\n* The spot rate for an FX entry *\n*********************************\n*/\n  MDEntrySpotRate = 1026,\n/*\n***************************************************************\n* Used for an F/X entry. The forward points to be added to or *\n* subtracted from the spot rate to get the \"all-in\" rate in   *\n* MDEntryPx. Expressed in decimal form. For example, 61.99    *\n* points is expressed and sent as 0.006199                    *\n***************************************************************\n*/\n  MDEntryForwardPoints = 1027,\n/*\n**************************************************************\n* Indicates if the order was initially received manually (as *\n* opposed to electronically)                                 *\n**************************************************************\n*/\n  ManualOrderIndicator = 1028,\n/*\n***************************************************************\n* Indicates if the customer directed this order to a specific *\n* execution venue \"Y\" or not \"N\".                             *\n* A default of \"N\" customer did not direct this order should  *\n* be used in the case where the information is both missing   *\n* and essential.                                              *\n***************************************************************\n*/\n  CustDirectedOrder = 1029,\n/*\n*************************************************************\n* Identifies the Broker / Dealer Department that first took *\n* the order.                                                *\n*************************************************************\n*/\n  ReceivedDeptID = 1030,\n/*\n***************************************************************\n* Codes that apply special information that the Broker /      *\n* Dealer needs to report, as specified by the customer.       *\n* NOTE: This field and its values have no bearing on the      *\n* ExecInst and TimeInForce fields. These values should not be *\n* used instead of ExecInst or TimeInForce. This field and its *\n* values are intended for compliance reporting only.          *\n* Valid values are grouped by OrderHandlingInstSource(1032).  *\n***************************************************************\n*/\n  CustOrderHandlingInst = 1031,\n/*\n*************************************************************\n* Identifies the class or source of the \"OrderHandlingInst\" *\n* values. Scope of this will apply to both                  *\n* CustOrderHandlingInst and DeskOrderHandlingInst fields.   *\n* Required if CustOrderHandlingInst and/or                  *\n* DeskOrderHandlingInst is specified.                       *\n*************************************************************\n*/\n  OrderHandlingInstSource = 1032,\n/*\n******************************************************\n* Type of trading desk.  Valid values are grouped by *\n* DeskTypeSource(1034).                              *\n******************************************************\n*/\n  DeskType = 1033,\n/*\n************************************************************\n* Identifies the class or source of DeskType(1033) values. *\n* Required if DeskType(1033) is specified.                 *\n************************************************************\n*/\n  DeskTypeSource = 1034,\n/*\n***************************************************************\n* Codes that apply special information that the Broker /      *\n* Dealer needs to report.                                     *\n* NOTE: This field and its values have no bearing on the      *\n* ExecInst and TimeInForce fields. These values should not be *\n* used instead of ExecInst or TimeInForce. This field and its *\n* values are intended for compliance reporting only.          *\n* Valid values are grouped by OrderHandlingInstSource(1032).  *\n***************************************************************\n*/\n  DeskOrderHandlingInst = 1035,\n/*\n*********************************************************\n* The status of this execution acknowledgement message. *\n*********************************************************\n*/\n  ExecAckStatus = 1036,\n/*\n************************************************************\n* Indicates the underlying position amount to be delivered *\n************************************************************\n*/\n  UnderlyingDeliveryAmount = 1037,\n/*\n************************************************************\n* Maximum notional value for a capped financial instrument *\n************************************************************\n*/\n  UnderlyingCapValue = 1038,\n  UnderlyingSettlMethod = 1039,\n/*\n**************************************************************\n* Used to carry an internal trade entity ID which may or may *\n* not be reported to the firm                                *\n**************************************************************\n*/\n  SecondaryTradeID = 1040,\n/*\n***********************************************************\n* The ID assigned to a trade by the Firm to track a trade *\n* within the Firm system. This ID can be assigned either  *\n* before or after submission to the exchange or central   *\n* counterpary                                             *\n***********************************************************\n*/\n  FirmTradeID = 1041,\n/*\n***************************************************************\n* Used to carry an internal firm assigned ID which may or may *\n* not be reported to the exchange or central counterpary      *\n***************************************************************\n*/\n  SecondaryFirmTradeID = 1042,\n/*\n*********************************************************\n* conveys how the collateral should be/has been applied *\n*********************************************************\n*/\n  CollApplType = 1043,\n/*\n****************************************************************\n* Unit amount of the underlying security (shares) adjusted for *\n* pending corporate action not yet allocated.                  *\n****************************************************************\n*/\n  UnderlyingAdjustedQuantity = 1044,\n/*\n******************************************************\n* Foreign exchange rate used to compute              *\n* UnderlyingCurrentValue(885) (or market value) from *\n* UnderlyingCurrency(318) to Currency(15).           *\n******************************************************\n*/\n  UnderlyingFXRate = 1045,\n/*\n**********************************************************\n* Specifies whether the UnderlyingFxRate(1045) should be *\n* multiplied or divided.                                 *\n**********************************************************\n*/\n  UnderlyingFXRateCalc = 1046,\n/*\n***************************************************************\n* Indicates whether the resulting position after a trade      *\n* should be an opening position or closing position. Used for *\n* omnibus accounting - where accounts are held on a gross     *\n* basis instead of being netted together.                     *\n***************************************************************\n*/\n  AllocPositionEffect = 1047,\n/*\n************************************************\n* Identifies role of dealer; Agent, Principal, *\n* RisklessPrincipal                            *\n************************************************\n*/\n  DealingCapacity = 1048,\n/*\n***********************************************\n* Method under which assignment was conducted *\n***********************************************\n*/\n  InstrmtAssignmentMethod = 1049,\n/*\n***********************************************************\n* PartyIDSource value within an instrument partyrepeating *\n* group.                                                  *\n* Same values as PartyIDSource (447)                      *\n***********************************************************\n*/\n  InstrumentPartyIDSource = 1050,\n/*\n*************************************************************\n* PartyRole value within an instrument partyepeating group. *\n* Same values as PartyRole (452)                            *\n*************************************************************\n*/\n  InstrumentPartyRole = 1051,\n/*\n*********************************************\n* Number of InstrumentPartySubID (1053) and *\n* InstrumentPartySubIDType (1054) entries   *\n*********************************************\n*/\n  NoInstrumentPartySubIDs = 1052,\n/*\n****************************************************************\n* PartySubID value within an instrument party repeating group. *\n* Same values as PartySubID (523)                              *\n****************************************************************\n*/\n  InstrumentPartySubID = 1053,\n/*\n**********************************************\n* Type of InstrumentPartySubID (1053) value. *\n* Same values as PartySubIDType (803)        *\n**********************************************\n*/\n  InstrumentPartySubIDType = 1054,\n/*\n************************************************************\n* The Currency in which the position Amount is denominated *\n************************************************************\n*/\n  PositionCurrency = 1055,\n/*\n*************************************************************\n* Used for the calculated quantity of the other side of the *\n* currency trade. Can be derived from LastQty and LastPx.   *\n*************************************************************\n*/\n  CalculatedCcyLastQty = 1056,\n/*\n****************************************************************\n* Used to identify whether the order initiator is an aggressor *\n* or not in the trade.                                         *\n****************************************************************\n*/\n  AggressorIndicator = 1057,\n/*\n*******************************************************\n* Identifies the number of parties identified with an *\n* underlying instrument                               *\n*******************************************************\n*/\n  NoUndlyInstrumentParties = 1058,\n/*\n*******************************************************\n* PartyID value within an underlying instrument party *\n* repeating group.                                    *\n* Same values as PartyID (448)                        *\n*******************************************************\n*/\n  UnderlyingInstrumentPartyID = 1059,\n/*\n*******************************************************\n* PartyIDSource value within an underlying instrument *\n* partyrepeating group.                               *\n* Same values as PartyIDSource (447)                  *\n*******************************************************\n*/\n  UnderlyingInstrumentPartyIDSource = 1060,\n/*\n***************************************************\n* PartyRole value within an underlying instrument *\n* partyepeating group.                            *\n* Same values as PartyRole (452)                  *\n***************************************************\n*/\n  UnderlyingInstrumentPartyRole = 1061,\n/*\n********************************************************\n* Number of Underlying InstrumentPartySubID (1053) and *\n* InstrumentPartySubIDType (1054) entries              *\n********************************************************\n*/\n  NoUndlyInstrumentPartySubIDs = 1062,\n/*\n**********************************************************\n* PartySubID value within an underlying instrument party *\n* repeating group.                                       *\n* Same values as PartySubID (523)                        *\n**********************************************************\n*/\n  UnderlyingInstrumentPartySubID = 1063,\n/*\n*********************************************************\n* Type of underlying InstrumentPartySubID (1053) value. *\n* Same values as PartySubIDType (803)                   *\n*********************************************************\n*/\n  UnderlyingInstrumentPartySubIDType = 1064,\n/*\n*************************************************************\n* The bid FX Swap points for an FX Swap. It is the \"far bid *\n* forward points - near offer forward point\". Value can be  *\n* negative. Expressed in decimal form. For example, 61.99   *\n* points is expressed and sent as 0.006199                  *\n*************************************************************\n*/\n  BidSwapPoints = 1065,\n/*\n**************************************************************\n* The offer FX Swap points for an FX Swap. It is the \"far    *\n* offer forward points - near bid forward points\". Value can *\n* be negative. Expressed in decimal form. For example, 61.99 *\n* points is expressed and sent as 0.006199                   *\n**************************************************************\n*/\n  OfferSwapPoints = 1066,\n/*\n**************************************************************\n* The bid FX forward points for the leg of an FX Swap. Value *\n* can be negative. Expressed in decimal form. For example,   *\n* 61.99 points is expressed and sent as 0.006199             *\n**************************************************************\n*/\n  LegBidForwardPoints = 1067,\n/*\n****************************************************************\n* The offer FX forward points for the leg of an FX Swap. Value *\n* can be negative. Expressed in decimal form. For example,     *\n* 61.99 points is expressed and sent as 0.006199               *\n****************************************************************\n*/\n  LegOfferForwardPoints = 1068,\n/*\n****************************************************************\n* For FX Swap, this is used to express the differential        *\n* between the far leg's bid/offer and the near leg's           *\n* bid/offer. Value can be negative. Expressed in decimal form. *\n* For example, 61.99 points is expressed and sent as 0.006199  *\n****************************************************************\n*/\n  SwapPoints = 1069,\n/*\n**************************************\n* Identifies market data quote type. *\n**************************************\n*/\n  MDQuoteType = 1070,\n/*\n****************************************************************\n* For FX Swap, this is used to express the last market event   *\n* for the differential between the far leg's bid/offer and the *\n* near leg's bid/offer in a fill or partial fill. Value can be *\n* negative. Expressed in decimal form. For example, 61.99      *\n* points is expressed and sent as 0.006199                     *\n****************************************************************\n*/\n  LastSwapPoints = 1071,\n/*\n***************************************************************\n* The gross trade amount for this side of the trade. See also *\n* GrossTradeAmt (381) for additional definition.              *\n***************************************************************\n*/\n  SideGrossTradeAmt = 1072,\n/*\n**************************************************************\n* The forward points for this leg's fill event. Value can be *\n* negative. Expressed in decimal form. For example, 61.99    *\n* points is expressed and sent as 0.006199                   *\n**************************************************************\n*/\n  LegLastForwardPoints = 1073,\n/*\n*************************************************************\n* Used for the calculated quantity of the other side of the *\n* currency for this leg. Can be derived from LegQty and     *\n* LegLastPx.                                                *\n*************************************************************\n*/\n  LegCalculatedCcyLastQty = 1074,\n/*\n****************************************************************\n* The gross trade amount of the leg. For FX Futures this is    *\n* used to express the notional value of a fill when LegLastQty *\n* and other quantity fields are express in terms of contract   *\n* size.                                                        *\n****************************************************************\n*/\n  LegGrossTradeAmt = 1075,\n/*\n************************************************************\n* Time of security's maturity expressed in local time with *\n* offset to UTC specified                                  *\n************************************************************\n*/\n  MaturityTime = 1079,\n/*\n****************************************************\n* The ID reference to the order being hit or taken *\n****************************************************\n*/\n  RefOrderID = 1080,\n/*\n***************************************************************\n* Used to specify what identifier, provided in order depth    *\n* market data, to use when hitting (taking) a specific order. *\n***************************************************************\n*/\n  RefOrderIDSource = 1081,\n/*\n**************************************************************\n* Used for reserve orders when DisplayQty applies to the     *\n* primary execution market (e.g.an ECN) and another quantity *\n* is to be shown at other markets (e.g. the exchange). On    *\n* orders specifies the qty to be displayed, on execution     *\n* reports the currently displayed quantity.                  *\n**************************************************************\n*/\n  SecondaryDisplayQty = 1082,\n/*\n************************************************\n* Instructs when to refresh DisplayQty (1138). *\n************************************************\n*/\n  DisplayWhen = 1083,\n/*\n**********************************************************\n* Defines what value to use in DisplayQty (1138). If not *\n* specified the default DisplayMethod is \"1\"             *\n**********************************************************\n*/\n  DisplayMethod = 1084,\n/*\n***************************************************************\n* Defines the lower quantity limit to a randomized refresh of *\n* DisplayQty.                                                 *\n***************************************************************\n*/\n  DisplayLowQty = 1085,\n/*\n***************************************************************\n* Defines the upper quantity limit to a randomized refresh of *\n* DisplayQty.                                                 *\n***************************************************************\n*/\n  DisplayHighQty = 1086,\n/*\n***************************************************************\n* Defines the minimum increment to be used when calculating a *\n* random refresh of DisplayQty. A user specifies this when he *\n* wants a larger increment than the standard provided by the  *\n* market (e.g. the round lot size).                           *\n***************************************************************\n*/\n  DisplayMinIncr = 1087,\n/*\n****************************************************\n* Defines the quantity used to refresh DisplayQty. *\n****************************************************\n*/\n  RefreshQty = 1088,\n/*\n****************************************************************\n* Allows orders to specify a minimum quantity that applies to  *\n* every execution (one execution could be for multiple         *\n* counter-orders). The order may still fill against smaller    *\n* orders, but the cumulative quantity of the execution must be *\n* in multiples of the MatchIncrement.                          *\n****************************************************************\n*/\n  MatchIncrement = 1089,\n/*\n****************************************************************\n* Allows an order to specify a maximum number of price levels  *\n* to trade through. Only valid for aggressive orders and       *\n* during continuous (autoexecution) trading sessions. Property *\n* lost when order is put on book. A partially filled order is  *\n* assigned last trade price as limit price. Non-filled order   *\n* behaves as ordinary Market or Limit.                         *\n****************************************************************\n*/\n  MaxPriceLevels = 1090,\n/*\n***************************************************************\n* Allows trader to explicitly request anonymity or disclosure *\n* in pre-trade market data feeds. Anonymity is relevant in    *\n* markets where counterparties are regularly disclosed in     *\n* order depth feeds. Disclosure is relevant when              *\n* counterparties are not normally visible.                    *\n***************************************************************\n*/\n  PreTradeAnonymity = 1091,\n/*\n**************************************************************\n* Defines the type of price protection the customer requires *\n* on their order.                                            *\n**************************************************************\n*/\n  PriceProtectionScope = 1092,\n/*\n***********************************************\n* Defines the lot type assigned to the order. *\n***********************************************\n*/\n  LotType = 1093,\n/*\n****************************\n* Defines the type of peg. *\n****************************\n*/\n  PegPriceType = 1094,\n/*\n*************************************************************\n* The value of the reference price that the order is pegged *\n* to. PeggedRefPrice + PegOffsetValue (211) = PeggedPrice   *\n* (839) unless the limit price (44, Price) is breached. The *\n* values may not be exact due to rounding.                  *\n*************************************************************\n*/\n  PeggedRefPrice = 1095,\n/*\n*************************************************************\n* Defines the identity of the security off whose prices the *\n* order will peg. Same values as SecurityIDSource (22)      *\n*************************************************************\n*/\n  PegSecurityIDSource = 1096,\n/*\n*************************************************************\n* Defines the identity of the security off whose prices the *\n* order will peg.                                           *\n*************************************************************\n*/\n  PegSecurityID = 1097,\n/*\n****************************************************************\n* Defines the common, 'human understood' representation of the *\n* security off whose prices the order will Peg.                *\n****************************************************************\n*/\n  PegSymbol = 1098,\n/*\n*************************************************************\n* Security description of the security off whose prices the *\n* order will Peg.                                           *\n*************************************************************\n*/\n  PegSecurityDesc = 1099,\n/*\n****************************************************************\n* Defines when the trigger will hit, i.e. the action specified *\n* by the trigger instructions will come into effect.           *\n****************************************************************\n*/\n  TriggerType = 1100,\n/*\n*************************************************************\n* Defines the type of action to take when the trigger hits. *\n*************************************************************\n*/\n  TriggerAction = 1101,\n/*\n**********************************************\n* The price at which the trigger should hit. *\n**********************************************\n*/\n  TriggerPrice = 1102,\n/*\n****************************************************************\n* Defines the common, 'human understood' representation of the *\n* security whose prices will be tracked by the trigger logic.  *\n****************************************************************\n*/\n  TriggerSymbol = 1103,\n/*\n*************************************************************\n* Defines the identity of the security whose prices will be *\n* tracked by the trigger logic.                             *\n*************************************************************\n*/\n  TriggerSecurityID = 1104,\n/*\n*************************************************************\n* Defines the identity of the security whose prices will be *\n* tracked by the trigger logic. Same values as              *\n* SecurityIDSource (22).                                    *\n*************************************************************\n*/\n  TriggerSecurityIDSource = 1105,\n/*\n**********************************************************\n* Defines the security description of the security whose *\n* prices will be tracked by the trigger logic.           *\n**********************************************************\n*/\n  TriggerSecurityDesc = 1106,\n/*\n******************************************************\n* The type of price that the trigger is compared to. *\n******************************************************\n*/\n  TriggerPriceType = 1107,\n/*\n**************************************************************\n* Defines the type of price protection the customer requires *\n* on their order.                                            *\n**************************************************************\n*/\n  TriggerPriceTypeScope = 1108,\n/*\n*****************************************************\n* The side from which the trigger price is reached. *\n*****************************************************\n*/\n  TriggerPriceDirection = 1109,\n/*\n**************************************************************\n* The Price that the order should have after the trigger has *\n* hit. Could be applicable for any trigger type, but must be *\n* specified for Trigger Type 1.                              *\n**************************************************************\n*/\n  TriggerNewPrice = 1110,\n/*\n****************************************************************\n* The OrdType the order should have after the trigger has hit. *\n* Required to express orders that change from Limit to Market. *\n* Other values from OrdType (40) may be used if appropriate    *\n* and bilaterally agreed upon.                                 *\n****************************************************************\n*/\n  TriggerOrderType = 1111,\n/*\n************************************************************\n* The Quantity the order should have after the trigger has *\n* hit.                                                     *\n************************************************************\n*/\n  TriggerNewQty = 1112,\n/*\n**********************************************************\n* Defines the trading session at which the order will be *\n* activated.                                             *\n**********************************************************\n*/\n  TriggerTradingSessionID = 1113,\n/*\n**************************************************************\n* Defines the subordinate trading session at which the order *\n* will be activated.                                         *\n**************************************************************\n*/\n  TriggerTradingSessionSubID = 1114,\n/*\n****************************************************************\n* Defines the type of interest behind a trade (fill or partial *\n* fill).                                                       *\n****************************************************************\n*/\n  OrderCategory = 1115,\n/*\n***************************************************************\n* Number of RootPartyID (1117), RootPartyIDSource (1118), and *\n* RootPartyRole (1119) entries                                *\n***************************************************************\n*/\n  NoRootPartyIDs = 1116,\n/*\n**************************************************************\n* PartyID value within a root parties component. Same values *\n* as PartyID (448)                                           *\n**************************************************************\n*/\n  RootPartyID = 1117,\n/*\n*************************************************************\n* PartyIDSource value within a root parties component. Same *\n* values as PartyIDSource (447)                             *\n*************************************************************\n*/\n  RootPartyIDSource = 1118,\n/*\n****************************************************************\n* PartyRole value within a root parties component. Same values *\n* as PartyRole (452)                                           *\n****************************************************************\n*/\n  RootPartyRole = 1119,\n/*\n**********************************************************\n* Number of RootPartySubID (1121) and RootPartySubIDType *\n* (1122) entries                                         *\n**********************************************************\n*/\n  NoRootPartySubIDs = 1120,\n/*\n**********************************************************\n* PartySubID value within a root parties component. Same *\n* values as PartySubID (523)                             *\n**********************************************************\n*/\n  RootPartySubID = 1121,\n/*\n*******************************************************\n* Type of RootPartySubID (1121) value. Same values as *\n* PartySubIDType (803)                                *\n*******************************************************\n*/\n  RootPartySubIDType = 1122,\n/*\n***************************************************************\n* Specified how the Trade Capture Report should be handled by *\n* the Respondent.                                             *\n***************************************************************\n*/\n  TradeHandlingInstr = 1123,\n/*\n***************************************************************\n* Optionally used with TradeHandlingInstr = 0 to relay the    *\n* trade handling instruction used when reporting the trade to *\n* the marketplace. Same values as TradeHandlingInstr (1123)   *\n***************************************************************\n*/\n  OrigTradeHandlingInstr = 1124,\n/*\n****************************************************************\n* Used to preserve original trade date when original trade is  *\n* being referenced in a subsequent trade transaction such as a *\n* transfer                                                     *\n****************************************************************\n*/\n  OrigTradeDate = 1125,\n/*\n****************************************************************\n* Used to preserve original trade id when original trade is    *\n* being referenced in a subsequent trade transaction such as a *\n* transfer                                                     *\n****************************************************************\n*/\n  OrigTradeID = 1126,\n/*\n***************************************************************\n* Used to preserve original secondary trade id when original  *\n* trade is being referenced in a subsequent trade transaction *\n* such as a transfer                                          *\n***************************************************************\n*/\n  OrigSecondaryTradeID = 1127,\n/*\n***************************************************************\n* Specifies the service pack release being applied at message *\n* level. Enumerated field with values assigned at time of     *\n* service pack release                                        *\n***************************************************************\n*/\n  ApplVerID = 1128,\n/*\n**************************************************************\n* Specifies a custom extension to a message being applied at *\n* the message level. Enumerated field                        *\n**************************************************************\n*/\n  CstmApplVerID = 1129,\n/*\n**************************************************************\n* Specifies the service pack release being applied to a      *\n* message at the session level. Enumerated field with values *\n* assigned at time of service pack release. Uses same values *\n* as ApplVerID                                               *\n**************************************************************\n*/\n  RefApplVerID = 1130,\n/*\n**************************************************************\n* Specifies a custom extension to a message being applied at *\n* the session level.                                         *\n**************************************************************\n*/\n  RefCstmApplVerID = 1131,\n/*\n***************************************************************\n* Transact time in the local date-time stamp with a TZ offset *\n* to UTC identified                                           *\n***************************************************************\n*/\n  TZTransactTime = 1132,\n/*\n**********************************\n* The ID source of ExDestination *\n**********************************\n*/\n  ExDestinationIDSource = 1133,\n/*\n****************************************************************\n* Indicates that the reported price that is different from the *\n* market price. The price difference should be stated by using *\n* field 828 TrdType and, if required, field 829 TrdSubType     *\n****************************************************************\n*/\n  ReportedPxDiff = 1134,\n/*\n***************************************************************\n* Indicates the system or medium on which the report has been *\n* published                                                   *\n***************************************************************\n*/\n  RptSys = 1135,\n/*\n***************************************************\n* ClearingFeeIndicator(635) for Allocation, see   *\n* ClearingFeeIndicator(635) for permitted values. *\n***************************************************\n*/\n  AllocClearingFeeIndicator = 1136,\n/*\n**************************************************************\n* Specifies the service pack release being applied, by       *\n* default, to message at the session level. Enumerated field *\n* with values assigned at time of service pack release. Uses *\n* same values as ApplVerID                                   *\n**************************************************************\n*/\n  DefaultApplVerID = 1137,\n/*\n***************************************************************\n* The quantity to be displayed . Required for reserve orders. *\n* On orders specifies the qty to be displayed, on execution   *\n* reports the currently displayed quantity.                   *\n***************************************************************\n*/\n  DisplayQty = 1138,\n/*\n************************************************\n* Free format text string related to exchange. *\n************************************************\n*/\n  ExchangeSpecialInstructions = 1139,\n/*\n**********************************************************\n* The maximum order quantity that can be submitted for a *\n* security.                                              *\n**********************************************************\n*/\n  MaxTradeVol = 1140,\n/*\n**********************************************************\n* The number of feed types and corresponding book depths *\n* associated with a security                             *\n**********************************************************\n*/\n  NoMDFeedTypes = 1141,\n/*\n*************************************************************\n* The types of algorithm used to match orders in a specific *\n* security. Possilbe value types are FIFO, Allocation,      *\n* Pro-rata, Lead Market Maker, Currency Calender.           *\n*************************************************************\n*/\n  MatchAlgorithm = 1142,\n/*\n**************************************************************\n* The maximum price variation of an execution from one event *\n* to the next for a given security.                          *\n**************************************************************\n*/\n  MaxPriceVariation = 1143,\n/*\n***************************************************************\n* Indicates that an implied market should be created for      *\n* either the legs of a multi-leg instrument (Implied-in) or   *\n* for the multi-leg instrument based on the existence of the  *\n* legs (Implied-out). Determination as to whether implied     *\n* markets should be created is generally done at the level of *\n* the multi-leg instrument. Commonly used in listed           *\n* derivatives.                                                *\n***************************************************************\n*/\n  ImpliedMarketIndicator = 1144,\n/*\n**********************************************************\n* Specific time of event. To be used in combination with *\n* EventDate [866]                                        *\n**********************************************************\n*/\n  EventTime = 1145,\n/*\n***************************************************************\n* Minimum price increment amount associated with the          *\n* MinPriceIncrement ( tag 969). For listed derivatives, the   *\n* value can be calculated by multiplying MinPriceIncrement by *\n* ContractValueFactor(231).                                   *\n***************************************************************\n*/\n  MinPriceIncrementAmount = 1146,\n/*\n*************************************************************\n* Used to indicate the quantity of the underlying commodity *\n* unit of measure on which the contract is based, such as,  *\n* 2500 lbs of lean cattle, 1000 barrels of crude oil, 1000  *\n* bushels of corn, etc. UnitOfMeasureQty is required for    *\n* UnitOfMeasure(996) Variable Quantity UOMs enumerations.   *\n* Refer to the definition of UnitOfMeasure(996) for more    *\n* information on the use of UnitOfMeasureQty.               *\n*************************************************************\n*/\n  UnitOfMeasureQty = 1147,\n/*\n***************************************************************\n* Allowable low limit price for the trading day. A key        *\n* parameter in validating order price. Used as the lower band *\n* for validating order prices. Orders submitted with prices   *\n* below the lower limit will be rejected                      *\n***************************************************************\n*/\n  LowLimitPrice = 1148,\n/*\n***************************************************************\n* Allowable high limit price for the trading day. A key       *\n* parameter in validating order price. Used as the upper band *\n* for validating order prices. Orders submitted with prices   *\n* above the upper limit will be rejected                      *\n***************************************************************\n*/\n  HighLimitPrice = 1149,\n/*\n***************************************************************\n* Reference price for the current trading price range usually *\n* representing the mid price between the HighLimitPrice and   *\n* LowLimitPrice. The value may be the settlement price or     *\n* closing price of the prior trading day.                     *\n***************************************************************\n*/\n  TradingReferencePrice = 1150,\n/*\n************************************************************\n* An exchange specific name assigned to a group of related *\n* securities which may be concurrently affected by market  *\n* events and actions.                                      *\n************************************************************\n*/\n  SecurityGroup = 1151,\n/*\n**********************************************************\n* Allow sequencing of Legs for a Strategy to be captured *\n**********************************************************\n*/\n  LegNumber = 1152,\n/*\n***********************************************************\n* Settlement cycle in which the settlement obligation was *\n* generated                                               *\n***********************************************************\n*/\n  SettlementCycleNo = 1153,\n/*\n**************************************************************\n* Used to identify the trading currency on the Trade Capture *\n* Report Side                                                *\n**************************************************************\n*/\n  SideCurrency = 1154,\n/*\n*********************************************************\n* Used to identify the settlement currency on the Trade *\n* Capture Report Side                                   *\n*********************************************************\n*/\n  SideSettlCurrency = 1155,\n/*\n************************************************************\n* The extension pack number associated with an application *\n* message.                                                 *\n************************************************************\n*/\n  ApplExtID = 1156,\n/*\n**************************\n* Net flow of Currency 1 *\n**************************\n*/\n  CcyAmt = 1157,\n/*\n***************************************\n* Used to group Each Settlement Party *\n***************************************\n*/\n  NoSettlDetails = 1158,\n/*\n*********************************************************\n* Used to identify the reporting mode of the settlement *\n* obligation which is either preliminary or final       *\n*********************************************************\n*/\n  SettlObligMode = 1159,\n/*\n*******************************************************\n* Message identifier for Settlement Obligation Report *\n*******************************************************\n*/\n  SettlObligMsgID = 1160,\n/*\n**********************************************\n* Unique ID for this settlement instruction. *\n**********************************************\n*/\n  SettlObligID = 1161,\n/*\n*************************************************************\n* Transaction Type - required except where SettlInstMode is *\n* 5=Reject SSI request                                      *\n*************************************************************\n*/\n  SettlObligTransType = 1162,\n/*\n**********************************************************\n* Required where SettlInstTransType is Cancel or Replace *\n**********************************************************\n*/\n  SettlObligRefID = 1163,\n/*\n****************************************************************\n* Used to identify whether these delivery instructions are for *\n* the buyside or the sellside.                                 *\n****************************************************************\n*/\n  SettlObligSource = 1164,\n/*\n************************************\n* Number of settlement obligations *\n************************************\n*/\n  NoSettlOblig = 1165,\n/*\n******************************************\n* Unique identifier for a quote message. *\n******************************************\n*/\n  QuoteMsgID = 1166,\n/*\n**********************************************************\n* Identifies the status of an individual quote. See also *\n* QuoteStatus(297) which is used for single Quotes.      *\n**********************************************************\n*/\n  QuoteEntryStatus = 1167,\n/*\n*******************************************\n* Specifies the number of canceled quotes *\n*******************************************\n*/\n  TotNoCxldQuotes = 1168,\n/*\n*******************************************\n* Specifies the number of accepted quotes *\n*******************************************\n*/\n  TotNoAccQuotes = 1169,\n/*\n*******************************************\n* Specifies the number of rejected quotes *\n*******************************************\n*/\n  TotNoRejQuotes = 1170,\n/*\n**************************************************************\n* Specifies whether a quote is public, i.e. available to the *\n* market, or private, i.e. available to a specified          *\n* counterparty only.                                         *\n**************************************************************\n*/\n  PrivateQuote = 1171,\n/*\n************************************************\n* Specifies the type of respondents requested. *\n************************************************\n*/\n  RespondentType = 1172,\n/*\n****************************************************************\n* Describes a class of sub book, e.g. for the separation of    *\n* various lot types. The Sub Book Type indicates that the      *\n* following Market Data Entries belong to a non-integrated Sub *\n* Book. Whenever provided the Sub Book must be used together   *\n* with MDPriceLevel and MDEntryPositionNo in order to sort the *\n* order properly.                                              *\n* Values are bilaterally agreed.                               *\n****************************************************************\n*/\n  MDSubBookType = 1173,\n/*\n****************************************************************\n* Identifies an event related to a SecurityTradingStatus(326). *\n* An event occurs and is gone, it is not a state that applies  *\n* for a period of time.                                        *\n****************************************************************\n*/\n  SecurityTradingEvent = 1174,\n/*\n**********************************************************\n* Number of statistics indicator repeating group entries *\n**********************************************************\n*/\n  NoStatsIndicators = 1175,\n/*\n**********************\n* Type of statistics *\n**********************\n*/\n  StatsType = 1176,\n/*\n*********************************************************\n* The number of secondary sizes specifies in this entry *\n*********************************************************\n*/\n  NoOfSecSizes = 1177,\n/*\n*****************************************\n* Specifies the type of secondary size. *\n*****************************************\n*/\n  MDSecSizeType = 1178,\n/*\n************************************************************\n* A part of the MDEntrySize(271) that represents secondary *\n* interest as specified by MDSecSizeType(1178).            *\n************************************************************\n*/\n  MDSecSize = 1179,\n/*\n*********************************************************\n* Identifies the application with which a message is    *\n* associated. Used only if application sequencing is in *\n* effect.                                               *\n*********************************************************\n*/\n  ApplID = 1180,\n/*\n**************************************************************\n* Data sequence number to be used when FIX session is not in *\n* effect                                                     *\n**************************************************************\n*/\n  ApplSeqNum = 1181,\n/*\n***************************************************\n* Beginning range of application sequence numbers *\n***************************************************\n*/\n  ApplBegSeqNum = 1182,\n/*\n************************************************\n* Ending range of application sequence numbers *\n************************************************\n*/\n  ApplEndSeqNum = 1183,\n/*\n*****************************************\n* Lenght of the SecurityXML data block. *\n*****************************************\n*/\n  SecurityXMLLen = 1184,\n/*\n****************************************************************\n* Actual XML data stream describing a security, normally FpML. *\n****************************************************************\n*/\n  SecurityXML = 1185,\n/*\n***********************************************************\n* The schema used to validate the contents of SecurityXML *\n***********************************************************\n*/\n  SecurityXMLSchema = 1186,\n/*\n***********************************************************\n* Set by the sender to tell the receiver to perform an    *\n* immediate refresh of the book due to disruptions in the *\n* accompanying real-time feed                             *\n* 'Y' - Mandatory refresh by all participants             *\n* 'N' - Process as required                               *\n***********************************************************\n*/\n  RefreshIndicator = 1187,\n/*\n*******************************************************\n* Annualized volatility for option model calculations *\n*******************************************************\n*/\n  Volatility = 1188,\n/*\n****************************************************************\n* Time to expiration in years calculated as the number of days *\n* remaining to expiration divided by 365 days per year.        *\n****************************************************************\n*/\n  TimeToExpiration = 1189,\n/*\n********************************************************\n* Interest rate. Usually some form of short term rate. *\n********************************************************\n*/\n  RiskFreeRate = 1190,\n/*\n**************************************************************\n* Used to express the UOM of the price if different from the *\n* contract. In futures, this can be different for cross-rate *\n* products in which the price is quoted in units differently *\n* from the contract                                          *\n**************************************************************\n*/\n  PriceUnitOfMeasure = 1191,\n/*\n***************************************************************\n* Used to express the UOM Quantity of the price if different  *\n* from the contract. In futures, this can be different for    *\n* physically delivered products in which price is quoted in a *\n* unit size different from the contract, i.e. a Cattle Future *\n* contract has a UOMQty of 40,000 and a PriceUOMQty of 100.   *\n***************************************************************\n*/\n  PriceUnitOfMeasureQty = 1192,\n/*\n*******************************************************\n* Settlement method for a contract. Can be used as an *\n* alternative to CFI Code value                       *\n*******************************************************\n*/\n  SettlMethod = 1193,\n/*\n**********************************************\n* Type of exercise of a derivatives security *\n**********************************************\n*/\n  ExerciseStyle = 1194,\n/*\n***********************************************************\n* Cash amount indicating the pay out associated with an   *\n* option. For binary options this is a fixed amount.      *\n* Conditionally required if OptPayoutType(1482) is set to *\n* binary.                                                 *\n***********************************************************\n*/\n  OptPayoutAmount = 1195,\n/*\n******************************\n* Method for price quotation *\n******************************\n*/\n  PriceQuoteMethod = 1196,\n/*\n***************************************************\n* Specifies the type of valuation method applied. *\n***************************************************\n*/\n  ValuationMethod = 1197,\n/*\n************************************************************\n* Indicates whether instruments are pre-listed only or can *\n* also be defined via user request                         *\n************************************************************\n*/\n  ListMethod = 1198,\n/*\n******************************************************\n* Used to express the ceiling price of a capped call *\n******************************************************\n*/\n  CapPrice = 1199,\n/*\n***************************************************\n* Used to express the floor price of a capped put *\n***************************************************\n*/\n  FloorPrice = 1200,\n/*\n**************************************************************\n* Number of strike rule entries. This block specifies the    *\n* rules for determining how new strikes should be listed     *\n* within the stated price range of the underlying instrument *\n**************************************************************\n*/\n  NoStrikeRules = 1201,\n/*\n*************************************************************\n* Starting price for the range to which the StrikeIncrement *\n* applies. Price refers to the price of the underlying      *\n*************************************************************\n*/\n  StartStrikePxRange = 1202,\n/*\n**********************************************************\n* Ending price of the range to which the StrikeIncrement *\n* applies. Price refers to the price of the underlying   *\n**********************************************************\n*/\n  EndStrikePxRange = 1203,\n/*\n****************************************************************\n* Value by which strike price should be incremented within the *\n* specified price range.                                       *\n****************************************************************\n*/\n  StrikeIncrement = 1204,\n/*\n***************************************************************\n* Number of tick rules. This block specifies the rules for    *\n* determining how a security ticks, i.e. the price increments *\n* at which it can be quoted and traded, depending on the      *\n* current price of the security                               *\n***************************************************************\n*/\n  NoTickRules = 1205,\n/*\n*****************************************************\n* Starting price range for specified tick increment *\n*****************************************************\n*/\n  StartTickPriceRange = 1206,\n/*\n*******************************************************\n* Ending price range for the specified tick increment *\n*******************************************************\n*/\n  EndTickPriceRange = 1207,\n/*\n**************************************************************\n* Tick increment for stated price range. Specifies the valid *\n* price increments at which a security can be quoted and     *\n* traded                                                     *\n**************************************************************\n*/\n  TickIncrement = 1208,\n/*\n************************************************************\n* Specifies the type of tick rule which is being described *\n************************************************************\n*/\n  TickRuleType = 1209,\n/*\n******************************************************\n* Code to represent the type of instrument attribute *\n******************************************************\n*/\n  NestedInstrAttribType = 1210,\n/*\n************************************************************\n* Attribute value appropriate to the NestedInstrAttribType *\n* field                                                    *\n************************************************************\n*/\n  NestedInstrAttribValue = 1211,\n/*\n************************************************************\n* Time of security's maturity expressed in local time with *\n* offset to UTC specified                                  *\n************************************************************\n*/\n  LegMaturityTime = 1212,\n/*\n************************************************************\n* Time of security's maturity expressed in local time with *\n* offset to UTC specified                                  *\n************************************************************\n*/\n  UnderlyingMaturityTime = 1213,\n/*\n**************************************\n* Refer to definition for Symbol(55) *\n**************************************\n*/\n  DerivativeSymbol = 1214,\n/*\n*****************************************\n* Refer to definition for SymbolSfx(65) *\n*****************************************\n*/\n  DerivativeSymbolSfx = 1215,\n/*\n******************************************\n* Refer to definition for SecurityID(48) *\n******************************************\n*/\n  DerivativeSecurityID = 1216,\n/*\n************************************************\n* Refer to definition for SecurityIDSoruce(22) *\n************************************************\n*/\n  DerivativeSecurityIDSource = 1217,\n/*\n************************************************\n* Refer to definition for NoSecurityAltID(454) *\n************************************************\n*/\n  NoDerivativeSecurityAltID = 1218,\n/*\n**********************************************\n* Refer to definition for SecurityAltID(455) *\n**********************************************\n*/\n  DerivativeSecurityAltID = 1219,\n/*\n****************************************************\n* Refer to definition for SecurityAltIDSource(456) *\n****************************************************\n*/\n  DerivativeSecurityAltIDSource = 1220,\n/*\n**********************************************\n* Refer to definition of LowLimitPrice(1148) *\n**********************************************\n*/\n  SecondaryLowLimitPrice = 1221,\n/*\n**************************************************************\n* Allows maturity rule to be referenced via an identifier so *\n* that rules do not need to be explicitly enumerated         *\n**************************************************************\n*/\n  MaturityRuleID = 1222,\n/*\n************************************************************\n* Allows strike rule to be referenced via an identifier so *\n* that rules do not need to be explicitly enumerated       *\n************************************************************\n*/\n  StrikeRuleID = 1223,\n/*\n*************************************************\n* Refer to definition of UnitOfMeasureQty(1147) *\n*************************************************\n*/\n  LegUnitOfMeasureQty = 1224,\n/*\n*********************************************************\n* Cash amount indicating the pay out associated with an *\n* option. For binary options this is a fixed amount     *\n*********************************************************\n*/\n  DerivativeOptPayAmount = 1225,\n/*\n**************************************************\n* Ending maturity month year for an option class *\n**************************************************\n*/\n  EndMaturityMonthYear = 1226,\n/*\n**************************************************************\n* Identifies an entire suite of products for a given market. *\n* In Futures this may be \"interest rates\", \"agricultural\",   *\n* \"equity indexes\", etc.                                     *\n**************************************************************\n*/\n  ProductComplex = 1227,\n/*\n*********************************\n* Refer to ProductComplex(1227) *\n*********************************\n*/\n  DerivativeProductComplex = 1228,\n/*\n***************************************************************\n* Increment between successive maturities for an option class *\n***************************************************************\n*/\n  MaturityMonthYearIncrement = 1229,\n/*\n***********************************************\n* Refer to definition of HighLimitPrice(1149) *\n***********************************************\n*/\n  SecondaryHighLimitPrice = 1230,\n/*\n***********************************************************\n* Minimum lot size allowed based on lot type specified in *\n* LotType(1093)                                           *\n***********************************************************\n*/\n  MinLotSize = 1231,\n/*\n************************************\n* Number of execution instructions *\n************************************\n*/\n  NoExecInstRules = 1232,\n/*\n****************************\n* Number of Lot Type Rules *\n****************************\n*/\n  NoLotTypeRules = 1234,\n/*\n*************************\n* Number of Match Rules *\n*************************\n*/\n  NoMatchRules = 1235,\n/*\n*************************************************************\n* Number of maturity rules in MarurityRules component block *\n*************************************************************\n*/\n  NoMaturityRules = 1236,\n/*\n*************************\n* Number of order types *\n*************************\n*/\n  NoOrdTypeRules = 1237,\n/*\n**************************************\n* Number of time in force techniques *\n**************************************\n*/\n  NoTimeInForceRules = 1239,\n/*\n*******************************************************\n* Refer to definition for TradingReferencePrice(1150) *\n*******************************************************\n*/\n  SecondaryTradingReferencePrice = 1240,\n/*\n****************************************************\n* Starting maturity month year for an option class *\n****************************************************\n*/\n  StartMaturityMonthYear = 1241,\n/*\n**************************************************************\n* Used to indicate if a product or group of product supports *\n* the creation of flexible securities                        *\n**************************************************************\n*/\n  FlexProductEligibilityIndicator = 1242,\n/*\n**************************************************\n* Refer to FlexProductEligibilityIndicator(1242) *\n**************************************************\n*/\n  DerivFlexProductEligibilityIndicator = 1243,\n/*\n***************************************************************\n* Used to indicate a derivatives security that can be defined *\n* using flexible terms. The terms commonly permitted to be    *\n* defined by market participants are expiration date and      *\n* strike price. FlexibleIndicator is an alternative           *\n* CFICode(461) Standard/Non-standard attribute.               *\n***************************************************************\n*/\n  FlexibleIndicator = 1244,\n/*\n************************************************************\n* Used when the trading currency can differ from the price *\n* currency                                                 *\n************************************************************\n*/\n  TradingCurrency = 1245,\n  DerivativeProduct = 1246,\n  DerivativeSecurityGroup = 1247,\n  DerivativeCFICode = 1248,\n  DerivativeSecurityType = 1249,\n  DerivativeSecuritySubType = 1250,\n  DerivativeMaturityMonthYear = 1251,\n  DerivativeMaturityDate = 1252,\n  DerivativeMaturityTime = 1253,\n  DerivativeSettleOnOpenFlag = 1254,\n  DerivativeInstrmtAssignmentMethod = 1255,\n  DerivativeSecurityStatus = 1256,\n  DerivativeInstrRegistry = 1257,\n  DerivativeCountryOfIssue = 1258,\n  DerivativeStateOrProvinceOfIssue = 1259,\n  DerivativeLocaleOfIssue = 1260,\n  DerivativeStrikePrice = 1261,\n  DerivativeStrikeCurrency = 1262,\n  DerivativeStrikeMultiplier = 1263,\n  DerivativeStrikeValue = 1264,\n  DerivativeOptAttribute = 1265,\n  DerivativeContractMultiplier = 1266,\n  DerivativeMinPriceIncrement = 1267,\n  DerivativeMinPriceIncrementAmount = 1268,\n  DerivativeUnitOfMeasure = 1269,\n  DerivativeUnitOfMeasureQty = 1270,\n  DerivativeTimeUnit = 1271,\n  DerivativeSecurityExchange = 1272,\n  DerivativePositionLimit = 1273,\n  DerivativeNTPositionLimit = 1274,\n  DerivativeIssuer = 1275,\n  DerivativeIssueDate = 1276,\n  DerivativeEncodedIssuerLen = 1277,\n  DerivativeEncodedIssuer = 1278,\n  DerivativeSecurityDesc = 1279,\n  DerivativeEncodedSecurityDescLen = 1280,\n  DerivativeEncodedSecurityDesc = 1281,\n/*\n********************************************\n* Refer to definition SecurityXMLLen(1184) *\n********************************************\n*/\n  DerivativeSecurityXMLLen = 1282,\n/*\n********************************************\n* Refer to definition of SecurityXML(1185) *\n********************************************\n*/\n  DerivativeSecurityXML = 1283,\n/*\n**************************************************\n* Refer to definition of SecurityXMLSchema(1186) *\n**************************************************\n*/\n  DerivativeSecurityXMLSchema = 1284,\n  DerivativeContractSettlMonth = 1285,\n  NoDerivativeEvents = 1286,\n  DerivativeEventType = 1287,\n  DerivativeEventDate = 1288,\n  DerivativeEventTime = 1289,\n  DerivativeEventPx = 1290,\n  DerivativeEventText = 1291,\n/*\n*****************************************\n* Refer to definition of NoParties(453) *\n*****************************************\n*/\n  NoDerivativeInstrumentParties = 1292,\n/*\n***************************************\n* Refer to definition of PartyID(448) *\n***************************************\n*/\n  DerivativeInstrumentPartyID = 1293,\n/*\n*********************************************\n* Refer to definition of PartyIDSource(447) *\n*********************************************\n*/\n  DerivativeInstrumentPartyIDSource = 1294,\n/*\n*****************************************\n* REfer to definition of PartyRole(452) *\n*****************************************\n*/\n  DerivativeInstrumentPartyRole = 1295,\n/*\n**********************************************\n* Refer to definition for NoPartySubIDs(802) *\n**********************************************\n*/\n  NoDerivativeInstrumentPartySubIDs = 1296,\n/*\n*******************************************\n* Refer to definition for PartySubID(523) *\n*******************************************\n*/\n  DerivativeInstrumentPartySubID = 1297,\n/*\n***********************************************\n* Refer to definition for PartySubIDType(803) *\n***********************************************\n*/\n  DerivativeInstrumentPartySubIDType = 1298,\n/*\n**********************************************\n* Type of exercise of a derivatives security *\n**********************************************\n*/\n  DerivativeExerciseStyle = 1299,\n/*\n*********************************\n* Identifies the market segment *\n*********************************\n*/\n  MarketSegmentID = 1300,\n/*\n*************************\n* Identifies the Market *\n*************************\n*/\n  MarketID = 1301,\n/*\n*********************************************************\n* Unit of measure for the Maturity Month Year Increment *\n*********************************************************\n*/\n  MaturityMonthYearIncrementUnits = 1302,\n/*\n**********************************************************\n* Format used to generate the MaturityMonthYear for each *\n* option                                                 *\n**********************************************************\n*/\n  MaturityMonthYearFormat = 1303,\n/*\n*****************************************\n* Expiration Style for an option class: *\n*****************************************\n*/\n  StrikeExerciseStyle = 1304,\n/*\n****************************************************\n* Describes the how the price limits are expressed *\n****************************************************\n*/\n  SecondaryPriceLimitType = 1305,\n/*\n****************************************************\n* Describes the how the price limits are expressed *\n****************************************************\n*/\n  PriceLimitType = 1306,\n/*\n***********************************************************\n* Indicates execution instructions that are valid for the *\n* specified market segment                                *\n***********************************************************\n*/\n  ExecInstValue = 1308,\n/*\n***********************************************************\n* Allows trading rules to be expressed by trading session *\n***********************************************************\n*/\n  NoTradingSessionRules = 1309,\n/*\n************************************************************\n* Number of Market Segments on which a security may trade. *\n************************************************************\n*/\n  NoMarketSegments = 1310,\n  NoDerivativeInstrAttrib = 1311,\n  NoNestedInstrAttrib = 1312,\n/*\n***********************************************\n* Refer to definition of InstrAttribType(871) *\n***********************************************\n*/\n  DerivativeInstrAttribType = 1313,\n/*\n************************************************\n* Refer to definition of InstrAttribValue(872) *\n************************************************\n*/\n  DerivativeInstrAttribValue = 1314,\n/*\n****************************************************\n* Refer to definition for PriceUnitOfMeasure(1191) *\n****************************************************\n*/\n  DerivativePriceUnitOfMeasure = 1315,\n/*\n******************************************************\n* Refer to definition of PriceUnitOfMeasureQty(1192) *\n******************************************************\n*/\n  DerivativePriceUnitOfMeasureQty = 1316,\n/*\n********************************************\n* Refer to definition of SettlMethod(1193) *\n********************************************\n*/\n  DerivativeSettlMethod = 1317,\n/*\n*************************************************\n* Refer to definition of PriceQuoteMethod(1196) *\n*************************************************\n*/\n  DerivativePriceQuoteMethod = 1318,\n/*\n*************************************************\n* Refer to definition of ValuationMethod(1197). *\n*************************************************\n*/\n  DerivativeValuationMethod = 1319,\n/*\n************************************************************\n* Indicates whether instruments are pre-listed only or can *\n* also be defined via user request                         *\n************************************************************\n*/\n  DerivativeListMethod = 1320,\n/*\n*****************************************\n* Refer to definition of CapPrice(1199) *\n*****************************************\n*/\n  DerivativeCapPrice = 1321,\n/*\n*******************************************\n* Refer to definition of FloorPrice(1200) *\n*******************************************\n*/\n  DerivativeFloorPrice = 1322,\n/*\n****************************************************\n* Indicates whether an Option is for a put or call *\n****************************************************\n*/\n  DerivativePutOrCall = 1323,\n/*\n**********************************************************\n* If provided, then Instrument occurrence has explicitly *\n* changed                                                *\n**********************************************************\n*/\n  ListUpdateAction = 1324,\n/*\n*********************************************\n* Reference to a parent Market Segment. See *\n* MarketSegmentID(1300)                     *\n*********************************************\n*/\n  ParentMktSegmID = 1325,\n/*\n*******************************\n* Trading Session description *\n*******************************\n*/\n  TradingSessionDesc = 1326,\n/*\n********************************************************\n* Specifies the action taken for the specified trading *\n* sessions.                                            *\n********************************************************\n*/\n  TradSesUpdateAction = 1327,\n/*\n****************************************************************\n* Those will be used by Firms to send a reason for rejecting a *\n* trade in an allocate claim model.                            *\n****************************************************************\n*/\n  RejectText = 1328,\n/*\n***************************************************************\n* This is a multiplier that Clearing (Fee system) will use to *\n* calculate fees and will be sent to the firms on their       *\n* confirms.                                                   *\n***************************************************************\n*/\n  FeeMultiplier = 1329,\n/*\n**************************************\n* Refer to definition for Symbol(55) *\n**************************************\n*/\n  UnderlyingLegSymbol = 1330,\n/*\n*****************************************\n* Refer to definition for SymbolSfx(65) *\n*****************************************\n*/\n  UnderlyingLegSymbolSfx = 1331,\n/*\n******************************************\n* Refer to definition for SecurityID(48) *\n******************************************\n*/\n  UnderlyingLegSecurityID = 1332,\n/*\n************************************************\n* Refer to definition for SecurityIDSource(22) *\n************************************************\n*/\n  UnderlyingLegSecurityIDSource = 1333,\n/*\n************************************************\n* Refer to definition for NoSecurityAltID(454) *\n************************************************\n*/\n  NoUnderlyingLegSecurityAltID = 1334,\n/*\n**********************************************\n* Refer to definition for SecurityAltID(455) *\n**********************************************\n*/\n  UnderlyingLegSecurityAltID = 1335,\n/*\n****************************************************\n* Refer to definition for SecurityAltIDSource(456) *\n****************************************************\n*/\n  UnderlyingLegSecurityAltIDSource = 1336,\n/*\n*********************************************\n* Refer to definition for SecurityType(167) *\n*********************************************\n*/\n  UnderlyingLegSecurityType = 1337,\n/*\n************************************************\n* Refer to definition for SecuritySubType(762) *\n************************************************\n*/\n  UnderlyingLegSecuritySubType = 1338,\n/*\n**************************************************\n* Refer to definition for MaturityMonthYear(200) *\n**************************************************\n*/\n  UnderlyingLegMaturityMonthYear = 1339,\n/*\n********************************************\n* Refer to definition for StrikePrice(202) *\n********************************************\n*/\n  UnderlyingLegStrikePrice = 1340,\n/*\n*************************************************\n* Refer to definition for SecurityExchange(207) *\n*************************************************\n*/\n  UnderlyingLegSecurityExchange = 1341,\n/*\n***************************************************************\n* Number of Underlyings, Identifies the Underlying of the Leg *\n***************************************************************\n*/\n  NoOfLegUnderlyings = 1342,\n/*\n******************************************\n* Refer to definition for PutOrCall(201) *\n******************************************\n*/\n  UnderlyingLegPutOrCall = 1343,\n/*\n****************************************\n* Refer to definition for CFICode(461) *\n****************************************\n*/\n  UnderlyingLegCFICode = 1344,\n/*\n*********************\n* Date of maturity. *\n*********************\n*/\n  UnderlyingLegMaturityDate = 1345,\n/*\n*********************************\n* Unique identifier for request *\n*********************************\n*/\n  ApplReqID = 1346,\n/*\n***************************************************\n* Type of Application Message Request being made. *\n***************************************************\n*/\n  ApplReqType = 1347,\n/*\n************************************************************\n* Used to indicate the type of acknowledgement being sent. *\n************************************************************\n*/\n  ApplResponseType = 1348,\n/*\n******************************************************\n* Total number of messages included in transmission. *\n******************************************************\n*/\n  ApplTotalMessageCount = 1349,\n/*\n***************************************************************\n* Application sequence number of last message in transmission *\n***************************************************************\n*/\n  ApplLastSeqNum = 1350,\n/*\n**************************************************\n* Specifies number of application id occurrences *\n**************************************************\n*/\n  NoApplIDs = 1351,\n/*\n****************************************************************\n* Used to indicate that a message is being sent in response to *\n* an Application Message Request. It is possible for both      *\n* ApplResendFlag and PossDupFlag to be set on the same message *\n* if the Sender's cache size is greater than zero and the      *\n* message is being resent due to a session level resend        *\n* request                                                      *\n****************************************************************\n*/\n  ApplResendFlag = 1352,\n/*\n*****************************************************\n* Identifier for the Applicaton Message Request Ack *\n*****************************************************\n*/\n  ApplResponseID = 1353,\n/*\n**********************************************************\n* Used to return an error code or text associated with a *\n* response to an Application Request.                    *\n**********************************************************\n*/\n  ApplResponseError = 1354,\n/*\n*************************************************************\n* Reference to the unique application identifier which      *\n* corresponds to ApplID(1180) from the Application Sequence *\n* Group component                                           *\n*************************************************************\n*/\n  RefApplID = 1355,\n/*\n*************************************************\n* Identifier for the Application Sequence Reset *\n*************************************************\n*/\n  ApplReportID = 1356,\n/*\n****************************************************************\n* Application sequence number of last message in transmission. *\n****************************************************************\n*/\n  RefApplLastSeqNum = 1357,\n/*\n*****************************************\n* Refer to definition of PutOrCall(201) *\n*****************************************\n*/\n  LegPutOrCall = 1358,\n/*\n***************************************************************\n* Total number of fill entries across all messages. Should be *\n* the sum of all NoFills(1362) in each message that has       *\n* repeating list of fill entries related to the same          *\n* ExecID(17). Used to support fragmentation.                  *\n***************************************************************\n*/\n  TotNoFills = 1361,\n  NoFills = 1362,\n/*\n**************************************************************\n* Refer to ExecID(17). Used when multiple partial fills are  *\n* reported in single Execution Report. ExecID and FillExecID *\n* should not overlap,                                        *\n**************************************************************\n*/\n  FillExecID = 1363,\n/*\n***************************************\n* Price of Fill. Refer to LastPx(31). *\n***************************************\n*/\n  FillPx = 1364,\n/*\n*******************************************\n* Quantity of Fill. Refer to LastQty(32). *\n*******************************************\n*/\n  FillQty = 1365,\n/*\n*************************************************************\n* The AllocID(70) of an individual leg of a multileg order. *\n*************************************************************\n*/\n  LegAllocID = 1366,\n/*\n****************************************************************\n* Identifies settlement currency for the leg level allocation. *\n****************************************************************\n*/\n  LegAllocSettlCurrency = 1367,\n/*\n****************************************************************\n* Identifies an event related to a TradSesStatus(340). An      *\n* event occurs and is gone, it is not a state that applies for *\n* a period of time.                                            *\n****************************************************************\n*/\n  TradSesEvent = 1368,\n/*\n***************************************************************\n* Unique identifier of Order Mass Cancel Report or Order Mass *\n* Action Report message as assigned by sell-side (broker,     *\n* exchange, ECN)                                              *\n***************************************************************\n*/\n  MassActionReportID = 1369,\n/*\n***********************************************************\n* Number of not affected orders in the repeating group of *\n* order ids.                                              *\n***********************************************************\n*/\n  NoNotAffectedOrders = 1370,\n/*\n*********************************************************\n* OrderID(37) of an order not affected by a mass cancel *\n* request.                                              *\n*********************************************************\n*/\n  NotAffectedOrderID = 1371,\n/*\n***************************************************************\n* ClOrdID(11) of the previous order (NOT the initial order of *\n* the day) as assigned by the institution, used to identify   *\n* the previous order in cancel and cancel/replace requests.   *\n***************************************************************\n*/\n  NotAffOrigClOrdID = 1372,\n/*\n******************************************\n* Specifies the type of action requested *\n******************************************\n*/\n  MassActionType = 1373,\n/*\n*************************************************\n* Specifies scope of Order Mass Action Request. *\n*************************************************\n*/\n  MassActionScope = 1374,\n/*\n*************************************************************\n* Specifies the action taken by counterparty order handling *\n* system as a result of the action type indicated in        *\n* MassActionType of the Order Mass Action Request.          *\n*************************************************************\n*/\n  MassActionResponse = 1375,\n/*\n*************************************************\n* Reason Order Mass Action Request was rejected *\n*************************************************\n*/\n  MassActionRejectReason = 1376,\n/*\n*****************************************\n* Specifies the type of multileg order. *\n*****************************************\n*/\n  MultilegModel = 1377,\n/*\n***********************************************************\n* Code to represent how the multileg price is to be       *\n* interpreted when applied to the legs.                   *\n* (See Volume : \"Glossary\" for further value definitions) *\n***********************************************************\n*/\n  MultilegPriceMethod = 1378,\n/*\n**************************************************\n* Specifies the volatility of an instrument leg. *\n**************************************************\n*/\n  LegVolatility = 1379,\n/*\n****************************************************************\n* The continuously-compounded annualized dividend yield of the *\n* underlying(s) of an option. Used as a parameter to           *\n* theoretical option pricing models.                           *\n****************************************************************\n*/\n  DividendYield = 1380,\n/*\n************************************************\n* Refer to definition for DividendYield(1380). *\n************************************************\n*/\n  LegDividendYield = 1381,\n/*\n****************************************************************\n* Specifies the currency ratio between the currency used for a *\n* multileg price and the currency used by the outright book    *\n* defined by the leg. Example: Multileg quoted in EUR,         *\n* outright leg in USD and 1 EUR = 0,7 USD then CurrencyRatio = *\n* 0.7                                                          *\n****************************************************************\n*/\n  CurrencyRatio = 1382,\n/*\n****************************************************************\n* Specifies the currency ratio between the currency used for a *\n* multileg price and the currency used by the outright book    *\n* defined by the leg. Example: Multileg quoted in EUR,         *\n* outright leg in USD and 1 EUR = 0,7 USD then                 *\n* LegCurrencyRatio = 0.7                                       *\n****************************************************************\n*/\n  LegCurrencyRatio = 1383,\n/*\n*******************************\n* Refer to ExecInst(18)       *\n* Same values as ExecInst(18) *\n*******************************\n*/\n  LegExecInst = 1384,\n/*\n************************************\n* Defines the type of contingency. *\n************************************\n*/\n  ContingencyType = 1385,\n/*\n****************************************************************\n* Identifies the reason for rejection of a New Order List      *\n* message. Note that OrdRejReason(103) is used if the          *\n* rejection is based on properties of an individual order part *\n* of the List.                                                 *\n****************************************************************\n*/\n  ListRejectReason = 1386,\n/*\n****************************************\n* Number of trade reporting indicators *\n****************************************\n*/\n  NoTrdRepIndicators = 1387,\n/*\n**********************************************************\n* Identifies the type of party for trade reporting. Same *\n* values as PartyRole(452).                              *\n**********************************************************\n*/\n  TrdRepPartyRole = 1388,\n/*\n***************************************************************\n* Specifies whether the trade should be reported (or not) to  *\n* parties of the provided TrdRepPartyRole(1388). Used to      *\n* override standard reporting behavior by the receiver of the *\n* trade report and thereby complements the PublTrdIndicator(  *\n* tag1390).                                                   *\n***************************************************************\n*/\n  TrdRepIndicator = 1389,\n/*\n**********************************************************\n* Indicates if a trade should be reported via a market   *\n* reporting service. The indicator governs all reporting *\n* services of the recipient. Replaces                    *\n* PublishTrdIndicator(852).                              *\n**********************************************************\n*/\n  TradePublishIndicator = 1390,\n/*\n********************************************\n* Refer to definition of OptAttribute(206) *\n********************************************\n*/\n  UnderlyingLegOptAttribute = 1391,\n/*\n********************************************\n* Refer to definition of SecurityDesc(107) *\n********************************************\n*/\n  UnderlyingLegSecurityDesc = 1392,\n/*\n*****************************************************\n* Unique ID of a Market Definition Request message. *\n*****************************************************\n*/\n  MarketReqID = 1393,\n/*\n*****************************************\n* Market Definition message identifier. *\n*****************************************\n*/\n  MarketReportID = 1394,\n/*\n***************************************************************\n* Specifies the action taken for the specified MarketID(1301) *\n* + MarketSegmentID(1300).                                    *\n***************************************************************\n*/\n  MarketUpdateAction = 1395,\n/*\n*****************************************\n* Description or name of Market Segment *\n*****************************************\n*/\n  MarketSegmentDesc = 1396,\n/*\n*************************************************\n* Byte length of encoded (non-ASCII characters) *\n* EncodedMktSegmDesc(1324) field.               *\n*************************************************\n*/\n  EncodedMktSegmDescLen = 1397,\n/*\n**************************************************************\n* Encoded (non-ASCII characters) representation of the       *\n* MarketSegmDesc(1396) field in the encoded format specified *\n* via the MessageEncoding(347) field. If used, the ASCII     *\n* (English) representation should also be specified in the   *\n* MarketSegmDesc field.                                      *\n**************************************************************\n*/\n  EncodedMktSegmDesc = 1398,\n/*\n******************************************************\n* Used to specify a new application sequence number. *\n******************************************************\n*/\n  ApplNewSeqNum = 1399,\n/*\n****************************************************************\n* Enumeration defining the encryption method used to encrypt   *\n* password fields.                                             *\n* At this time there are no encryption methods defined by FPL. *\n****************************************************************\n*/\n  EncryptedPasswordMethod = 1400,\n/*\n***********************************************\n* Length of the EncryptedPassword(1402) field *\n***********************************************\n*/\n  EncryptedPasswordLen = 1401,\n/*\n**************************************************************\n* Encrypted password - encrypted via the method specified in *\n* the field EncryptedPasswordMethod(1400)                    *\n**************************************************************\n*/\n  EncryptedPassword = 1402,\n/*\n**************************************************\n* Length of the EncryptedNewPassword(1404) field *\n**************************************************\n*/\n  EncryptedNewPasswordLen = 1403,\n/*\n***************************************************************\n* Encrypted new password - encrypted via the method specified *\n* in the field EncryptedPasswordMethod(1400)                  *\n***************************************************************\n*/\n  EncryptedNewPassword = 1404,\n/*\n************************************************************\n* Time of security's maturity expressed in local time with *\n* offset to UTC specified                                  *\n************************************************************\n*/\n  UnderlyingLegMaturityTime = 1405,\n/*\n************************************************************\n* The extension pack number associated with an application *\n* message.                                                 *\n************************************************************\n*/\n  RefApplExtID = 1406,\n/*\n***********************************************************\n* The extension pack number that is the default for a FIX *\n* session.                                                *\n***********************************************************\n*/\n  DefaultApplExtID = 1407,\n/*\n*********************************************************\n* The default custom application version ID that is the *\n* default for a session.                                *\n*********************************************************\n*/\n  DefaultCstmApplVerID = 1408,\n/*\n***************************\n* Status of a FIX session *\n***************************\n*/\n  SessionStatus = 1409,\n  DefaultVerIndicator = 1410,\n/*\n**********************************************\n* Refer to definition of PartySubIDType(803) *\n**********************************************\n*/\n  Nested4PartySubIDType = 1411,\n/*\n******************************************\n* Refer to definition of PartySubID(523) *\n******************************************\n*/\n  Nested4PartySubID = 1412,\n/*\n*********************************************\n* Refer to definition of NoPartySubIDs(802) *\n*********************************************\n*/\n  NoNested4PartySubIDs = 1413,\n/*\n******************************************\n* Refer to definition of NoPartyIDs(453) *\n******************************************\n*/\n  NoNested4PartyIDs = 1414,\n/*\n***************************************\n* Refer to definition of PartyID(448) *\n***************************************\n*/\n  Nested4PartyID = 1415,\n/*\n*********************************************\n* Refer to definition of PartyIDSource(447) *\n*********************************************\n*/\n  Nested4PartyIDSource = 1416,\n/*\n*****************************************\n* Refer to definition of PartyRole(452) *\n*****************************************\n*/\n  Nested4PartyRole = 1417,\n/*\n****************************************\n* Fill quantity for the leg instrument *\n****************************************\n*/\n  LegLastQty = 1418,\n/*\n**********************************************\n* Type of exercise of a derivatives security *\n**********************************************\n*/\n  UnderlyingExerciseStyle = 1419,\n/*\n**********************************************\n* Type of exercise of a derivatives security *\n**********************************************\n*/\n  LegExerciseStyle = 1420,\n/*\n****************************************************\n* Refer to definition for PriceUnitOfMeasure(1191) *\n****************************************************\n*/\n  LegPriceUnitOfMeasure = 1421,\n/*\n******************************************************\n* Refer to definition of PriceUnitOfMeasureQty(1192) *\n******************************************************\n*/\n  LegPriceUnitOfMeasureQty = 1422,\n/*\n*************************************************\n* Refer to definition of UnitOfMeasureQty(1147) *\n*************************************************\n*/\n  UnderlyingUnitOfMeasureQty = 1423,\n/*\n****************************************************\n* Refer to definition for PriceUnitOfMeasure(1191) *\n****************************************************\n*/\n  UnderlyingPriceUnitOfMeasure = 1424,\n/*\n******************************************************\n* Refer to definition of PriceUnitOfMeasureQty(1192) *\n******************************************************\n*/\n  UnderlyingPriceUnitOfMeasureQty = 1425,\n/*\n******************\n* Type of report *\n******************\n*/\n  ApplReportType = 1426,\n/*\n**************************************************************\n* When reporting trades, used to reference the identifier of *\n* the execution (ExecID) being reported if different ExecIDs *\n* were assigned to each side of the trade.                   *\n**************************************************************\n*/\n  SideExecID = 1427,\n/*\n***************************************************************\n* Time lapsed from order entry until match, based on the unit *\n* of time specified in OrderDelayUnit.  Default is seconds if *\n* OrderDelayUnit is not specified. Value = 0, indicates the   *\n* aggressor (the initiating side of the trade).               *\n***************************************************************\n*/\n  OrderDelay = 1428,\n/*\n********************************************************\n* Time unit in which the OrderDelay(1428) is expressed *\n********************************************************\n*/\n  OrderDelayUnit = 1429,\n/*\n***********************************************************\n* Identifies the type of venue where a trade was executed *\n***********************************************************\n*/\n  VenueType = 1430,\n/*\n****************************************\n* The reason for updating the RefOrdID *\n****************************************\n*/\n  RefOrdIDReason = 1431,\n/*\n***************************************************************\n* The customer capacity for this trade at the time of the     *\n* order/execution.                                            *\n* Primarily used by futures exchanges to indicate the CTICode *\n* (customer type indicator) as required by the US CFTC        *\n* (Commodity Futures Trading Commission).                     *\n***************************************************************\n*/\n  OrigCustOrderCapacity = 1432,\n/*\n*************************************************************\n* Used to reference a previously submitted ApplReqID (1346) *\n* from within a subsequent                                  *\n* ApplicationMessageRequest(MsgType=BW)                     *\n*************************************************************\n*/\n  RefApplReqID = 1433,\n/*\n******************************\n* Type of pricing model used *\n******************************\n*/\n  ModelType = 1434,\n/*\n****************************************************************\n* Indicates the type of multiplier being applied to the        *\n* contract. Can be optionally used to further define what unit *\n* ContractMultiplier(tag 231) is expressed in.                 *\n****************************************************************\n*/\n  ContractMultiplierUnit = 1435,\n/*\n****************************************************************\n* \"Indicates the type of multiplier being applied to the       *\n* contract. Can be optionally used to further define what unit *\n* LegContractMultiplier(tag 614) is expressed in.              *\n****************************************************************\n*/\n  LegContractMultiplierUnit = 1436,\n/*\n****************************************************************\n* Indicates the type of multiplier being applied to the        *\n* contract. Can be optionally used to further define what unit *\n* UndlyContractMultiplier(tag 436) is expressed in.            *\n****************************************************************\n*/\n  UnderlyingContractMultiplierUnit = 1437,\n/*\n****************************************************************\n* Indicates the type of multiplier being applied to the        *\n* contract. Can be optionally used to further define what unit *\n* DerivativeContractMultiplier(tag 1266)is expressed in.       *\n****************************************************************\n*/\n  DerivativeContractMultiplierUnit = 1438,\n/*\n***************************************************************\n* The industry standard flow schedule by which electricity or *\n* natural gas is traded. Schedules exist by regions and       *\n* on-peak and off-peak status, such as \"Western Peak\".        *\n***************************************************************\n*/\n  FlowScheduleType = 1439,\n/*\n***************************************************************\n* The industry standard flow schedule by which electricity or *\n* natural gas is traded. Schedules exist by regions and       *\n* on-peak and off-peak status, such as \"Western Peak\".        *\n***************************************************************\n*/\n  LegFlowScheduleType = 1440,\n/*\n***************************************************************\n* The industry standard flow schedule by which electricity or *\n* natural gas is traded. Schedules exist by regions and       *\n* on-peak and off-peak status, such as \"Western Peak\".        *\n***************************************************************\n*/\n  UnderlyingFlowScheduleType = 1441,\n/*\n***************************************************************\n* The industry standard flow schedule by which electricity or *\n* natural gas is traded. Schedules exist by regions and       *\n* on-peak and off-peak status, such as \"Western Peak\".        *\n***************************************************************\n*/\n  DerivativeFlowScheduleType = 1442,\n/*\n**************************************************************\n* Indicator to identify whether this fill was a result of a  *\n* liquidity provider providing or liquidity taker taking the *\n* liquidity. Applicable only for OrdStatus of Partial or     *\n* Filled                                                     *\n**************************************************************\n*/\n  FillLiquidityInd = 1443,\n/*\n**************************************************************\n* Indicator to identify whether this fill was a result of a  *\n* liquidity provider providing or liquidity taker taking the *\n* liquidity. Applicable only for OrdStatus of Partial or     *\n* Filled.                                                    *\n**************************************************************\n*/\n  SideLiquidityInd = 1444,\n/*\n*******************************************\n* Number of rate sources being specified. *\n*******************************************\n*/\n  NoRateSources = 1445,\n/*\n***********************************************************\n* Identifies the source of rate information.              *\n* For FX, the reference source to be used for the FX spot *\n* rate.                                                   *\n***********************************************************\n*/\n  RateSource = 1446,\n/*\n***************************************************************\n* Indicates whether the rate source specified is a primary or *\n* secondary source.                                           *\n***************************************************************\n*/\n  RateSourceType = 1447,\n/*\n**************************************************************\n* Identifies the reference \"page\" from the rate source.      *\n* For FX, the reference page to the spot rate to be used for *\n* the reference FX spot rate.                                *\n**************************************************************\n*/\n  ReferencePage = 1448,\n/*\n**************************************************************\n* A category of CDS credit even in which the underlying bond *\n* experiences a restructuring.                               *\n* Used to define a CDS instrument.                           *\n**************************************************************\n*/\n  RestructuringType = 1449,\n/*\n****************************************************************\n* Specifies which issue (underlying bond) will receive payment *\n* priority in the event of a default.                          *\n* Used to define a CDS instrument.                             *\n****************************************************************\n*/\n  Seniority = 1450,\n/*\n****************************************************************\n* Indicates the notional percentage of the deal that is still  *\n* outstanding based on the remaining components of the index.  *\n* Used to calculate the true value of a CDS trade or position. *\n****************************************************************\n*/\n  NotionalPercentageOutstanding = 1451,\n/*\n***************************************************************\n* Used to reflect the Original value prior to the application *\n* of a credit event. See NotionalPercentageOutstanding(1451). *\n***************************************************************\n*/\n  OriginalNotionalPercentageOutstanding = 1452,\n/*\n*******************************\n* See RestructuringType(1449) *\n*******************************\n*/\n  UnderlyingRestructuringType = 1453,\n/*\n***********************\n* See Seniority(1450) *\n***********************\n*/\n  UnderlyingSeniority = 1454,\n/*\n*******************************************\n* See NotionalPercentageOutstanding(1451) *\n*******************************************\n*/\n  UnderlyingNotionalPercentageOutstanding = 1455,\n/*\n***************************************************\n* See OriginalNotionalPercentageOutstanding(1452) *\n***************************************************\n*/\n  UnderlyingOriginalNotionalPercentageOutstanding = 1456,\n/*\n***********************************************************\n* Lower bound percentage of the loss that the tranche can *\n* endure.                                                 *\n***********************************************************\n*/\n  AttachmentPoint = 1457,\n/*\n**************************************************************\n* Upper bound percentage of the loss the tranche can endure. *\n**************************************************************\n*/\n  DetachmentPoint = 1458,\n/*\n******************************\n* See AttachmentPoint(1457). *\n******************************\n*/\n  UnderlyingAttachmentPoint = 1459,\n/*\n******************************\n* See DetachmentPoint(1458). *\n******************************\n*/\n  UnderlyingDetachmentPoint = 1460,\n/*\n****************************************************************\n* Identifies the number of target parties identified in a mass *\n* action.                                                      *\n****************************************************************\n*/\n  NoTargetPartyIDs = 1461,\n/*\n*********************************************************\n* PartyID value within an target party repeating group. *\n*********************************************************\n*/\n  TargetPartyID = 1462,\n/*\n***************************************************************\n* PartyIDSource value within an target party repeating group. *\n* Same values as PartyIDSource (447)                          *\n***************************************************************\n*/\n  TargetPartyIDSource = 1463,\n/*\n***********************************************************\n* PartyRole value within an target party repeating group. *\n* Same values as PartyRole (452)                          *\n***********************************************************\n*/\n  TargetPartyRole = 1464,\n/*\n***********************************************\n* Specifies an identifier for a Security List *\n***********************************************\n*/\n  SecurityListID = 1465,\n/*\n************************************************************\n* Specifies a reference from one Security List to another. *\n* Used to support a hierarchy of Security Lists.           *\n************************************************************\n*/\n  SecurityListRefID = 1466,\n/*\n*******************************************************\n* Specifies a description or name of a Security List. *\n*******************************************************\n*/\n  SecurityListDesc = 1467,\n/*\n*************************************************\n* Byte length of encoded (non-ASCII characters) *\n* EncodedSecurityListDesc (tbd) field.          *\n*************************************************\n*/\n  EncodedSecurityListDescLen = 1468,\n/*\n***************************************************************\n* Encoded (non-ASCII characters) representation of the        *\n* SecurityListDesc (1467) field in the encoded format         *\n* specified via the MessageEncoding (347) field. If used, the *\n* ASCII (English) representation should also be specified in  *\n* the SecurityListDesc field.                                 *\n***************************************************************\n*/\n  EncodedSecurityListDesc = 1469,\n/*\n**************************************\n* Specifies a type of Security List. *\n**************************************\n*/\n  SecurityListType = 1470,\n/*\n****************************************************************\n* Specifies a specific source for a SecurityListType. Relevant *\n* when a certain type can be provided from various sources.    *\n****************************************************************\n*/\n  SecurityListTypeSource = 1471,\n/*\n****************************************\n* Unique identifier for a News message *\n****************************************\n*/\n  NewsID = 1472,\n/*\n****************************\n* Category of news mesage. *\n****************************\n*/\n  NewsCategory = 1473,\n/*\n*************************************************************\n* The national language in which the news item is provided. *\n*************************************************************\n*/\n  LanguageCode = 1474,\n/*\n**********************************\n* Number of News reference items *\n**********************************\n*/\n  NoNewsRefIDs = 1475,\n/*\n***************************************************\n* Reference to another News message identified by *\n* NewsID(1474).                                   *\n***************************************************\n*/\n  NewsRefID = 1476,\n/*\n****************************************************************\n* Type of reference to another News Message item. Defines if   *\n* the referenced news item is a replacement, is in a different *\n* language, or is complimentary.                               *\n****************************************************************\n*/\n  NewsRefType = 1477,\n/*\n****************************************************************\n* Specifies how the strike price is determined at the point of *\n* option exercise. The strike may be fixed throughout the life *\n* of the option, set at expiration to the value of the         *\n* underlying, set to the average value of the underlying , or  *\n* set to the optimal value of the underlying.                  *\n* Conditionally, required if value is other than \"fixed\".      *\n****************************************************************\n*/\n  StrikePriceDeterminationMethod = 1478,\n/*\n**************************************************************\n* Specifies the boundary condition to be used for the strike *\n* price relative to the underlying price at the point of     *\n* option exercise.                                           *\n**************************************************************\n*/\n  StrikePriceBoundaryMethod = 1479,\n/*\n*************************************************************\n* Used in combination with StrikePriceBoundaryMethod to     *\n* specify the percentage of the strike price in relation to *\n* the  underlying price. The percentage is generally 100 or *\n* greater for puts and 100 or less for calls.               *\n*************************************************************\n*/\n  StrikePriceBoundaryPrecision = 1480,\n/*\n****************************************************************\n* Specifies how the underlying price is determined at the      *\n* point of option exercise. The underlying price may be set to *\n* the current settlement price, set to a special reference,    *\n* set to the optimal value of the underlying during the        *\n* defined period (\"Look-back\") or set to the average value of  *\n* the underlying during the defined period (\"Asian option\").   *\n****************************************************************\n*/\n  UnderlyingPriceDeterminationMethod = 1481,\n/*\n*********************************************************\n* Indicates the type of payout that will result from an *\n* in-the-money option.                                  *\n*********************************************************\n*/\n  OptPayoutType = 1482,\n/*\n****************************************\n* Number of complex event occurrences. *\n****************************************\n*/\n  NoComplexEvents = 1483,\n/*\n*****************************************\n* Identifies the type of complex event. *\n*****************************************\n*/\n  ComplexEventType = 1484,\n/*\n****************************************************************\n* Cash amount indicating the pay out associated with an event. *\n* For binary options this is a fixed amount.                   *\n****************************************************************\n*/\n  ComplexOptPayoutAmount = 1485,\n/*\n****************************************************************\n* Specifies the price at which the complex event takes effect. *\n* Impact of the event price is determined by the               *\n* ComplexEventType(1484).                                      *\n****************************************************************\n*/\n  ComplexEventPrice = 1486,\n/*\n*************************************************************\n* Specifies the boundary condition to be used for the event *\n* price relative to the underlying price at the point the   *\n* complex event outcome takes effect as determined by the   *\n* ComplexEventPriceTimeType.                                *\n*************************************************************\n*/\n  ComplexEventPriceBoundaryMethod = 1487,\n/*\n***************************************************************\n* Used in combination with ComplexEventPriceBoundaryMethod to *\n* specify the percentage of the strike price in relation to   *\n* the  underlying price. The percentage is generally 100 or   *\n* greater for puts and 100 or less for calls.                 *\n***************************************************************\n*/\n  ComplexEventPriceBoundaryPrecision = 1488,\n/*\n***************************************************************\n* Specifies when the complex event outcome takes effect. The  *\n* outcome of a complex event is a payout or barrier action as *\n* specified by the ComplexEventType.                          *\n***************************************************************\n*/\n  ComplexEventPriceTimeType = 1489,\n/*\n***************************************************************\n* Specifies the condition between complex events when more    *\n* than one event is specified.                                *\n* Multiple barrier events would use an \"or\" condition since   *\n* only one can be effective at a given time. A set of digital *\n* range events would use an \"and\" condition since both        *\n* conditions must be in effect for a payout to result.        *\n***************************************************************\n*/\n  ComplexEventCondition = 1490,\n/*\n****************************************************************\n* Number of complex event date occurrences for a given complex *\n* event.                                                       *\n****************************************************************\n*/\n  NoComplexEventDates = 1491,\n/*\n****************************************************************\n* Specifies the start date of the date range on which a        *\n* complex event is effective. The start date will be set equal *\n* to the end date for single day events such as Bermuda        *\n* options                                                      *\n* ComplexEventStartDate must always be less than or equal to   *\n* ComplexEventEndDate.                                         *\n****************************************************************\n*/\n  ComplexEventStartDate = 1492,\n/*\n***************************************************************\n* Specifies the end date of the date range on which a complex *\n* event is effective. The start date will be set equal to the *\n* end date for single day events such as Bermuda options      *\n* ComplexEventEndDate must always be greater than or equal to *\n* ComplexEventStartDate.                                      *\n***************************************************************\n*/\n  ComplexEventEndDate = 1493,\n/*\n****************************************************************\n* Number of complex event time occurrences for a given complex *\n* event date                                                   *\n* The default in case of an absence of time fields is          *\n* 00:00:00-23:59:59.                                           *\n****************************************************************\n*/\n  NoComplexEventTimes = 1494,\n/*\n**************************************************************\n* Specifies the start time of the time range on which a      *\n* complex event date is effective.                           *\n* ComplexEventStartTime must always be less than or equal to *\n* ComplexEventEndTime.                                       *\n**************************************************************\n*/\n  ComplexEventStartTime = 1495,\n/*\n***************************************************************\n* Specifies the end time of the time range on which a complex *\n* event date is effective.                                    *\n* ComplexEventEndTime must always be greater than or equal to *\n* ComplexEventStartTime.                                      *\n***************************************************************\n*/\n  ComplexEventEndTime = 1496,\n/*\n****************************************************************\n* Unique identifier for the stream assignment request provided *\n* by the requester.                                            *\n****************************************************************\n*/\n  StreamAsgnReqID = 1497,\n/*\n**************************************\n* Type of stream assignment request. *\n**************************************\n*/\n  StreamAsgnReqType = 1498,\n/*\n**********************************\n* Number of assignment requests. *\n**********************************\n*/\n  NoAsgnReqs = 1499,\n/*\n***********************************************\n* The identifier or name of the price stream. *\n***********************************************\n*/\n  MDStreamID = 1500,\n/*\n**************************************************************\n* Unique identifier of the stream assignment report provided *\n* by the respondent.                                         *\n**************************************************************\n*/\n  StreamAsgnRptID = 1501,\n/*\n*****************************************************\n* Reason code for stream assignment request reject. *\n*****************************************************\n*/\n  StreamAsgnRejReason = 1502,\n/*\n****************************\n* Type of acknowledgement. *\n****************************\n*/\n  StreamAsgnAckType = 1503,\n/*\n************************\n* See TransactTime(60) *\n************************\n*/\n  RelSymTransactTime = 1504,\n/*\n*******************************************************\n* The type of assignment being affected in the Stream *\n* Assignment Report.                                  *\n*******************************************************\n*/\n  StreamAsgnType = 1617\n}\n"]}