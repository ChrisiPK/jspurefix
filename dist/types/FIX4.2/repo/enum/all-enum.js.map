{"version":3,"file":"all-enum.js","sourceRoot":"","sources":["../../../../../src/types/FIX4.2/repo/enum/all-enum.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n*************************************\n* Broker's side of advertised trade *\n*************************************\n*/\nexport enum AdvSide {\n  Buy = 'B',\n  Sell = 'S',\n  Trade = 'T',\n  Cross = 'X'\n}\n\n/*\n*****************************************************\n* Identifies advertisement message transaction type *\n*****************************************************\n*/\nexport enum AdvTransType {\n  Cancel = 'C',\n  New = 'N',\n  Replace = 'R'\n}\n\n/*\n*******************\n* Commission type *\n*******************\n*/\nexport enum CommType {\n  PerUnit = '1',\n  Percent = '2',\n  Absolute = '3'\n}\n\n/*\n****************************************************************\n* Instructions for order handling on exchange trading floor.   *\n* If more than one instruction is applicable to an order, this *\n* field can contain multiple instructions separated by space.  *\n****************************************************************\n*/\nexport enum ExecInst {\n  StayOnOfferSide = '0',\n  NotHeld = '1',\n  Work = '2',\n  GoAlong = '3',\n  OverTheDay = '4',\n  Held = '5',\n  ParticipateDoNotInitiate = '6',\n  StrictScale = '7',\n  TryToScale = '8',\n  StayOnBidSide = '9',\n  NoCross = 'A',\n  OkToCross = 'B',\n  CallFirst = 'C',\n  PercentOfVolume = 'D',\n  DoNotIncrease = 'E',\n  DoNotReduce = 'F',\n  AllOrNone = 'G',\n  InstitutionsOnly = 'I',\n  LastPeg = 'L',\n  MidPricePeg = 'M',\n  NonNegotiable = 'N',\n  OpeningPeg = 'O',\n  MarketPeg = 'P',\n  PrimaryPeg = 'R',\n  Suspend = 'S',\n  FixedPegToLocalBestBidOrOfferAtTimeOfOrder = 'T',\n  CustomerDisplayInstruction = 'U',\n  Netting = 'V',\n  PegToVwap = 'W'\n}\n\n/*\n*******************************\n* Identifies transaction type *\n*******************************\n*/\nexport enum ExecTransType {\n  New = '0',\n  Cancel = '1',\n  Correct = '2',\n  Status = '3'\n}\n\n/*\n***********************************************************\n* Instructions for order handling on Broker trading floor *\n***********************************************************\n*/\nexport enum HandlInst {\n  AutomatedExecutionNoIntervention = '1',\n  AutomatedExecutionInterventionOk = '2',\n  ManualOrder = '3'\n}\n\n/*\n**********************************************\n* Identifies class of alternative SecurityID *\n**********************************************\n*/\nexport enum IDSource {\n  Cusip = '1',\n  Sedol = '2',\n  Quik = '3',\n  IsinNumber = '4',\n  RicCode = '5',\n  IsoCurrencyCode = '6',\n  IsoCountryCode = '7',\n  ExchangeSymbol = '8',\n  ConsolidatedTapeAssociation = '9'\n}\n\n/*\n**********************************\n* Relative quality of indication *\n**********************************\n*/\nexport enum IOIQltyInd {\n  High = 'H',\n  Low = 'L',\n  Medium = 'M'\n}\n\n/*\n*************************************************\n* Number of shares in numeric or relative size. *\n*************************************************\n*/\nexport enum IOIShares {\n  Large = 'L',\n  Medium = 'M',\n  Small = 'S'\n}\n\n/*\n*******************************************\n* Identifies IOI message transaction type *\n*******************************************\n*/\nexport enum IOITransType {\n  Cancel = 'C',\n  New = 'N',\n  Replace = 'R'\n}\n\n/*\n**************************************\n* Broker capacity in order execution *\n**************************************\n*/\nexport enum LastCapacity {\n  Agent = '1',\n  CrossAsAgent = '2',\n  CrossAsPrincipal = '3',\n  Principal = '4'\n}\n\n/*\n****************************************************************\n* Defines message type. ALWAYS THIRD FIELD IN MESSAGE. (Always *\n* unencrypted)                                                 *\n* Note: A \"U\" as the first character in the MsgType field      *\n* (i.e. U1, U2, etc) indicates that the message format is      *\n* privately defined between the sender and receiver.           *\n****************************************************************\n*/\nexport enum MsgType {\n  Heartbeat = '0',\n  TestRequest = '1',\n  ResendRequest = '2',\n  Reject = '3',\n  SequenceReset = '4',\n  Logout = '5',\n  Ioi = '6',\n  Advertisement = '7',\n  ExecutionReport = '8',\n  OrderCancelReject = '9',\n  QuoteStatusRequest = 'a',\n  Logon = 'A',\n  News = 'B',\n  MassQuoteAcknowledgement = 'b',\n  Email = 'C',\n  SecurityDefinitionRequest = 'c',\n  NewOrderSingle = 'D',\n  SecurityDefinition = 'd',\n  NewOrderList = 'E',\n  SecurityStatusRequest = 'e',\n  SecurityStatus = 'f',\n  OrderCancelRequest = 'F',\n  OrderCancelReplaceRequest = 'G',\n  TradingSessionStatusRequest = 'g',\n  OrderStatusRequest = 'H',\n  TradingSessionStatus = 'h',\n  MassQuote = 'i',\n  BusinessMessageReject = 'j',\n  AllocationInstruction = 'J',\n  ListCancelRequest = 'K',\n  BidRequest = 'k',\n  BidResponse = 'l',\n  ListExecute = 'L',\n  ListStrikePrice = 'm',\n  ListStatusRequest = 'M',\n  ListStatus = 'N',\n  AllocationInstructionAck = 'P',\n  DontKnowTrade = 'Q',\n  QuoteRequest = 'R',\n  Quote = 'S',\n  SettlementInstructions = 'T',\n  MarketDataRequest = 'V',\n  MarketDataSnapshotFullRefresh = 'W',\n  MarketDataIncrementalRefresh = 'X',\n  MarketDataRequestReject = 'Y',\n  QuoteCancel = 'Z'\n}\n\n/*\n***************************************\n* Identifies current status of order. *\n***************************************\n*/\nexport enum OrdStatus {\n  New = '0',\n  PartiallyFilled = '1',\n  Filled = '2',\n  DoneForDay = '3',\n  Canceled = '4',\n  Replaced = '5',\n  PendingCancel = '6',\n  Stopped = '7',\n  Rejected = '8',\n  Suspended = '9',\n  PendingNew = 'A',\n  Calculated = 'B',\n  Expired = 'C',\n  AcceptedForBidding = 'D',\n  PendingReplace = 'E'\n}\n\n/*\n***************\n* Order type. *\n***************\n*/\nexport enum OrdType {\n  Market = '1',\n  Limit = '2',\n  Stop = '3',\n  StopLimit = '4',\n  MarketOnClose = '5',\n  WithOrWithout = '6',\n  LimitOrBetter = '7',\n  LimitWithOrWithout = '8',\n  OnBasis = '9',\n  OnClose = 'A',\n  LimitOnClose = 'B',\n  ForexMarket = 'C',\n  PreviouslyQuoted = 'D',\n  PreviouslyIndicated = 'E',\n  ForexLimit = 'F',\n  ForexSwap = 'G',\n  ForexPreviouslyQuoted = 'H',\n  Funari = 'I',\n  Pegged = 'P'\n}\n\n/*\n**********************************************************\n* Indicates possible retransmission of message with this *\n* sequence number                                        *\n**********************************************************\n*/\nexport enum PossDupFlag {\n  OriginalTransmission = 'N',\n  PossibleDuplicate = 'Y'\n}\n\n/*\n****************************************************************\n* Note that the name of this field is changing to              *\n* \"OrderCapacity\" as Rule80A is a very US market-specific      *\n* term. Other world markets need to convey similar             *\n* information, however, often a subset of the US values. . See *\n* the \"Rule80A (aka OrderCapacity) Usage by Market\" appendix   *\n* for market-specific usage of this field.                     *\n****************************************************************\n*/\nexport enum Rule80A {\n  AgencySingleOrder = 'A',\n  ShortExemptTransactionAType = 'B',\n  ProprietaryNonAlgo = 'C',\n  ProgramOrderMember = 'D',\n  ShortExemptTransactionForPrincipal = 'E',\n  ShortExemptTransactionWType = 'F',\n  ShortExemptTransactionIType = 'H',\n  IndividualInvestor = 'I',\n  ProprietaryAlgo = 'J',\n  AgencyAlgo = 'K',\n  ShortExemptTransactionMemberAffliated = 'L',\n  ProgramOrderOtherMember = 'M',\n  AgentForOtherMember = 'N',\n  ProprietaryTransactionAffiliated = 'O',\n  Principal = 'P',\n  TransactionNonMember = 'R',\n  SpecialistTrades = 'S',\n  TransactionUnaffiliatedMember = 'T',\n  AgencyIndexArb = 'U',\n  AllOtherOrdersAsAgentForOtherMember = 'W',\n  ShortExemptTransactionMemberNotAffliated = 'X',\n  AgencyNonAlgo = 'Y',\n  ShortExemptTransactionNonMember = 'Z'\n}\n\n/*\n*****************\n* Side of order *\n*****************\n*/\nexport enum Side {\n  Buy = '1',\n  Sell = '2',\n  BuyMinus = '3',\n  SellPlus = '4',\n  SellShort = '5',\n  SellShortExempt = '6',\n  Undisclosed = '7',\n  Cross = '8',\n  CrossShort = '9'\n}\n\n/*\n**************************************************************\n* Specifies how long the order remains in effect. Absence of *\n* this field is interpreted as DAY.                          *\n**************************************************************\n*/\nexport enum TimeInForce {\n  Day = '0',\n  GoodTillCancel = '1',\n  AtTheOpening = '2',\n  ImmediateOrCancel = '3',\n  FillOrKill = '4',\n  GoodTillCrossing = '5',\n  GoodTillDate = '6'\n}\n\n/*\n****************\n* Urgency flag *\n****************\n*/\nexport enum Urgency {\n  Normal = '0',\n  Flash = '1',\n  Background = '2'\n}\n\n/*\n***************************************************************\n* Indicates order settlement period. Absence of this field is *\n* interpreted as Regular. Regular is defined as the default   *\n* settlement period for the particular security on the        *\n* exchange of execution.                                      *\n***************************************************************\n*/\nexport enum SettlmntTyp {\n  Regular = '0',\n  Cash = '1',\n  NextDay = '2',\n  TPlus2 = '3',\n  TPlus3 = '4',\n  TPlus4 = '5',\n  Future = '6',\n  WhenAndIfIssued = '7',\n  SellersOption = '8',\n  TPlus5 = '9'\n}\n\n/*\n******************************************\n* Identifies allocation transaction type *\n******************************************\n*/\nexport enum AllocTransType {\n  New = '0',\n  Replace = '1',\n  Cancel = '2',\n  Preliminary = '3',\n  Calculated = '4',\n  CalculatedWithoutPreliminary = '5'\n}\n\n/*\n***************************************************************\n* Indicates whether the resulting position after a trade      *\n* should be an opening position or closing position. Used for *\n* omnibus accounting - where accounts are held on a gross     *\n* basis instead of being netted together.                     *\n***************************************************************\n*/\nexport enum OpenClose {\n  Close = 'C',\n  Open = 'O'\n}\n\n/*\n****************************************************************\n* Processing code for sub-account. Absence of this field in    *\n* AllocAccount / AllocPrice/AllocShares / ProcessCode instance *\n* indicates regular trade.                                     *\n****************************************************************\n*/\nexport enum ProcessCode {\n  Regular = '0',\n  SoftDollar = '1',\n  StepIn = '2',\n  StepOut = '3',\n  SoftDollarStepIn = '4',\n  SoftDollarStepOut = '5',\n  PlanSponsor = '6'\n}\n\n/*\n************************************\n* Identifies status of allocation. *\n************************************\n*/\nexport enum AllocStatus {\n  Accepted = 0,\n  BlockLevelReject = 1,\n  AccountLevelReject = 2,\n  Received = 3\n}\n\n/*\n************************************\n* Identifies reason for rejection. *\n************************************\n*/\nexport enum AllocRejCode {\n  UnknownAccount = 0,\n  IncorrectQuantity = 1,\n  IncorrectAveragegPrice = 2,\n  UnknownExecutingBrokerMnemonic = 3,\n  CommissionDifference = 4,\n  UnknownOrderId = 5,\n  UnknownListId = 6,\n  OtherSeeText = 7\n}\n\n/*\n***********************\n* Email message type. *\n***********************\n*/\nexport enum EmailType {\n  New = '0',\n  Reply = '1',\n  AdminReply = '2'\n}\n\n/*\n****************************************************************\n* Indicates that message may contain information that has been *\n* sent under another sequence number.                          *\n****************************************************************\n*/\nexport enum PossResend {\n  OriginalTransmission = 'N',\n  PossibleResend = 'Y'\n}\n\n/*\n*************************\n* Method of encryption. *\n*************************\n*/\nexport enum EncryptMethod {\n  None = 0,\n  Pkcs = 1,\n  Des = 2,\n  Pkcsdes = 3,\n  Pgpdes = 4,\n  Pgpdesmd5 = 5,\n  Pem = 6\n}\n\n/*\n*************************************************\n* Code to identify reason for cancel rejection. *\n*************************************************\n*/\nexport enum CxlRejReason {\n  TooLateToCancel = 0,\n  UnknownOrder = 1,\n  BrokerCredit = 2,\n  OrderAlreadyInPendingStatus = 3\n}\n\n/*\n************************************************\n* Code to identify reason for order rejection. *\n************************************************\n*/\nexport enum OrdRejReason {\n  BrokerCredit = 0,\n  UnknownSymbol = 1,\n  ExchangeClosed = 2,\n  OrderExceedsLimit = 3,\n  TooLateToEnter = 4,\n  UnknownOrder = 5,\n  DuplicateOrder = 6,\n  DuplicateOfAVerballyCommunicatedOrder = 7,\n  StaleOrder = 8\n}\n\n/*\n****************************\n* Code to qualify IOI use. *\n****************************\n*/\nexport enum IOIQualifier {\n  AllOrNone = 'A',\n  AtTheClose = 'C',\n  InTouchWith = 'I',\n  Limit = 'L',\n  MoreBehind = 'M',\n  AtTheOpen = 'O',\n  TakingAPosition = 'P',\n  AtTheMarket = 'Q',\n  ReadyToTrade = 'R',\n  PortfolioShown = 'S',\n  ThroughTheDay = 'T',\n  Versus = 'V',\n  Indication = 'W',\n  CrossingOpportunity = 'X',\n  AtTheMidpoint = 'Y',\n  PreOpen = 'Z'\n}\n\n/*\n******************************************************\n* Identifies party of trade responsible for exchange *\n* reporting.                                         *\n******************************************************\n*/\nexport enum ReportToExch {\n  SenderReports = 'N',\n  ReceiverReports = 'Y'\n}\n\n/*\n**********************************************************\n* Indicates whether the broker is to locate the stock in *\n* conjunction with a short sell order.                   *\n**********************************************************\n*/\nexport enum LocateReqd {\n  No = 'N',\n  Yes = 'Y'\n}\n\n/*\n*********************************************************\n* Indicates request for forex accommodation trade to be *\n* executed along with security transaction.             *\n*********************************************************\n*/\nexport enum ForexReq {\n  DoNotExecuteForexAfterSecurityTrade = 'N',\n  ExecuteForexAfterSecurityTrade = 'Y'\n}\n\n/*\n************************************************************\n* Indicates that the Sequence Reset message is replacing   *\n* administrative or application messages which will not be *\n* resent.                                                  *\n************************************************************\n*/\nexport enum GapFillFlag {\n  SequenceReset = 'N',\n  GapFillMessage = 'Y'\n}\n\n/*\n***********************************\n* Reason for execution rejection. *\n***********************************\n*/\nexport enum DKReason {\n  UnknownSymbol = 'A',\n  WrongSide = 'B',\n  QuantityExceedsOrder = 'C',\n  NoMatchingOrder = 'D',\n  PriceExceedsLimit = 'E',\n  Other = 'Z'\n}\n\n/*\n****************************************************************\n* Indicates that IOI is the result of an existing agency order *\n* or a facilitation position resulting from an agency order,   *\n* not from principal trading or order solicitation activity.   *\n****************************************************************\n*/\nexport enum IOINaturalFlag {\n  NotNatural = 'N',\n  Natural = 'Y'\n}\n\n/*\n****************************************\n* Indicates type of miscellaneous fee. *\n****************************************\n*/\nexport enum MiscFeeType {\n  Regulatory = '1',\n  Tax = '2',\n  LocalCommission = '3',\n  ExchangeFees = '4',\n  Stamp = '5',\n  Levy = '6',\n  Other = '7',\n  Markup = '8',\n  ConsumptionTax = '9'\n}\n\n/*\n***********************************************************\n* Indicates that the both sides of the FIX session should *\n* reset sequence numbers.                                 *\n***********************************************************\n*/\nexport enum ResetSeqNumFlag {\n  No = 'N',\n  Yes = 'Y'\n}\n\n/*\n*************************************************************\n* Describes the specific ExecutionRpt (i.e. Pending Cancel) *\n* while OrdStatus will always identify the current order    *\n* status (i.e. Partially Filled)                            *\n*************************************************************\n*/\nexport enum ExecType {\n  New = '0',\n  PartialFill = '1',\n  Fill = '2',\n  DoneForDay = '3',\n  Canceled = '4',\n  Replaced = '5',\n  PendingCancel = '6',\n  Stopped = '7',\n  Rejected = '8',\n  Suspended = '9',\n  PendingNew = 'A',\n  Calculated = 'B',\n  Expired = 'C',\n  Restated = 'D',\n  PendingReplace = 'E'\n}\n\n/*\n***************************************************\n* Indicates mode used for Settlement Instructions *\n***************************************************\n*/\nexport enum SettlInstMode {\n  Default = '0',\n  StandingInstructionsProvided = '1',\n  SpecificAllocationAccountOverriding = '2',\n  SpecificAllocationAccountStanding = '3'\n}\n\n/*\n****************************************************\n* Settlement Instructions message transaction type *\n****************************************************\n*/\nexport enum SettlInstTransType {\n  Cancel = 'C',\n  New = 'N',\n  Replace = 'R'\n}\n\n/*\n***********************************************\n* Indicates source of Settlement Instructions *\n***********************************************\n*/\nexport enum SettlInstSource {\n  BrokerCredit = '1',\n  Institution = '2'\n}\n\n/*\n***********************************************************\n* Identifies Settlement Depository or Country Code (ISITC *\n* spec)                                                   *\n***********************************************************\n*/\nexport enum SettlLocation {\n  Cedel = 'CED',\n  DepositoryTrustCompany = 'DTC',\n  EuroClear = 'EUR',\n  FederalBookEntry = 'FED',\n  LocalMarketSettleLocation = 'ISO Country Code',\n  Physical = 'PNY',\n  ParticipantTrustCompany = 'PTC'\n}\n\n/*\n*******************************************\n* Indicates type of security (ISITC spec) *\n*******************************************\n*/\nexport enum SecurityType {\n  Wildcard = '?',\n  BankersAcceptance = 'BA',\n  ConvertibleBond = 'CB',\n  CertificateOfDeposit = 'CD',\n  CollateralizedMortgageObligation = 'CMO',\n  CorporateBond = 'CORP',\n  CommercialPaper = 'CP',\n  CorporatePrivatePlacement = 'CPP',\n  CommonStock = 'CS',\n  FederalHousingAuthority = 'FHA',\n  FederalHomeLoan = 'FHL',\n  FederalNationalMortgageAssociation = 'FN',\n  ForeignExchangeContract = 'FOR',\n  Future = 'FUT',\n  GovernmentNationalMortgageAssociation = 'GN',\n  TreasuriesAgencyDebenture = 'GOVT',\n  IoetteMortgage = 'IET',\n  MutualFund = 'MF',\n  MortgageInterestOnly = 'MIO',\n  MortgagePrincipalOnly = 'MPO',\n  MortgagePrivatePlacement = 'MPP',\n  MiscellaneousPassThrough = 'MPT',\n  MunicipalBond = 'MUNI',\n  NoSecurityType = 'NONE',\n  Option = 'OPT',\n  PreferredStock = 'PS',\n  RepurchaseAgreement = 'RP',\n  ReverseRepurchaseAgreement = 'RVRP',\n  StudentLoanMarketingAssociation = 'SL',\n  TimeDeposit = 'TD',\n  UsTreasuryBillOld = 'USTB',\n  Warrant = 'WAR',\n  CatsTigersAndLions = 'ZOO'\n}\n\n/*\n*****************************************************\n* Identifies the Standing Instruction database used *\n*****************************************************\n*/\nexport enum StandInstDbType {\n  Other = 0,\n  Dtcsid = 1,\n  ThomsonAlert = 2,\n  AGlobalCustodian = 3\n}\n\n/*\n**************************************************************\n* Identifies the type of Allocation linkage when AllocLinkID *\n* is used.                                                   *\n**************************************************************\n*/\nexport enum AllocLinkType {\n  FxNetting = 0,\n  FxSwap = 1\n}\n\n/*\n*****************************************************\n* Indicates whether an Option is for a put or call. *\n*****************************************************\n*/\nexport enum PutOrCall {\n  Put = 0,\n  Call = 1\n}\n\n/*\n********************\n* Used for options *\n********************\n*/\nexport enum CoveredOrUncovered {\n  Covered = 0,\n  Uncovered = 1\n}\n\n/*\n****************************************************************\n* Used for options when delivering the order to an execution   *\n* system/exchange to specify if the order is for a customer or *\n* the firm placing the order itself.                           *\n****************************************************************\n*/\nexport enum CustomerOrFirm {\n  Customer = 0,\n  Firm = 1\n}\n\n/*\n**************************************************************\n* Indicates whether or not details should be communicated to *\n* BrokerOfCredit (i.e. step-in broker).                      *\n**************************************************************\n*/\nexport enum NotifyBrokerOfCredit {\n  DetailsShouldNotBeCommunicated = 'N',\n  DetailsShouldBeCommunicated = 'Y'\n}\n\n/*\n***************************************************************\n* Indicates how the receiver (i.e. third party) of Allocation *\n* message should handle/process the account details.          *\n***************************************************************\n*/\nexport enum AllocHandlInst {\n  Match = 1,\n  Forward = 2,\n  ForwardAndMatch = 3\n}\n\n/*\n**********************************************\n* Indicates the type of RoutingID specified. *\n**********************************************\n*/\nexport enum RoutingType {\n  TargetFirm = 1,\n  TargetList = 2,\n  BlockFirm = 3,\n  BlockList = 4\n}\n\n/*\n************************************************************\n* For Fixed Income. Identifies the benchmark (e.g. used in *\n* conjunction with the SpreadToBenchmark field).           *\n************************************************************\n*/\nexport enum Benchmark {\n  Curve = '1',\n  FiveYr = '2',\n  Old5 = '3',\n  TenYr = '4',\n  Old10 = '5',\n  ThirtyYr = '6',\n  Old30 = '7',\n  ThreeMolibor = '8',\n  SixMolibor = '9'\n}\n\n/*\n*****************************\n* Subscription Request Type *\n*****************************\n*/\nexport enum SubscriptionRequestType {\n  Snapshot = '0',\n  SnapshotAndUpdates = '1',\n  DisablePreviousSnapshot = '2'\n}\n\n/*\n*********************************************\n* Specifies the type of Market Data update. *\n*********************************************\n*/\nexport enum MDUpdateType {\n  FullRefresh = 0,\n  IncrementalRefresh = 1\n}\n\n/*\n***************************************************************\n* Specifies whether or not book entries should be aggregated. *\n***************************************************************\n*/\nexport enum AggregatedBook {\n  BookEntriesShouldNotBeAggregated = 'N',\n  BookEntriesToBeAggregated = 'Y'\n}\n\n/*\n***************************\n* Type Market Data entry. *\n***************************\n*/\nexport enum MDEntryType {\n  Bid = '0',\n  Offer = '1',\n  Trade = '2',\n  IndexValue = '3',\n  OpeningPrice = '4',\n  ClosingPrice = '5',\n  SettlementPrice = '6',\n  TradingSessionHighPrice = '7',\n  TradingSessionLowPrice = '8',\n  TradingSessionVwapPrice = '9'\n}\n\n/*\n****************************\n* Direction of the \"tick\". *\n****************************\n*/\nexport enum TickDirection {\n  PlusTick = '0',\n  ZeroPlusTick = '1',\n  MinusTick = '2',\n  ZeroMinusTick = '3'\n}\n\n/*\n**********************************************************\n* Space-delimited list of conditions describing a quote. *\n**********************************************************\n*/\nexport enum QuoteCondition {\n  Open = 'A',\n  Closed = 'B',\n  ExchangeBest = 'C',\n  ConsolidatedBest = 'D',\n  Locked = 'E',\n  Crossed = 'F',\n  Depth = 'G',\n  FastTrading = 'H',\n  NonFirm = 'I'\n}\n\n/*\n*********************************************************\n* Space-delimited list of conditions describing a trade *\n*********************************************************\n*/\nexport enum TradeCondition {\n  Cash = 'A',\n  AveragePriceTrade = 'B',\n  CashTrade = 'C',\n  NextDay = 'D',\n  Opening = 'E',\n  IntradayTradeDetail = 'F',\n  Rule127Trade = 'G',\n  Rule155Trade = 'H',\n  SoldLast = 'I',\n  NextDayTrade = 'J',\n  Opened = 'K',\n  Seller = 'L',\n  Sold = 'M',\n  StoppedStock = 'N'\n}\n\n/*\n**************************************\n* Type of Market Data update action. *\n**************************************\n*/\nexport enum MDUpdateAction {\n  New = '0',\n  Change = '1',\n  Delete = '2'\n}\n\n/*\n******************************************************\n* Reason for the rejection of a Market Data request. *\n******************************************************\n*/\nexport enum MDReqRejReason {\n  UnknownSymbol = '0',\n  DuplicateMdReqId = '1',\n  InsufficientBandwidth = '2',\n  InsufficientPermissions = '3',\n  UnsupportedSubscriptionRequestType = '4',\n  UnsupportedMarketDepth = '5',\n  UnsupportedMdUpdateType = '6',\n  UnsupportedAggregatedBook = '7',\n  UnsupportedMdEntryType = '8'\n}\n\n/*\n************************\n* Reason for deletion. *\n************************\n*/\nexport enum DeleteReason {\n  Cancellation = '0',\n  Error = '1'\n}\n\n/*\n*********************************\n* Flag that identifies a price. *\n*********************************\n*/\nexport enum OpenCloseSettleFlag {\n  DailyOpen = '0',\n  SessionOpen = '1',\n  DeliverySettlementEntry = '2'\n}\n\n/*\n*****************************************\n* Identifies a firm\u0019s financial status. *\n*****************************************\n*/\nexport enum FinancialStatus {\n  Bankrupt = '1'\n}\n\n/*\n********************************************\n* Identifies the type of Corporate Action. *\n********************************************\n*/\nexport enum CorporateAction {\n  ExDividend = 'A',\n  ExDistribution = 'B',\n  ExRights = 'C',\n  New = 'D',\n  ExInterest = 'E'\n}\n\n/*\n*******************************************************\n* Identifies the status of the quote acknowledgement. *\n*******************************************************\n*/\nexport enum QuoteAckStatus {\n  Accepted = 0,\n  CancelForSymbol = 1,\n  CanceledForSecurityType = 2,\n  CanceledForUnderlying = 3,\n  CanceledAll = 4,\n  Rejected = 5\n}\n\n/*\n****************************************\n* Identifies the type of quote cancel. *\n****************************************\n*/\nexport enum QuoteCancelType {\n  CancelForOneOrMoreSecurities = 1,\n  CancelForSecurityType = 2,\n  CancelForUnderlyingSecurity = 3,\n  CancelAllQuotes = 4\n}\n\n/*\n******************************\n* Reason Quote was rejected: *\n******************************\n*/\nexport enum QuoteRejectReason {\n  UnknownSymbol = 1,\n  Exchange = 2,\n  QuoteRequestExceedsLimit = 3,\n  TooLateToEnter = 4,\n  UnknownQuote = 5,\n  DuplicateQuote = 6,\n  InvalidBid = 7,\n  InvalidPrice = 8,\n  NotAuthorizedToQuoteSecurity = 9\n}\n\n/*\n****************************************************************\n* Level of Response requested from receiver of quote messages. *\n****************************************************************\n*/\nexport enum QuoteResponseLevel {\n  NoAcknowledgement = 0,\n  AcknowledgeOnlyNegativeOrErroneousQuotes = 1,\n  AcknowledgeEachQuoteMessage = 2\n}\n\n/*\n*******************************************************\n* Indicates the type of Quote Request being generated *\n*******************************************************\n*/\nexport enum QuoteRequestType {\n  Manual = 1,\n  Automatic = 2\n}\n\n/*\n****************************************\n* Type of Security Definition Request. *\n****************************************\n*/\nexport enum SecurityRequestType {\n  RequestSecurityIdentityAndSpecifications = 0,\n  RequestSecurityIdentityForSpecifications = 1,\n  RequestListSecurityTypes = 2,\n  RequestListSecurities = 3\n}\n\n/*\n*************************************************\n* Type of Security Definition message response. *\n*************************************************\n*/\nexport enum SecurityResponseType {\n  AcceptAsIs = 1,\n  AcceptWithRevisions = 2,\n  ListOfSecurityTypesReturnedPerRequest = 3,\n  ListOfSecuritiesReturnedPerRequest = 4,\n  RejectSecurityProposal = 5,\n  CannotMatchSelectionCriteria = 6\n}\n\n/*\n**************************************************************\n* Indicates whether or not message is being sent as a result *\n* of a subscription request or not.                          *\n**************************************************************\n*/\nexport enum UnsolicitedIndicator {\n  MessageIsBeingSentAsAResultOfAPriorRequest = 'N',\n  MessageIsBeingSentUnsolicited = 'Y'\n}\n\n/*\n****************************************************************\n* Identifies the trading status applicable to the transaction. *\n****************************************************************\n*/\nexport enum SecurityTradingStatus {\n  OpeningDelay = 1,\n  TradingHalt = 2,\n  Resume = 3,\n  NoOpen = 4,\n  PriceIndication = 5,\n  TradingRangeIndication = 6,\n  MarketImbalanceBuy = 7,\n  MarketImbalanceSell = 8,\n  MarketOnCloseImbalanceBuy = 9,\n  MarketOnCloseImbalanceSell = 10,\n  NoMarketImbalance = 12,\n  NoMarketOnCloseImbalance = 13,\n  ItsPreOpening = 14,\n  NewPriceIndication = 15,\n  TradeDisseminationTime = 16,\n  ReadyToTrade = 17,\n  NotAvailableForTrading = 18,\n  NotTradedOnThisMarket = 19,\n  UnknownOrInvalid = 20\n}\n\n/*\n*************************************************************\n* Denotes the reason for the Opening Delay or Trading Halt. *\n*************************************************************\n*/\nexport enum HaltReason {\n  NewsDissemination = 'D',\n  OrderInflux = 'E',\n  OrderImbalance = 'I',\n  AdditionalInformation = 'M',\n  NewsPending = 'P',\n  EquipmentChangeover = 'X'\n}\n\n/*\n*************************************************************\n* Indicates whether or not the halt was due to Common Stock *\n* trading being halted.                                     *\n*************************************************************\n*/\nexport enum InViewOfCommon {\n  HaltWasNotRelatedToAHaltOfTheCommonStock = 'N',\n  HaltWasDueToCommonStockBeingHalted = 'Y'\n}\n\n/*\n************************************************************\n* Indicates whether or not the halt was due to the Related *\n* Security being halted.                                   *\n************************************************************\n*/\nexport enum DueToRelated {\n  NotRelatedToSecurityHalt = 'N',\n  RelatedToSecurityHalt = 'Y'\n}\n\n/*\n**************************************\n* Identifies the type of adjustment. *\n**************************************\n*/\nexport enum Adjustment {\n  Cancel = 1,\n  Error = 2,\n  Correction = 3\n}\n\n/*\n*********************\n* Method of trading *\n*********************\n*/\nexport enum TradSesMethod {\n  Electronic = 1,\n  OpenOutcry = 2,\n  TwoParty = 3\n}\n\n/*\n************************\n* Trading Session Mode *\n************************\n*/\nexport enum TradSesMode {\n  Testing = 1,\n  Simulated = 2,\n  Production = 3\n}\n\n/*\n*********************************\n* State of the trading session. *\n*********************************\n*/\nexport enum TradSesStatus {\n  Halted = 1,\n  Open = 2,\n  Closed = 3,\n  PreOpen = 4,\n  PreClose = 5\n}\n\n/*\n*****************************************************\n* Type of message encoding (non-ASCII (non-English) *\n* characters) used in a message\u0019s \"Encoded\" fields. *\n*****************************************************\n*/\nexport enum MessageEncoding {\n  Eucjp = 'EUC-JP',\n  Iso2022Jp = 'ISO-2022-JP',\n  ShiftJis = 'Shift_JIS',\n  Utf8 = 'UTF-8'\n}\n\n/*\n************************************\n* Reason Quote Entry was rejected: *\n************************************\n*/\nexport enum QuoteEntryRejectReason {\n  UnknownSymbol = 1,\n  Exchange = 2,\n  QuoteExceedsLimit = 3,\n  TooLateToEnter = 4,\n  UnknownQuote = 5,\n  DuplicateQuote = 6,\n  InvalidBidAskSpread = 7,\n  InvalidPrice = 8,\n  NotAuthorizedToQuoteSecurity = 9\n}\n\n/*\n***************************************************************\n* Code to identify reason for a session-level Reject message. *\n***************************************************************\n*/\nexport enum SessionRejectReason {\n  InvalidTagNumber = 0,\n  RequiredTagMissing = 1,\n  TagNotDefinedForThisMessageType = 2,\n  UndefinedTag = 3,\n  TagSpecifiedWithoutAValue = 4,\n  ValueIsIncorrect = 5,\n  IncorrectDataFormatForValue = 6,\n  DecryptionProblem = 7,\n  SignatureProblem = 8,\n  CompIdProblem = 9,\n  SendingTimeAccuracyProblem = 10,\n  InvalidMsgType = 11\n}\n\n/*\n********************************************\n* Identifies the Bid Request message type. *\n********************************************\n*/\nexport enum BidRequestTransType {\n  Cancel = 'C',\n  New = 'N'\n}\n\n/*\n*****************************************************\n* Indicates whether or not the order was solicited. *\n*****************************************************\n*/\nexport enum SolicitedFlag {\n  WasNotSolicited = 'N',\n  WasSolicited = 'Y'\n}\n\n/*\n************************************************************\n* Code to identify reason for an ExecutionRpt message sent *\n* with ExecType=Restated or used when communicating an     *\n* unsolicited cancel.                                      *\n************************************************************\n*/\nexport enum ExecRestatementReason {\n  GtCorporateAction = 0,\n  GtRenewal = 1,\n  VerbalChange = 2,\n  RepricingOfOrder = 3,\n  BrokerOption = 4,\n  PartialDeclineOfOrderQty = 5\n}\n\n/*\n*********************************************************\n* Code to identify reason for a Business Message Reject *\n* message.                                              *\n*********************************************************\n*/\nexport enum BusinessRejectReason {\n  Other = 0,\n  UnknownId = 1,\n  UnknownSecurity = 2,\n  UnsupportedMessageType = 3,\n  ApplicationNotAvailable = 4,\n  ConditionallyRequiredFieldMissing = 5\n}\n\n/*\n********************************************\n* Specifies the direction of the messsage. *\n********************************************\n*/\nexport enum MsgDirection {\n  Receive = 'R',\n  Send = 'S'\n}\n\n/*\n***************************************************************\n* Code to identify the price a DiscretionOffset is related to *\n* and should be mathematically added to.                      *\n***************************************************************\n*/\nexport enum DiscretionInst {\n  RelatedToDisplayedPrice = '0',\n  RelatedToMarketPrice = '1',\n  RelatedToPrimaryPrice = '2',\n  RelatedToLocalPrimaryPrice = '3',\n  RelatedToMidpointPrice = '4',\n  RelatedToLastTradePrice = '5'\n}\n\n/*\n*****************************************************\n* Code to identify the type of liquidity indicator. *\n*****************************************************\n*/\nexport enum LiquidityIndType {\n  FiveDayMovingAverage = 1,\n  TwentyDayMovingAverage = 2,\n  NormalMarketSize = 3,\n  Other = 4\n}\n\n/*\n******************************************************\n* Indicates whether or not to exchange for phsyical. *\n******************************************************\n*/\nexport enum ExchangeForPhysical {\n  False = 'N',\n  True = 'Y'\n}\n\n/*\n***************************************************************\n* Code to identify the desired frequency of progress reports. *\n***************************************************************\n*/\nexport enum ProgRptReqs {\n  BuySideRequests = 1,\n  SellSideSends = 2,\n  RealTimeExecutionReports = 3\n}\n\n/*\n****************************************************************\n* Code to represent whether value is net (inclusive of tax) or *\n* gross.                                                       *\n****************************************************************\n*/\nexport enum IncTaxInd {\n  Net = 1,\n  Gross = 2\n}\n\n/*\n****************************************\n* Code to represent the type of trade. *\n****************************************\n*/\nexport enum TradeType {\n  Agency = 'A',\n  VwapGuarantee = 'G',\n  GuaranteedClose = 'J',\n  RiskTrade = 'R'\n}\n\n/*\n*******************************************\n* Code to represent the basis price type. *\n*******************************************\n*/\nexport enum BasisPxType {\n  ClosingPriceAtMorningSession = '2',\n  ClosingPrice = '3',\n  CurrentPrice = '4',\n  Sq = '5',\n  VwapThroughADay = '6',\n  VwapThroughAMorningSession = '7',\n  VwapThroughAnAfternoonSession = '8',\n  VwapThroughADayExcept = '9',\n  VwapThroughAMorningSessionExcept = 'A',\n  VwapThroughAnAfternoonSessionExcept = 'B',\n  Strike = 'C',\n  Open = 'D',\n  Others = 'Z'\n}\n\n/*\n*************************************\n* Code to represent the price type. *\n*************************************\n*/\nexport enum PriceType {\n  Percentage = 1,\n  PerUnit = 2,\n  FixedAmount = 3\n}\n\n/*\n********************************************************\n* Code to identify whether to book out executions on a *\n* part-filled GT order on the day of execution or to   *\n* accumulate.                                          *\n********************************************************\n*/\nexport enum GTBookingInst {\n  BookOutAllTradesOnDayOfExecution = 0,\n  AccumulateUntilFilledOrExpired = 1,\n  AccumulateUntilVerballlyNotifiedOtherwise = 2\n}\n\n/*\n****************************************************************\n* Code to represent whether value is net (inclusive of tax) or *\n* gross.                                                       *\n****************************************************************\n*/\nexport enum NetGrossInd {\n  Net = 1,\n  Gross = 2\n}\n\n/*\n****************************************\n* Identifies the type of ListExecInst. *\n****************************************\n*/\nexport enum ListExecInstType {\n  Immediate = '1',\n  WaitForInstruction = '2'\n}\n\n/*\n*************************************************************\n* Identifies the type of request that a Cancel Reject is in *\n* response to.                                              *\n*************************************************************\n*/\nexport enum CxlRejResponseTo {\n  OrderCancelRequest = '1',\n  OrderCancel = '2'\n}\n\n/*\n**************************************************************\n* Used to indicate what an Execution Report represents (e.g. *\n* used with multi-leg securiteis, such as option strategies, *\n* spreads, etc.).                                            *\n**************************************************************\n*/\nexport enum MultiLegReportingType {\n  SingleSecurity = '1',\n  IndividualLegOfAMultiLegSecurity = '2',\n  MultiLegSecurity = '3'\n}\n\n"]}