{"version":3,"file":"fields-dispatch.js","sourceRoot":"","sources":["../../../src/dictionary/contained/fields-dispatch.ts"],"names":[],"mappings":";;;AAKA,iEAA2D;AAE3D,MAAa,cAAc;IACzB,aAAa,CAAE,KAAqB,EAAE,UAA4B;QAChE,QAAQ,KAAK,CAAC,IAAI,EAAE;YAClB,KAAK,yCAAkB,CAAC,KAAK,CAAC,CAAC;gBAC7B,IAAI,UAAU,CAAC,KAAK,EAAE;oBACpB,UAAU,CAAC,KAAK,CAAC,KAA4B,CAAC,CAAA;iBAC/C;gBACD,MAAK;aACN;YAED,KAAK,yCAAkB,CAAC,MAAM,CAAC,CAAC;gBAC9B,IAAI,UAAU,CAAC,MAAM,EAAE;oBACrB,IAAI;wBACF,UAAU,CAAC,MAAM,CAAC,KAA6B,CAAC,CAAA;qBACjD;oBAAC,OAAO,EAAE,EAAE;wBACX,IAAI,CAAC,GAAG,CAAC,CAAA;qBACV;iBACF;gBACD,MAAK;aACN;YAED,KAAK,yCAAkB,CAAC,SAAS,CAAC,CAAC;gBACjC,IAAI,UAAU,CAAC,SAAS,EAAE;oBACxB,UAAU,CAAC,SAAS,CAAC,KAAgC,CAAC,CAAA;iBACvD;gBACD,MAAK;aACN;YAED;gBACE,MAAM,IAAI,KAAK,CAAC,gBAAgB,KAAK,CAAC,IAAI,EAAE,CAAC,CAAA;SAChD;IACH,CAAC;IAED,cAAc,CAAE,MAAwB,EAAE,UAA4B;QACpE,MAAM,CAAC,OAAO,CAAC,CAAC,KAAqB,EAAE,EAAE;YACvC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;QACvC,CAAC,CAAC,CAAA;IACJ,CAAC;CACF;AAtCD,wCAsCC","sourcesContent":["import { ContainedGroupField } from './contained-group-field'\nimport { ContainedSimpleField } from './contained-simple-field'\nimport { ContainedField } from './contained-field'\nimport { ContainedComponentField } from './contained-component-field'\nimport { IFieldDispatcher } from './field-dispatcher'\nimport { ContainedFieldType } from './contained-field-type'\n\nexport class FieldsDispatch {\n  dispatchField (field: ContainedField, dispatcher: IFieldDispatcher): void {\n    switch (field.type) {\n      case ContainedFieldType.Group: {\n        if (dispatcher.group) {\n          dispatcher.group(field as ContainedGroupField)\n        }\n        break\n      }\n\n      case ContainedFieldType.Simple: {\n        if (dispatcher.simple) {\n          try {\n            dispatcher.simple(field as ContainedSimpleField)\n          } catch (ex) {\n            let x = 0\n          }\n        }\n        break\n      }\n\n      case ContainedFieldType.Component: {\n        if (dispatcher.component) {\n          dispatcher.component(field as ContainedComponentField)\n        }\n        break\n      }\n\n      default:\n        throw new Error(`unknown type ${field.type}`)\n    }\n  }\n\n  dispatchFields (fields: ContainedField[], dispatcher: IFieldDispatcher): void {\n    fields.forEach((field: ContainedField) => {\n      this.dispatchField(field, dispatcher)\n    })\n  }\n}\n"]}