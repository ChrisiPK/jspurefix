{"version":3,"file":"contained-field-set.js","sourceRoot":"","sources":["../../../src/dictionary/contained/contained-field-set.ts"],"names":[],"mappings":"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","sourcesContent":["import { INumericKeyed } from '../../collections/collection'\nimport { Dictionary } from '../../collections'\nimport { ContainedComponentField } from './contained-component-field'\nimport { ContainedField } from './contained-field'\nimport { ContainedGroupField } from './contained-group-field'\nimport { ContainedSimpleField } from './contained-simple-field'\nimport { ElasticBuffer } from '../../buffer/elastic-buffer'\nimport { ContainedFieldType } from './contained-field-type'\nimport { TagType } from '../../buffer/tag/tag-type'\nimport { ContainedSetType } from '../contained-set-type'\n\nexport abstract class ContainedFieldSet {\n  public readonly groups: Dictionary<ContainedGroupField> = new Dictionary<ContainedGroupField>()\n  public readonly components: Dictionary<ContainedComponentField> = new Dictionary<ContainedComponentField>()\n  public readonly simple: Dictionary<ContainedSimpleField> = new Dictionary<ContainedSimpleField>()\n    // sequence of fields representing this type - can be simple, group or component\n  public readonly fields: ContainedField[] = []\n    // any tag at any level i.e. does this set contain a tag\n  public readonly containedTag: INumericKeyed<boolean> = {}\n    // any tag at any level ordered ie. all tags flattened to list\n  public readonly flattenedTag: number[] = []\n    // any data tags contained length within this set.\n  public readonly containedLength: INumericKeyed<boolean> = {}\n    // tags only in repository at this level, not from any at deeper levels\n  public readonly localTag: INumericKeyed<ContainedSimpleField> = {}\n  // tags marked required at this level only\n  public readonly localRequired: INumericKeyed<ContainedSimpleField> = {}\n    // all tags contained within this field set flattened from all levels\n  public readonly tagToSimple: INumericKeyed<ContainedSimpleField> = {}\n    // direct any tag contained within this set to field one level down where it belongs.\n  public readonly tagToField: INumericKeyed<ContainedField> = {}\n    // only repository directly in this set indexed by name\n  public readonly localNameToField: Dictionary<ContainedField> = new Dictionary<ContainedField>()\n    // for FixMl notation this set of fields appear as attributes i.e. <Pty ID=\"323\" R=\"38\">\n  public readonly nameToLocalAttribute: Dictionary<ContainedSimpleField> = new Dictionary<ContainedSimpleField>()\n    // all attributes in order of being declared\n  public readonly localAttribute: ContainedSimpleField[] = []\n    // at any level on this set, first declared simple field\n  public firstSimple: ContainedSimpleField\n    // parser needs to know about raw fields\n  public containsRaw: boolean = false\n\n  protected constructor (public readonly type: ContainedSetType,\n               public readonly name: string,\n               public readonly category: string,\n               public readonly abbreviation: string,\n               public readonly description: string) {\n  }\n\n  public toString () {\n    const buffer = new ElasticBuffer(2 * 1024)\n    const fields = this.fields\n    buffer.writeString(`Set: ${this.name}(${this.getPrefix()}) fields [${fields.length}]: `)\n    const set = fields.map(f => f.toString())\n    const s = set.join(', ')\n    buffer.writeString(s)\n    return buffer.toString()\n  }\n\n  public abstract getPrefix (): string\n\n  public getFieldName (tag: number) {\n    const s = this.tagToSimple[tag]\n    if (s == null) {\n      const gf = this.tagToField[tag] as ContainedGroupField\n      if (gf !== null) {\n        return `${gf.definition.name}`\n      }\n      return `${tag}`\n    }\n    return s.name\n  }\n\n  public add (field: ContainedField): void {\n    this.fields.push(field)\n    this.localNameToField.addUpdate(field.name, field)\n    this.addUpdate(field)\n    this.addContained(this, field)\n  }\n\n  private addUpdate (field: ContainedField): void {\n    switch (field.type) {\n      case ContainedFieldType.Simple: {\n        this.addLocalSimple(field as ContainedSimpleField)\n        break\n      }\n\n      case ContainedFieldType.Component: {\n        const cf = field as ContainedComponentField\n        const definition = cf.definition\n        if (definition.abbreviation && definition.abbreviation !== field.name) {\n          this.localNameToField.addUpdate(definition.abbreviation, field)\n        }\n        break\n      }\n\n      case ContainedFieldType.Group: {\n        const gf = field as ContainedComponentField\n        const definition = gf.definition\n        if (definition.abbreviation && definition.abbreviation !== field.name) {\n          this.localNameToField.addUpdate(definition.abbreviation, field)\n        }\n        break\n      }\n\n      default:\n        throw new Error(`unknown field type ${field.type}`)\n    }\n  }\n\n  private addLocalSimple (field: ContainedSimpleField) {\n    const definition = field.definition\n    if (definition.abbreviation && definition.abbreviation !== definition.name) {\n      this.localNameToField.addUpdate(definition.abbreviation, field)\n    }\n    if (definition.baseCategoryAbbreviation && definition.baseCategory === this.category) {\n      this.localNameToField.addUpdate(definition.baseCategoryAbbreviation, field)\n    }\n    if (field.attribute) {\n      this.nameToLocalAttribute.addUpdate(definition.abbreviation, field)\n      this.localAttribute.push(field)\n      // an attribute for FixMl lives in attribute set not fields - in this case xml sub elements\n      this.fields.pop()\n    }\n    const tag = definition.tag\n    this.localTag[tag] = field\n    if (field.required) {\n      this.localRequired[tag] = field\n    }\n  }\n\n  private addContained (parent: ContainedFieldSet, field: ContainedField): void {\n    switch (field.type) {\n      case ContainedFieldType.Group: {\n        this.addGroupFieldDef(field as ContainedGroupField)\n        break\n      }\n\n      case ContainedFieldType.Component: {\n        this.addComponentFieldDef(field as ContainedComponentField)\n        break\n      }\n\n      case ContainedFieldType.Simple: {\n        this.addSimpleFieldDef(parent, field as ContainedSimpleField)\n        break\n      }\n\n      default:\n        throw new Error(`unknown field type ${field.type}`)\n    }\n  }\n\n  private addAllFields (containedField: ContainedFieldSet): void {\n    containedField.fields.forEach((f: ContainedField) => {\n      this.addContained(containedField, f)\n    })\n  }\n\n  private addGroupFieldDef (groupField: ContainedGroupField): void {\n    if (this.groups.containsKey(groupField.name)) {\n      return\n    }\n    const definition = groupField.definition\n    this.groups.add(groupField.name, groupField)\n    const nof = definition.noOfField\n    if (nof) {\n      const tag = nof.tag\n      this.containedTag[tag] = true\n      this.flattenedTag.push(tag)\n    }\n    this.addAllFields(definition)\n    this.mapAllBelow(definition, groupField)\n  }\n\n  private addComponentFieldDef (componentField: ContainedComponentField): void {\n    const components = this.components\n    if (components.containsKey(componentField.name)) {\n      return\n    }\n    const definition = componentField.definition\n    components.add(componentField.name, componentField)\n    this.addAllFields(definition)\n    this.mapAllBelow(definition, componentField)\n  }\n\n  private keys (): number[] {\n    const keys: string[] = Object.keys(this.containedTag)\n    const nums: number[] = new Array(keys.length)\n    for (let j: number = 0; j < keys.length; ++j) {\n      nums[j] = parseInt(keys[j], 10)\n    }\n    return nums\n  }\n\n  private mapAllBelow (set: ContainedFieldSet, field: ContainedField): void {\n        // point all tags in this component to this field.\n    const tagsBelow: number[] = set.keys()\n    for (const t of tagsBelow) {\n      this.tagToField[t] = field\n    }\n  }\n\n  private addSimpleFieldDef (parent: ContainedFieldSet, field: ContainedSimpleField): void {\n    if (this.simple.containsKey(field.name)) {\n      return\n    }\n    if (!this.firstSimple) {\n      this.firstSimple = field\n    }\n    switch (field.definition.tagType) {\n      case TagType.RawData: {\n        const dataLengthField: ContainedSimpleField = parent.fields[field.position - 1] as ContainedSimpleField\n        if (dataLengthField && dataLengthField.definition.tagType === TagType.Length) {\n          this.containedLength[dataLengthField.definition.tag] = true\n          this.containsRaw = true\n        }\n        break\n      }\n      default:\n        break\n    }\n    const tag = field.definition.tag\n    this.simple.add(field.name, field)\n    this.containedTag[tag] = true\n    this.flattenedTag.push(tag)\n    this.tagToSimple[tag] = field\n  }\n}\n"]}