{"version":3,"file":"set-reduce.js","sourceRoot":"","sources":["../../src/dictionary/set-reduce.ts"],"names":[],"mappings":";;;AAAA,2CAC6G;AAG7G,MAAa,SAAS;IAEpB,WAAW,CAAE,CAAI,EAAE,KAAqB,EAAE,UAA8B;QACtE,QAAQ,KAAK,CAAC,IAAI,EAAE;YAClB,KAAK,8BAAkB,CAAC,KAAK,CAAC,CAAC;gBAC7B,IAAI,UAAU,CAAC,KAAK,EAAE;oBACpB,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,KAA4B,CAAC,CAAA;iBAClD;gBACD,MAAK;aACN;YAED,KAAK,8BAAkB,CAAC,MAAM,CAAC,CAAC;gBAC9B,IAAI,UAAU,CAAC,MAAM,EAAE;oBACrB,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,KAA6B,CAAC,CAAA;iBACpD;gBACD,MAAK;aACN;YAED,KAAK,8BAAkB,CAAC,SAAS,CAAC,CAAC;gBACjC,IAAI,UAAU,CAAC,SAAS,EAAE;oBACxB,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,KAAgC,CAAC,CAAA;iBAC1D;gBACD,MAAK;aACN;YAED;gBACE,MAAM,IAAI,KAAK,CAAC,gBAAgB,KAAK,CAAC,IAAI,EAAE,CAAC,CAAA;SAChD;IACH,CAAC;IAED,MAAM,CAAE,GAAsB,EAAE,UAA8B,EAAE,IAAO;QACrE,OAAO,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAM,EAAE,KAAqB,EAAE,EAAE;YACzD,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,CAAA;YACtC,OAAO,CAAC,CAAA;QACV,CAAC,EAAE,IAAI,CAAC,CAAA;IACV,CAAC;CACF;AApCD,8BAoCC","sourcesContent":["import { ContainedField, ContainedFieldSet,\n  ContainedGroupField, ContainedSimpleField, ContainedComponentField, ContainedFieldType } from './contained'\nimport { ITypeDispatcher } from './type-dispatcher'\n\nexport class SetReduce<T> {\n\n  reduceField (a: T, field: ContainedField, dispatcher: ITypeDispatcher<T>): void {\n    switch (field.type) {\n      case ContainedFieldType.Group: {\n        if (dispatcher.group) {\n          dispatcher.group(a, field as ContainedGroupField)\n        }\n        break\n      }\n\n      case ContainedFieldType.Simple: {\n        if (dispatcher.simple) {\n          dispatcher.simple(a, field as ContainedSimpleField)\n        }\n        break\n      }\n\n      case ContainedFieldType.Component: {\n        if (dispatcher.component) {\n          dispatcher.component(a, field as ContainedComponentField)\n        }\n        break\n      }\n\n      default:\n        throw new Error(`unknown type ${field.type}`)\n    }\n  }\n\n  reduce (def: ContainedFieldSet, dispatcher: ITypeDispatcher<T>, init: T): T {\n    return def.fields.reduce((a: any, field: ContainedField) => {\n      this.reduceField(a, field, dispatcher)\n      return a\n    }, init)\n  }\n}\n"]}