{"version":3,"file":"compiler-type.js","sourceRoot":"","sources":["../../../src/dictionary/compiler/compiler-type.ts"],"names":[],"mappings":";;;AAAA,4CAAkI;AAGlI,4BAA4B;AAC5B,8DAAwD;AACxD,oEAA8D;AAE9D,MAAa,YAAY;IAEvB,YAA6B,WAA2B,EAAkB,GAAsB,EAAkB,aAAqB;QAA1G,gBAAW,GAAX,WAAW,CAAgB;QAAkB,QAAG,GAAH,GAAG,CAAmB;QAAkB,kBAAa,GAAb,aAAa,CAAQ;QACrI,MAAM,KAAK,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;QAC7C,IAAI,GAAG,CAAC,IAAI,KAAK,qCAAgB,CAAC,GAAG,EAAE;YACrC,IAAI,CAAC,MAAM,GAAG,KAAK,KAAK,EAAE,CAAA;SAC3B;aAAM;YACL,IAAI,CAAC,MAAM,GAAG,SAAS,KAAK,EAAE,CAAA;SAC/B;IACH,CAAC;IAEM,WAAW,CAAE,KAAqB;QACvC,QAAQ,KAAK,CAAC,IAAI,EAAE;YAClB,KAAK,8BAAkB,CAAC,KAAK,CAAC,CAAC;gBAC7B,MAAM,EAAE,GAAG,KAA4B,CAAA;gBACvC,QAAQ,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;oBAC/B,KAAK,2CAAmB,CAAC,QAAQ,CAAC,CAAC;wBACjC,OAAO,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,IAAI,CAAA;qBACvC;oBAED,KAAK,2CAAmB,CAAC,SAAS,CAAC,CAAC;wBAClC,OAAO,EAAE,CAAC,UAAU,CAAC,IAAI,CAAA;qBAC1B;oBACD,OAAO,CAAC,CAAC;wBACP,OAAO,KAAK,CAAC,IAAI,CAAA;qBAClB;iBACF;aACF;YAED,KAAK,8BAAkB,CAAC,SAAS,CAAC,CAAC;gBACjC,MAAM,EAAE,GAAG,KAAgC,CAAA;gBAC3C,QAAQ,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;oBAC/B,KAAK,2CAAmB,CAAC,SAAS,CAAC,CAAC;wBAClC,OAAO,EAAE,CAAC,UAAU,CAAC,IAAI,CAAA;qBAC1B;oBACD,OAAO,CAAC,CAAC;wBACP,OAAO,KAAK,CAAC,IAAI,CAAA;qBAClB;iBACF;aACF;YAED;gBACE,OAAO,KAAK,CAAC,IAAI,CAAA;SACpB;IACH,CAAC;IAEM,iBAAiB,CAAE,KAAqB;QAC7C,QAAQ,KAAK,CAAC,IAAI,EAAE;YAClB,KAAK,8BAAkB,CAAC,KAAK,CAAC,CAAC;gBAC7B,MAAM,EAAE,GAAG,KAA4B,CAAA;gBACvC,QAAQ,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;oBAC/B,KAAK,2CAAmB,CAAC,SAAS,CAAC,CAAC;wBAClC,OAAO,EAAE,CAAC,UAAU,CAAC,IAAI,CAAA;qBAC1B;oBACD,OAAO,CAAC,CAAC;wBACP,OAAO,KAAK,CAAC,IAAI,CAAA;qBAClB;iBACF;aACF;YACD;gBACE,OAAO,KAAK,CAAC,IAAI,CAAA;SACpB;IACH,CAAC;CACF;AA/DD,oCA+DC","sourcesContent":["import { ContainedField, ContainedFieldSet, ContainedGroupField, ContainedComponentField, ContainedFieldType } from '../contained'\nimport { FixDefinitions } from '../definition'\n\nimport _ = require('lodash')\nimport { ContainedSetType } from '../contained-set-type'\nimport { FixDefinitionSource } from '../fix-definition-source'\n\nexport class CompilerType {\n  public readonly snaked: string\n  constructor (public readonly definitions: FixDefinitions, public readonly set: ContainedFieldSet, public readonly qualifiedName: string) {\n    const snake = _.snakeCase(this.qualifiedName)\n    if (set.type === ContainedSetType.Msg) {\n      this.snaked = `./${snake}`\n    } else {\n      this.snaked = `./set/${snake}`\n    }\n  }\n\n  public getExtended (field: ContainedField): string {\n    switch (field.type) {\n      case ContainedFieldType.Group: {\n        const gf = field as ContainedGroupField\n        switch (this.definitions.source) {\n          case FixDefinitionSource.QuickFix: {\n            return this.qualifiedName + field.name\n          }\n\n          case FixDefinitionSource.FixmlRepo: {\n            return gf.definition.name\n          }\n          default: {\n            return field.name\n          }\n        }\n      }\n\n      case ContainedFieldType.Component: {\n        const cf = field as ContainedComponentField\n        switch (this.definitions.source) {\n          case FixDefinitionSource.FixmlRepo: {\n            return cf.definition.name\n          }\n          default: {\n            return field.name\n          }\n        }\n      }\n\n      default:\n        return field.name\n    }\n  }\n\n  public getFieldGroupName (field: ContainedField) {\n    switch (field.type) {\n      case ContainedFieldType.Group: {\n        const gf = field as ContainedGroupField\n        switch (this.definitions.source) {\n          case FixDefinitionSource.FixmlRepo: {\n            return gf.definition.name\n          }\n          default: {\n            return field.name\n          }\n        }\n      }\n      default:\n        return field.name\n    }\n  }\n}\n"]}