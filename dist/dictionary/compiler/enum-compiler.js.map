{"version":3,"file":"enum-compiler.js","sourceRoot":"","sources":["../../../src/dictionary/compiler/enum-compiler.ts"],"names":[],"mappings":"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","sourcesContent":["import { FixDefinitions, SimpleFieldDefinition } from '../definition'\nimport { ICompilerSettings } from './compiler-settings'\nimport { StandardSnippet } from './standard-snippet'\nimport { ElasticBuffer } from '../../buffer'\nimport { ILooseObject } from '../../collections/collection'\n\nimport * as fs from 'fs'\nimport * as util from 'util'\nimport * as Path from 'path'\nimport * as _ from 'lodash'\nimport { TagType } from '../../buffer/tag/tag-type'\n\nexport class EnumCompiler {\n  private readonly buffer: ElasticBuffer = new ElasticBuffer()\n  private readonly consolidated: ElasticBuffer = new ElasticBuffer()\n  private readonly snippets: StandardSnippet\n\n  constructor (public readonly definitions: FixDefinitions, public readonly settings: ICompilerSettings) {\n    this.snippets = new StandardSnippet(settings)\n  }\n\n  private static getIndex (): string {\n    const lines = [\n      `export * from './all-enum'`,\n      `export * from './msg_tag'`,\n      ''\n    ]\n    return lines.join(require('os').EOL)\n  }\n\n  /*\n  enum MessageTypes {\n  Logon = 'A',\n  Heartbeat = '0',\n  TestRequest = '1'\n}\n   */\n\n  public async generate (asOneFile: string = null) {\n    this.generateTagEnum('MsgTag').then(async () => {\n      const toDo: SimpleFieldDefinition[] = this.toDo()\n      toDo.forEach(async (field: SimpleFieldDefinition) => {\n        await this.oneEnum(field, asOneFile)\n      })\n      if (asOneFile) {\n        await this.writeAsOne(asOneFile)\n        await this.writeFile('index', EnumCompiler.getIndex())\n      }\n    }).catch((e: Error) => {\n      throw e\n    })\n  }\n\n  public async oneEnum (field: SimpleFieldDefinition, asOneFile: string) {\n    const newLine = require('os').EOL\n    const api = this.generateEnum(field)\n    if (!asOneFile) {\n      await this.writeFile(field.name, api).catch((e: Error) => {\n        throw e\n      })\n    } else {\n      this.consolidated.writeString(api)\n      this.consolidated.writeString(newLine)\n    }\n  }\n\n  public generateEnum (field: SimpleFieldDefinition): string {\n    const buffer = this.buffer\n    if (field == null) {\n      throw new Error(`no simple field ${name} exists in definitions`)\n    }\n    if (!field.isEnum()) {\n      throw new Error(`field ${name} is not an enum type`)\n    }\n    return this.create(field.name, field.description, () => {\n      const newLine = require('os').EOL\n      return field.enums.keys().reduce((a: number, latest: string, i: number, arr: string[]) => {\n        let k = field.resolveEnum(latest)\n        let v: any = latest\n        switch (field.tagType) {\n          case TagType.Int: {\n            v = parseInt(latest, 10)\n            break\n          }\n        }\n\n        buffer.writeString(this.snippets.enumValue(k, v, 1))\n        if (i < arr.length - 1) {\n          buffer.writeString(',')\n        }\n        buffer.writeString(newLine)\n        return 0\n      }, 0)\n    })\n  }\n\n  public async generateTagEnum (name: string) {\n    const newLine = require('os').EOL\n    const tags = this.definitions.tagToSimple\n    const snippets = this.snippets\n    const api = this.create(name, null, () => {\n      const buffer = this.buffer\n      return Object.keys(tags).reduce((a: number, latest: string, i: number, arr: string[]) => {\n        const tag = parseInt(latest, 10)\n        const sf = tags[tag]\n        if (sf) {\n          if (this.settings.comment && sf.description) {\n            this.commentBlock(sf.description)\n          }\n          buffer.writeString(snippets.enumValue(sf.name, tag, 1))\n          if (i < arr.length - 1) {\n            buffer.writeString(',')\n          }\n          buffer.writeString(newLine)\n        }\n        return a\n      }, 0)\n    })\n    await this.writeFile(name, api)\n  }\n\n  private toDo (): SimpleFieldDefinition[] {\n    const done: ILooseObject = {}\n    return this.definitions.simple.values().reduce((a: SimpleFieldDefinition[], latest: SimpleFieldDefinition) => {\n      if (latest.isEnum() && !done[latest.name]) {\n        done[latest.name] = true\n        a.push(latest)\n      }\n      return a\n    }, [])\n  }\n\n  private async writeAsOne (asOneFile: string) {\n    const writer = util.promisify(fs.writeFile)\n    await writer(asOneFile, this.consolidated.toString(), {\n      encoding: 'utf8'\n    }\n    ).catch((e: Error) => {\n      throw e\n    })\n  }\n\n  private commentBlock (comment: string) {\n    const buffer = this.buffer\n    const snippets = this.snippets\n    const newLine = require('os').EOL\n    buffer.writeString(snippets.startBlockComment(0))\n    buffer.writeString(newLine)\n    buffer.writeString(snippets.commentBox(comment))\n    buffer.writeString(newLine)\n    buffer.writeString(snippets.endBlockComment(0))\n    buffer.writeString(newLine)\n  }\n\n  private async writeFile (name: string, api: string) {\n    const writer = util.promisify(fs.writeFile)\n    const fullName = this.getFileName(name)\n    await writer(fullName, api, {\n      encoding: 'utf8'}\n    ).catch((e: Error) => {\n      throw e\n    })\n  }\n\n  private getFileName (name: string): string {\n    const snake = _.snakeCase(name)\n    const settings = this.settings\n    const fileName = `${snake}.ts`\n    let path: string = `${settings.output}/enum/`\n    return Path.join(path, fileName)\n  }\n\n  private create (name: string, description: string, populateMembers: Function): string {\n    const newLine = require('os').EOL\n    const buffer = this.buffer\n    buffer.reset()\n    const snippets = this.snippets\n\n    if (this.settings.comment && description) {\n      this.commentBlock(description)\n    }\n    buffer.writeString(snippets.enum(name, 0))\n    buffer.writeString(' ')\n    buffer.writeString(snippets.startBlock(0))\n    buffer.writeString(newLine)\n    populateMembers()\n    buffer.writeString(snippets.endBlock(0))\n    buffer.writeString(newLine)\n    return buffer.toString()\n  }\n}\n"]}