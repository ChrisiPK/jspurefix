{"version":3,"file":"msg-compiler.js","sourceRoot":"","sources":["../../../src/dictionary/compiler/msg-compiler.ts"],"names":[],"mappings":"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","sourcesContent":["import { ElasticBuffer, Tags } from '../../buffer'\nimport { AsciiChars } from '../../buffer/ascii/'\nimport { ICompilerSettings } from './compiler-settings'\nimport { FixDefinitions } from '../definition'\nimport {\n  ContainedComponentField,\n  ContainedFieldSet,\n  ContainedGroupField,\n  ContainedSimpleField,\n  FieldsDispatch\n} from '../contained'\nimport { StandardSnippet } from './standard-snippet'\nimport { CompilerType } from './compiler-type'\nimport { Dictionary } from '../../collections'\n\nimport * as fs from 'fs'\nimport * as Util from 'util'\nimport * as Path from 'path'\nimport { SetReduce } from '../set-reduce'\nimport { ContainedSetType } from '../contained-set-type'\nimport { TagType } from '../../buffer/tag/tag-type'\n\nconst newLine = require('os').EOL\nconst justifiedWidth: number = 50\n\nexport class MsgCompiler {\n  readonly queue: CompilerType[] = []\n  readonly snippets: StandardSnippet\n  readonly buffer: ElasticBuffer = new ElasticBuffer()\n  readonly completed: Dictionary<CompilerType>\n\n  constructor (public readonly definitions: FixDefinitions, public readonly settings: ICompilerSettings) {\n    this.completed = new Dictionary<CompilerType>()\n    this.snippets = new StandardSnippet(this.settings)\n  }\n\n  public async generate () {\n    const types: string[] = this.settings.types || this.definitions.message.keys()\n    return this.createTypes(types)\n  }\n\n  private getFileName (compilerType: CompilerType): string {\n    const settings = this.settings\n    const fileName = `${compilerType.snaked}.ts`\n    return Path.join(settings.output, fileName)\n  }\n\n  private async createTypes (types: string[]) {\n    const definitions = this.definitions\n    types.forEach((type: string) => {\n      const definition = definitions.containedSet(type)\n      if (!definition) {\n        throw new Error(`no type ${type} defined`)\n      }\n      const ct = new CompilerType(this.definitions, definition, definition.name)\n      this.enqueue(ct)\n    })\n    await this.work()\n    await this.index()\n  }\n\n  private async work () {\n    const q = this.queue\n    const writeFile = Util.promisify(fs.writeFile)\n    while (q.length > 0) {\n      const compilerType: CompilerType = q.pop()\n      const api: string = this.generateMessages(compilerType)\n      const fullName = this.getFileName(compilerType)\n      await writeFile(fullName, api, {\n        encoding: 'utf8'}\n      )\n    }\n  }\n\n  private async index () {\n    const writeFile = Util.promisify(fs.writeFile)\n    const settings = this.settings\n    const fileName = 'index.ts'\n    const done = this.completed.values()\n    const exports: string[] = done.reduce((prev: string[], current: CompilerType) => {\n      prev.push(`export * from '${current.snaked}'`)\n      return prev\n    }, [`export * from './enum'`] as string[])\n    exports.sort()\n    exports.push('')\n    const api: string = exports.join(newLine)\n    const fullName: string = Path.join(settings.output, fileName)\n    await writeFile(fullName, api, {\n      encoding: 'utf8'}\n    )\n  }\n\n  private generateMessages (compilerType: CompilerType): string {\n    const definition = compilerType.set\n    const buffer: ElasticBuffer = this.buffer\n    buffer.reset()\n    const snippets = this.snippets\n    // a single class with dependencies included\n    let ptr: number = this.imports(compilerType)\n    if (ptr > 0) {\n      buffer.writeString(newLine)\n      buffer.writeString(newLine)\n    }\n    if (this.settings.comment && definition.description) {\n      const comment = snippets.commentBox(definition.description)\n      buffer.writeString(snippets.startBlockComment(0))\n      buffer.writeString(newLine)\n      buffer.writeString(comment)\n      buffer.writeString(newLine)\n      buffer.writeString(snippets.endBlockComment(0))\n      buffer.writeString(newLine)\n    }\n    buffer.writeString(snippets.interface(compilerType.qualifiedName, 0))\n    buffer.writeChar(AsciiChars.Space)\n    buffer.writeString(snippets.startBlock(0))\n    buffer.writeString(newLine)\n    this.fields(compilerType)\n    buffer.writeString(snippets.endBlock(0))\n    buffer.writeString(newLine)\n    return buffer.toString()\n  }\n\n  // only generate once\n  private enqueue (ct: CompilerType): void {\n    const completed = this.completed\n    const fullName = this.getFileName(ct)\n    if (completed.get(fullName)) {\n      return\n    }\n    this.queue.push(ct)\n    completed.addUpdate(fullName, ct)\n  }\n\n  private fieldSimple (simple: ContainedSimpleField): void {\n    const snippets = this.snippets\n    const settings = this.settings\n    const buffer = this.buffer\n    const len = buffer.writeString(snippets.simple(simple.name, Tags.toJSType(simple), simple.required, 1))\n    if (settings.tags) {\n      buffer.writeString(snippets.commentLine(`[${simple.position + 1}] ${simple.definition.tag} (${TagType[simple.definition.tagType]})`, justifiedWidth - len))\n    }\n    buffer.writeString(newLine)\n  }\n\n  private fieldGroup (groupField: ContainedGroupField, compilerType: CompilerType): void {\n    const buffer = this.buffer\n    const snippets = this.snippets\n    // for a group its field name is as defined in type, its type is qualified to avoid collisions\n    const extended: string = compilerType.getExtended(groupField)\n    const len = buffer.writeString(snippets.group(compilerType.getFieldGroupName(groupField), extended, groupField.required, 1))\n    this.setComment(groupField.definition, groupField.position, len)\n    this.enqueue(new CompilerType(this.definitions, groupField.definition, extended))\n    buffer.writeString(newLine)\n  }\n\n  private tagSummary (definition: ContainedFieldSet, max: number = 3): string {\n    function tagTxt (tag: number) {\n      const name = definition.getFieldName(tag)\n      return `${name}.${tag}`\n    }\n\n    function setTxt (flattened: number[]) {\n      return flattened.map(f => tagTxt(f)).join(', ')\n    }\n\n    const flattened = definition.flattenedTag\n    if (max >= flattened.length) {\n      return setTxt(flattened)\n    }\n\n    const front = setTxt(flattened.slice(0, max - 1))\n    return `${front} .. ${tagTxt(flattened[flattened.length - 1])}`\n  }\n\n  private setComment (set: ContainedFieldSet, position: number, len: number): void {\n    if (this.settings.tags) {\n      const tagTxt = this.tagSummary(set)\n      const buffer = this.buffer\n      buffer.writeString(this.snippets.commentLine(`[${position + 1}] ${tagTxt}`, justifiedWidth - len))\n    }\n  }\n\n  private fieldComponent (componentField: ContainedComponentField, compilerType: CompilerType): void {\n    const buffer = this.buffer\n    const snippets = this.snippets\n    const extended: string = compilerType.getExtended(componentField)\n    const len = buffer.writeString(snippets.component(extended, componentField.required, 1))\n    this.enqueue(new CompilerType(this.definitions, componentField.definition, extended))\n    this.setComment(componentField.definition, componentField.position, len)\n    buffer.writeString(newLine)\n  }\n\n  private fields (compilerType: CompilerType): void {\n    this.attributes(compilerType)\n    new FieldsDispatch().dispatchFields(compilerType.set.fields, {\n      group: (g: ContainedGroupField) => this.fieldGroup(g, compilerType),\n      simple: (simple: ContainedSimpleField) => this.fieldSimple(simple),\n      component: (c: ContainedComponentField) => this.fieldComponent(c, compilerType)\n    })\n  }\n\n  private attributes (compilerType: CompilerType): void {\n    const settings = this.settings\n    const snippets = this.snippets\n    const buffer = this.buffer\n    compilerType.set.localAttribute.forEach((simple: ContainedSimpleField) => {\n      const len = buffer.writeString(snippets.simple(simple.definition.name, Tags.toJSType(simple), simple.required, 1))\n      if (settings.tags) {\n        buffer.writeString(snippets.commentLine(`${simple.definition.tag}`, justifiedWidth - len))\n      }\n      buffer.writeString(newLine)\n    })\n  }\n\n  private imports (compilerType: CompilerType): number {\n    const reducer = new SetReduce<string[]>()\n    const isMsg = compilerType.set.type === ContainedSetType.Msg\n    const snippets = this.snippets\n    const imports: string[] = reducer.reduce(compilerType.set, {\n      component: (a: string[], c: ContainedComponentField) => {\n        a.push(`${snippets.import(compilerType.getExtended(c), isMsg, 0)}`)\n        return a\n      },\n      group: (a: string[], g: ContainedGroupField) => {\n        a.push(`${snippets.import(compilerType.getExtended(g), isMsg, 0)}`)\n        return a\n      }\n    }, [])\n\n    return this.buffer.writeString(imports.join(newLine))\n  }\n}\n"]}