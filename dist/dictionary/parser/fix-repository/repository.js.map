{"version":3,"file":"repository.js","sourceRoot":"","sources":["../../../../src/dictionary/parser/fix-repository/repository.ts"],"names":[],"mappings":"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","sourcesContent":["import { ILooseObject } from '../../../collections/collection'\nimport { SimpleFieldDefinition, GroupFieldDefinition, ComponentFieldDefinition,\n  MessageDefinition, FixDefinitions } from '../../definition'\nimport { Dictionary } from '../../../collections'\nimport { ContainedFieldSet, ContainedComponentField, ContainedGroupField, ContainedSimpleField } from '../../contained'\nimport { FixVersion } from '../../fix-versions'\nimport { GetJsFixLogger, IJsFixLogger } from '../../../config'\nimport { FixDefinitionSource } from '../../fix-definition-source'\nimport { ContainedSetType } from '../../contained-set-type'\nimport { IRepositoryMessage } from './repository-message'\nimport { IRepositoryEnum } from './repository-enum'\nimport { IRepositoryDataType } from './repository-data-type'\nimport { IRepositoryComponent } from './repository-component'\nimport { IRepositoryField } from './repository-field'\nimport { IRepositoryAbbreviation } from './repository-abbreviation'\nimport { IRepositoryMsgContent } from './repository-msg-content'\n\nexport class Repository {\n  public Enums: IRepositoryEnum[]\n  public Fields: IRepositoryField[]\n  public DataTypes: IRepositoryDataType[]\n  public Components: IRepositoryComponent[]\n  public Messages: IRepositoryMessage[]\n  public MsgContents: IRepositoryMsgContent[]\n  public Abbreviations: IRepositoryAbbreviation[]\n  public includesAbbreviations: boolean\n    // derived from above\n  public readonly definitions: FixDefinitions\n  private readonly groupLookup: Dictionary<GroupFieldDefinition> = new Dictionary<GroupFieldDefinition>()\n  private contentLookup: Dictionary<IRepositoryMsgContent[]>\n  private componentLookup: Dictionary<IRepositoryComponent>\n  private dataTypeLookup: Dictionary<IRepositoryDataType>\n  private readonly logger: IJsFixLogger\n\n  constructor (public readonly version: FixVersion, public readonly getLogger: GetJsFixLogger) {\n    this.logger = getLogger('Repository')\n    this.includesAbbreviations = Repository.doesIncludeAbbreviations(version)\n    this.definitions = new FixDefinitions(FixDefinitionSource.FixRepo, version)\n  }\n\n  private static doesIncludeAbbreviations (version: FixVersion): boolean {\n    let includesAbbreviations: boolean\n    switch (version) {\n      case FixVersion.FIX44:\n      case FixVersion.FIX50:\n      case FixVersion.FIX50SP1:\n      case FixVersion.FIX50SP2:\n        includesAbbreviations = true\n        break\n\n      default: {\n        includesAbbreviations = false\n        break\n      }\n    }\n    return includesAbbreviations\n  }\n\n  public assign (name: string, data: ILooseObject[]): void {\n    switch (name) {\n      case 'Fields': {\n        this.Fields = data as IRepositoryField[]\n        break\n      }\n\n      case 'Enums': {\n        this.Enums = data as IRepositoryEnum[]\n        break\n      }\n\n      case 'Datatypes': {\n        this.DataTypes = data as IRepositoryDataType[]\n        break\n      }\n\n      case 'Components': {\n        this.Components = data as IRepositoryComponent[]\n        break\n      }\n\n      case 'Messages': {\n        this.Messages = data as IRepositoryMessage[]\n        break\n      }\n\n      case 'MsgContents': {\n        this.MsgContents = data as IRepositoryMsgContent[]\n        if (!this.includesAbbreviations) {\n          this.toDefinitions()\n        }\n        break\n      }\n\n      case 'Abbreviations': {\n        this.Abbreviations = data as IRepositoryAbbreviation[]\n        this.toDefinitions()\n        break\n      }\n    }\n  }\n\n  private summarise (): void {\n    const logger = this.logger\n    const definitions = this.definitions\n    logger.info(`definitions: ${definitions.simple.count()} fields`)\n    logger.info(`definitions: ${definitions.component.count()} components`)\n    logger.info(`definitions: ${definitions.message.count()} messages`)\n  }\n\n  private toDefinitions (): void {\n    this.fields()\n    this.complex()\n    this.header()\n    this.trailer()\n    this.summarise()\n  }\n\n  private complex (): void {\n    this.contentLookup = this.contents()\n    this.componentLookup = this.components()\n    this.Components.forEach((c: IRepositoryComponent) => this.resolve(c))\n    this.Messages.forEach((m: IRepositoryMessage) => {\n      const msg = this.message(m)\n      this.logger.debug(`${msg.toString()}`)\n      this.definitions.addMessage(msg)\n    })\n  }\n\n  private header (): void {\n    const h: ComponentFieldDefinition = this.definitions.component.get('StandardHeader')\n    this.definitions.component.add('header', h)\n  }\n\n  private trailer (): void {\n    const t: ComponentFieldDefinition = this.definitions.component.get('StandardTrailer')\n    this.definitions.component.add('trailer', t)\n  }\n\n  private static isNative (f: IRepositoryField): boolean {\n    return f.Type === 'Boolean' ||\n      f.Type === 'data' ||\n      f.Type === 'LocalMktDate' ||\n      f.Type === 'UTCDateOnly' ||\n      f.Type === 'UTCTimestamp'\n  }\n\n  private static makeSimple (f: IRepositoryField, type: string) {\n    return new SimpleFieldDefinition(\n      f.Tag,\n      f.Name,\n      f.AbbrName ? f.AbbrName : f.Name,\n      f.BaseCategory,\n      f.BaseCategoryAbbrName,\n      type.toUpperCase(),\n      f.Description)\n  }\n\n  private getType (f: IRepositoryField): string {\n    const types = this.dataTypeLookup\n    const nativeType = Repository.isNative(f)\n    let type = f.Type\n    const mapped = !nativeType && types.get(type)\n    if (mapped) {\n      type = mapped.BaseType ?? type\n    }\n    return type\n  }\n\n  private fieldEnums () {\n    const definitions = this.definitions\n    for (const e of this.Enums) {\n      const field: SimpleFieldDefinition = definitions.tagToSimple[parseInt(e.Tag, 10)]\n      if (field == null) {\n        continue\n      }\n      if (e.Value && e.SymbolicName) {\n        field.addEnum(e.Value, e.SymbolicName, e.Description)\n      }\n    }\n  }\n\n  private fields (): void {\n    this.dataTypeLookup = this.types()\n    const definitions = this.definitions\n    const types = this.dataTypeLookup\n    types.remove('boolean')\n    types.remove('data')\n    this.Fields.forEach((f: IRepositoryField) => {\n      const type = this.getType(f)\n      definitions.addSimpleFieldDef(Repository.makeSimple(f, type))\n    })\n    this.fieldEnums()\n  }\n\n  private contents (): Dictionary<IRepositoryMsgContent[]> {\n    return this.MsgContents.reduce((a, current) => {\n      let content: IRepositoryMsgContent[] = a.get(current.ComponentID)\n      if (!content) {\n        content = []\n        a.add(current.ComponentID, content)\n      }\n      content[content.length] = current\n      return a\n    }, new Dictionary<IRepositoryMsgContent[]>())\n  }\n\n  private resolveToFieldSet (content: IRepositoryMsgContent[], parentSet: ContainedFieldSet): void {\n    content.forEach((current: IRepositoryMsgContent) => {\n      const required: boolean = current.Reqd === '1'\n      const tag: number = parseInt(current.TagText, 10)\n      if (!isNaN(tag)) {\n        const sf: SimpleFieldDefinition = this.definitions.tagToSimple[tag]\n        if (sf) {\n          parentSet.add(new ContainedSimpleField(sf, parentSet.fields.length, required, false))\n        }\n      } else {\n                // is there a definition for this type yet create.\n        let childSet: ContainedFieldSet = this.definitions.component.get(current.TagText)\n        if (!childSet) {\n          const cl: IRepositoryComponent = this.componentLookup.get(current.TagText)\n          if (cl) {\n            childSet = this.resolve(cl)\n          }\n        }\n        switch (childSet.type) {\n          case ContainedSetType.Component: {\n            parentSet.add(new ContainedComponentField(childSet, parentSet.fields.length, required))\n            break\n          }\n\n          case ContainedSetType.Group: {\n            parentSet.add(new ContainedGroupField(childSet as GroupFieldDefinition, parentSet.fields.length, required))\n            break\n          }\n\n          default: {\n            throw new Error(`unknown set type ${childSet.type}`)\n          }\n        }\n      }\n      return parentSet\n    })\n  }\n\n  private resolve (c: IRepositoryComponent): ContainedFieldSet {\n    switch (c.ComponentType) {\n      case 'ImplicitBlockRepeating':\n      case 'BlockRepeating': {\n        const content: IRepositoryMsgContent[] = this.contentLookup.get(c.ComponentID)\n        const noField: SimpleFieldDefinition = this.definitions.tagToSimple[parseInt(content[0].TagText, 10)]\n        let def: GroupFieldDefinition = this.groupLookup.get(c.ComponentID)\n        if (!def) {\n          def = new GroupFieldDefinition(c.Name, c.AbbrName, c.CategoryID, noField, c.Description)\n          this.resolveToFieldSet(content.slice(1), def)\n          this.groupLookup.add(c.ComponentID, def)\n        }\n        return def\n      }\n\n      default: {\n        const content: IRepositoryMsgContent[] = this.contentLookup.get(c.ComponentID)\n        let def: ComponentFieldDefinition = this.definitions.component.get(c.Name)\n        if (!def) {\n          def = new ComponentFieldDefinition(c.Name, c.AbbrName, c.CategoryID, c.Description)\n          this.resolveToFieldSet(content, def)\n          this.definitions.addComponentFieldDef(def)\n        }\n        return def\n      }\n    }\n  }\n\n  private message (m: IRepositoryMessage): MessageDefinition {\n    const definitions = this.definitions\n    const content: IRepositoryMsgContent[] = this.contentLookup.get(m.ComponentID)\n    let def: MessageDefinition = definitions.message.get(m.Name)\n    if (!def) {\n      def = new MessageDefinition(m.Name, m.AbbrName, m.MsgType, m.CategoryID, m.Description)\n      this.resolveToFieldSet(content, def)\n      definitions.addComponentFieldDef(def)\n    }\n    return def\n  }\n\n  private components (): Dictionary<IRepositoryComponent> {\n    return this.Components.reduce((a: Dictionary<IRepositoryComponent>, current: IRepositoryComponent) => {\n      a.add(current.Name, current)\n      a.add(current.ComponentID, current)\n      return a\n    }, new Dictionary<IRepositoryComponent>())\n  }\n\n  private types (): Dictionary<IRepositoryDataType> {\n    return this.DataTypes.reduce((a: Dictionary<IRepositoryDataType>, current: IRepositoryDataType) => {\n      a.add(current.Name, current)\n      return a\n    }, new Dictionary<IRepositoryDataType>())\n  }\n}\n"]}