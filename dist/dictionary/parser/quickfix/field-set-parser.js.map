{"version":3,"file":"field-set-parser.js","sourceRoot":"","sources":["../../../../src/dictionary/parser/quickfix/field-set-parser.ts"],"names":[],"mappings":";;;AAAA,iDAA2E;AAC3E,+CAA0C;AAC1C,mDAA8C;AAG9C,MAAa,cAAe,SAAQ,wBAAU;IAC5C,YAAa,WAA2B,EAAS,MAAc;QAC7D,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAAA;QADqB,WAAM,GAAN,MAAM,CAAQ;IAE/D,CAAC;IAEM,IAAI,CAAE,IAAY,EAAE,IAAc;QACvC,QAAQ,IAAI,CAAC,IAAI,EAAE;YACjB,KAAK,WAAW,CAAC;YACjB,KAAK,QAAQ,CAAC;YACd,KAAK,SAAS,CAAC,CAAC;gBACd,MAAM,aAAa,GAAW,IAAI,CAAC,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAA;gBAC/D,IAAI,QAAQ,GAAG,aAAa,CAAA;gBAC5B,IAAI,aAAa,KAAK,QAAQ,EAAE;oBAC9B,QAAQ,GAAG,gBAAgB,CAAA;iBAC5B;qBAAM,IAAI,aAAa,KAAK,SAAS,EAAE;oBACtC,QAAQ,GAAG,iBAAiB,CAAA;iBAC7B;gBAED,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;oBACvB,MAAM,GAAG,GAA6B,IAAI,qCAAwB,CAAC,QAAQ,EAAE,aAAa,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;oBACvG,MAAM,OAAO,GAAiB,IAAI,4BAAY,CAAC,QAAQ,EAAE,IAAI,EAAE,GAAG,CAAC,CAAA;oBACnE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;iBACjC;qBAAM;oBACL,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAA;oBACtC,MAAM,OAAO,GAAiB,IAAI,4BAAY,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;oBACrE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;iBACjC;gBACD,MAAK;aACN;YAED,KAAK,OAAO,CAAC,CAAC;gBACZ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;gBACpB,MAAK;aACN;YAED,KAAK,OAAO,CAAC,CAAC;gBACZ,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAA;gBAC/B,MAAK;aACN;SACF;IACH,CAAC;IAEM,KAAK,CAAE,IAAY,EAAE,IAAY;QACtC,QAAQ,IAAI,EAAE;YACZ,KAAK,OAAO,CAAC,CAAC;gBACZ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;gBACxB,MAAK;aACN;YAED,KAAK,WAAW,CAAC;YACjB,KAAK,QAAQ,CAAC;YACd,KAAK,SAAS,CAAC,CAAC;gBACd,MAAM,MAAM,GAAiB,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,CAAA;gBACrD,IAAI,MAAM,IAAI,IAAI,EAAE;oBAClB,MAAM,IAAI,KAAK,CAAC,mBAAmB,IAAI,6BAA6B,CAAC,CAAA;iBACtE;gBACD,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;oBACpB,OAAM;iBACP;gBACD,MAAM,WAAW,GAA6B,MAAM,CAAC,WAAW,EAAE,CAAA;gBAClE,IAAI,WAAW,IAAI,IAAI,EAAE;oBACvB,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAA;iBACnD;qBAAM;oBACL,MAAM,IAAI,KAAK,CAAC,0CAA0C,MAAM,CAAC,IAAI,GAAG,CAAC,CAAA;iBAC1E;gBAED,MAAK;aACN;SACF;IACH,CAAC;CACF;AAtED,wCAsEC","sourcesContent":["import { ComponentFieldDefinition, FixDefinitions } from '../../definition'\nimport { NodeParser } from './node-parser'\nimport { ParseContext } from './parse-context'\nimport { ISaxNode } from '../../sax-node'\n\nexport class FieldSetParser extends NodeParser {\n  constructor (definitions: FixDefinitions, public passes: number) {\n    super(definitions, passes)\n  }\n\n  public open (line: number, node: ISaxNode): void {\n    switch (node.name) {\n      case 'component':\n      case 'header':\n      case 'trailer': {\n        const componentName: string = node.attributes.name || node.name\n        let fullName = componentName\n        if (componentName === 'header') {\n          fullName = 'StandardHeader'\n        } else if (componentName === 'trailer') {\n          fullName = 'StandardTrailer'\n        }\n\n        if (!node.isSelfClosing) {\n          const set: ComponentFieldDefinition = new ComponentFieldDefinition(fullName, componentName, null, null)\n          const context: ParseContext = new ParseContext(fullName, true, set)\n          this.parseContexts.push(context)\n        } else {\n          this.addComponentField(fullName, node)\n          const context: ParseContext = new ParseContext(fullName, false, null)\n          this.parseContexts.push(context)\n        }\n        break\n      }\n\n      case 'field': {\n        this.addSimple(node)\n        break\n      }\n\n      case 'group': {\n        this.beginGroupDefinition(node)\n        break\n      }\n    }\n  }\n\n  public close (line: number, name: string): void {\n    switch (name) {\n      case 'group': {\n        this.addGroupField(name)\n        break\n      }\n\n      case 'component':\n      case 'header':\n      case 'trailer': {\n        const latest: ParseContext = this.parseContexts.pop()\n        if (latest == null) {\n          throw new Error(`component field ${name} closes yet does not exist.`)\n        }\n        if (!latest.defining) {\n          return\n        }\n        const asComponent: ComponentFieldDefinition = latest.asComponent()\n        if (asComponent != null) {\n          this.definitions.addComponentFieldDef(asComponent)\n        } else {\n          throw new Error(`latest not instance of component field ${latest.name} `)\n        }\n\n        break\n      }\n    }\n  }\n}\n"]}