{"version":3,"file":"message-parser.js","sourceRoot":"","sources":["../../../../src/dictionary/parser/quickfix/message-parser.ts"],"names":[],"mappings":";;;AAAA,iDAAoE;AACpE,+CAA0C;AAC1C,mDAA8C;AAC9C,+CAAyD;AAGzD,MAAa,aAAc,SAAQ,wBAAU;IAE3C,YAAa,WAA2B,EAAS,MAAc;QAC7D,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAAA;QADqB,WAAM,GAAN,MAAM,CAAQ;IAE/D,CAAC;IAEM,IAAI,CAAE,IAAY,EAAE,IAAc;QACvC,QAAQ,IAAI,CAAC,IAAI,EAAE;YACjB,KAAK,SAAS,CAAC,CAAC;gBACd,MAAM,GAAG,GAAQ,IAAI,CAAC,UAAU,CAAA;gBAChC,MAAM,GAAG,GAAsB,IAAI,8BAAiB,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;gBACvG,MAAM,OAAO,GAAiB,IAAI,4BAAY,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAA;gBACnE,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAA;gBAC5D,MAAM,SAAS,GAAG,IAAI,mCAAuB,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;gBAC3E,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;gBAClB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;gBAChC,MAAK;aACN;YAED,KAAK,OAAO,CAAC,CAAC;gBACZ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;gBACpB,MAAK;aACN;YAED,KAAK,WAAW,CAAC,CAAC;gBAChB,IAAI,IAAI,CAAC,aAAa,EAAE;oBACtB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;iBACnD;gBACD,MAAK;aACN;YAED,KAAK,OAAO,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;oBACvB,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAA;iBAChC;gBACD,MAAK;aACN;SACF;IACH,CAAC;IAEM,KAAK,CAAE,IAAY,EAAE,IAAY;QACtC,QAAQ,IAAI,EAAE;YACZ,KAAK,SAAS,CAAC,CAAC;gBACd,MAAM,MAAM,GAAiB,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,CAAA;gBACrD,MAAM,OAAO,GAAsB,MAAM,CAAC,SAAS,EAAE,CAAA;gBACrD,IAAI,OAAO,IAAI,IAAI,EAAE;oBACnB,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,CAAA;iBACrC;gBACD,MAAK;aACN;YAED,KAAK,OAAO,CAAC,CAAC;gBACZ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;gBACxB,MAAK;aACN;SACF;IACH,CAAC;CACF;AAzDD,sCAyDC","sourcesContent":["import { FixDefinitions, MessageDefinition } from '../../definition'\nimport { NodeParser } from './node-parser'\nimport { ParseContext } from './parse-context'\nimport { ContainedComponentField } from '../../contained'\nimport { ISaxNode } from '../../sax-node'\n\nexport class MessageParser extends NodeParser {\n\n  constructor (definitions: FixDefinitions, public passes: number) {\n    super(definitions, passes)\n  }\n\n  public open (line: number, node: ISaxNode): void {\n    switch (node.name) {\n      case 'message': {\n        const att: any = node.attributes\n        const msg: MessageDefinition = new MessageDefinition(att.name, att.name, att.msgtype, att.msgcat, null)\n        const context: ParseContext = new ParseContext(msg.name, true, msg)\n        const hdr = this.definitions.component.get('StandardHeader')\n        const contained = new ContainedComponentField(hdr, msg.fields.length, true)\n        msg.add(contained)\n        this.parseContexts.push(context)\n        break\n      }\n\n      case 'field': {\n        this.addSimple(node)\n        break\n      }\n\n      case 'component': {\n        if (node.isSelfClosing) {\n          this.addComponentField(node.attributes.name, node)\n        }\n        break\n      }\n\n      case 'group': {\n        if (!node.isSelfClosing) {\n          this.beginGroupDefinition(node)\n        }\n        break\n      }\n    }\n  }\n\n  public close (line: number, name: string): void {\n    switch (name) {\n      case 'message': {\n        const parent: ParseContext = this.parseContexts.pop()\n        const message: MessageDefinition = parent.asMessage()\n        if (message != null) {\n          this.definitions.addMessage(message)\n        }\n        break\n      }\n\n      case 'group': {\n        this.addGroupField(name)\n        break\n      }\n    }\n  }\n}\n"]}