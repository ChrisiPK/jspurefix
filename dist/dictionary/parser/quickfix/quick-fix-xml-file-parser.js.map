{"version":3,"file":"quick-fix-xml-file-parser.js","sourceRoot":"","sources":["../../../../src/dictionary/parser/quickfix/quick-fix-xml-file-parser.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs'\nimport { SAXParser } from 'sax'\nimport { IDictDoneCb, SAXStream } from '../../dict-primitive'\nimport { FixDefinitions } from '../../definition'\nimport { FieldDefinitionParser } from './field-definition-parser'\nimport { FieldSetParser } from './field-set-parser'\nimport { MessageParser } from './message-parser'\nimport { NodeParser } from './node-parser'\nimport { FixParser } from '../../fix-parser'\nimport { GetJsFixLogger } from '../../../config'\nimport { promisify } from 'util'\nimport { ContainedComponentField } from '../../contained'\nimport { ISaxNode } from '../../sax-node'\nimport { FixDefinitionSource } from '../../fix-definition-source'\nimport { VersionUtil } from '../../version-util'\nimport { ParseState } from './parse-state'\n\nexport class QuickFixXmlFileParser extends FixParser {\n\n  public parseState: ParseState = ParseState.Begin\n  public numberPasses: number = 0\n  public definitions: FixDefinitions\n  private readonly singlePass = promisify(QuickFixXmlFileParser.subscribe)\n\n  constructor (public readonly xmlPath: string, public getLogger: GetJsFixLogger) {\n    super()\n  }\n\n  private static subscribe (instance: QuickFixXmlFileParser, saxStream: SAXStream, done: IDictDoneCb): void {\n    let parser: NodeParser\n\n    instance.numberPasses++\n    switch (instance.parseState) {\n      case ParseState.Begin: {\n        instance.parseState = ParseState.FieldDefinitions\n        break\n      }\n      case ParseState.FieldDefinitions: {\n        instance.parseState = ParseState.ComponentsFirstPass\n        break\n      }\n      case ParseState.ComponentsFirstPass: {\n        instance.parseState = ParseState.ComponentsSecondPass\n        break\n      }\n      case ParseState.ComponentsSecondPass: {\n        instance.parseState = ParseState.ComponentsThirdPass\n        break\n      }\n      case ParseState.ComponentsThirdPass: {\n        instance.parseState = ParseState.Messages\n        break\n      }\n    }\n\n    const saxParser: SAXParser = saxStream._parser\n\n    saxStream.on('error', (e: Error) => {\n      done(e, null)\n    })\n\n    saxStream.on('closetag', (name) => {\n      if (parser != null) {\n        parser.close(saxParser.line, name)\n      }\n      switch (name) {\n        case 'repository':\n        case 'messages':\n        case 'components':\n        case 'header':\n        case 'trailer': {\n          parser = null\n          break\n        }\n      }\n    })\n\n    saxStream.on('opentag', (node) => {\n      const saxNode: ISaxNode = node as ISaxNode\n\n      switch (saxNode.name) {\n\n        case 'fix': {\n          switch (instance.parseState) {\n            case ParseState.FieldDefinitions: {\n              const major = saxNode.attributes.major\n              const minor = saxNode.attributes.major\n              const description: string = `FIX.${major}.${minor}`\n              instance.definitions = new FixDefinitions(FixDefinitionSource.QuickFix, VersionUtil.resolve(description))\n              break\n            }\n          }\n          break\n        }\n\n        case 'fields': {\n          switch (instance.parseState) {\n            case ParseState.FieldDefinitions: {\n              parser = new FieldDefinitionParser(instance.definitions, instance.numberPasses)\n              break\n            }\n            default: {\n              parser = null\n            }\n          }\n          break\n        }\n\n        case 'messages': {\n          switch (instance.parseState) {\n            case ParseState.Messages: {\n              parser = new MessageParser(instance.definitions, instance.numberPasses)\n              break\n            }\n\n            default:\n              break\n          }\n          break\n        }\n\n        case 'components': {\n                    // can have a group containing components which contain themselves components of groups\n                    // each step will build forward references to a deeper level to ensure final messages\n                    // have all dependencies correctly defined.\n          switch (instance.parseState) {\n            case ParseState.ComponentsFirstPass:\n            case ParseState.ComponentsSecondPass:\n            case ParseState.ComponentsThirdPass:\n              parser = new FieldSetParser(instance.definitions, instance.numberPasses)\n              break\n          }\n          break\n        }\n\n        case 'field':\n        case 'value':\n        case 'component':\n        case 'group': {\n          if (parser != null) {\n            parser.open(saxParser.line, saxNode)\n          }\n          break\n        }\n\n        case 'message': {\n          switch (instance.parseState) {\n            case ParseState.Messages: {\n              if (parser != null) {\n                parser.open(saxParser.line, saxNode)\n              }\n              break\n            }\n\n            default:\n              break\n          }\n          break\n        }\n\n        case 'header':\n        case 'trailer': {\n          switch (instance.parseState) {\n            case ParseState.Messages: {\n              parser = new FieldSetParser(instance.definitions, instance.numberPasses)\n              parser.open(saxParser.line, node)\n              break\n            }\n          }\n          break\n        }\n      }\n    })\n\n    saxStream.on('ready', () => {\n      if (done) {\n        parser = null\n        done(null, instance.definitions)\n      }\n    })\n  }\n\n  private encloseMessages (): void {\n    const messages = this.definitions.message\n    const keys = messages.keys()\n    const trailerName = 'StandardTrailer'\n    keys.forEach(k => {\n      const message = messages.get(k)\n      const trailer = this.definitions.component.get(trailerName)\n      if (trailer && !message.components.containsKey(trailerName)) {\n        const contained = new ContainedComponentField(trailer, message.fields.length, true)\n        message.add(contained)\n      }\n    })\n  }\n\n  public parse (): Promise<FixDefinitions> {\n    return new Promise<FixDefinitions>(async (accept, reject) => {\n      try {\n        await this.onePass() // first fetch all field definitions\n        await this.onePass() // first pass of components, will not know about forward components.\n        await this.onePass() // second pass of components top level with forward references replace\n        await this.onePass() // third pass of components all fully resolved i.e. pick up versions from pass above\n        await this.onePass() // lastly messages with all dependencies\n        this.encloseMessages()\n        accept(this.definitions)\n      } catch (e) {\n        reject(e)\n      }\n    })\n  }\n\n  private async onePass (): Promise<FixDefinitions> {\n    const pass: fs.ReadStream = fs.createReadStream(this.xmlPath)\n    const saxStream: SAXStream = require('sax').createStream(true, {})\n    pass.pipe(saxStream)\n    return this.singlePass(this, saxStream)\n  }\n}\n"]}