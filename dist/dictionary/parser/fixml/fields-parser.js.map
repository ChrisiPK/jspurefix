{"version":3,"file":"fields-parser.js","sourceRoot":"","sources":["../../../../src/dictionary/parser/fixml/fields-parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { ILooseObject } from '../../../collections/collection'\nimport { Dictionary } from '../../../collections'\nimport { SimpleFieldDefinition, FixDefinitions } from '../../definition'\nimport { XsdParser } from './xsd-parser'\nimport { ISaxNode } from '../../sax-node'\n\ninterface ISimpleField extends ILooseObject {\n  restrictionBase: string\n  documentation: string\n  Protocol: string\n  simpleTypeName: string\n  name: string\n  ComponentType: string,\n  Tag: string,\n  Type: string\n  AbbrName: string\n  Category: string\n  CategoryAbbrName: string\n  enums: Dictionary<string>\n  currentEnum: string\n}\n\ninterface IAlias {\n  name: string\n  mapped: string\n}\n\nexport class FieldsParser extends XsdParser {\n  private alias: IAlias[] = []\n  public constructor (public readonly definitions: FixDefinitions) {\n    super(definitions)\n  }\n\n  public value (line: number, n: string, v: string): void {\n    const current: ISimpleField = this.current as ISimpleField\n    switch (n) {\n      case 'fm:EnumDoc': {\n        current.enums.add(current.currentEnum, v)\n        break\n      }\n      case 'xs:documentation': {\n        this.current['documentation'] = v\n        break\n      }\n    }\n  }\n\n  public close (line: number, node: string): void {\n    const current: ISimpleField = this.current as ISimpleField\n    switch (node) {\n      case'xs:simpleType': {\n        this.data[this.data.length] = current\n        break\n      }\n\n      case 'xs:schema': {\n        this.insertFields()\n        break\n      }\n    }\n  }\n\n  public open (line: number, node: ISaxNode): void {\n    switch (node.name) {\n\n      case 'xs:simpleType': {\n        this.current = {\n          simpleTypeName: node.attributes['name']\n        } as ISimpleField\n        break\n      }\n\n      case 'fm:Xref': {\n        this.assign(node)\n        break\n      }\n\n      case 'xs:restriction': {\n        this.current.restrictionBase = node.attributes['base']\n        break\n      }\n\n      case 'fm:EnumDoc': {\n        if (!this.current.enums) {\n          this.current.enums = new Dictionary<string>()\n        }\n        this.current.currentEnum = node.attributes['value']\n        this.pending = node.name\n        break\n      }\n\n      default:\n        this.pending = node.name\n    }\n  }\n\n  private insertFields (): void {\n    const alias = this.alias\n    this.data.forEach((f: ISimpleField) => {\n      const sf: SimpleFieldDefinition = new SimpleFieldDefinition(f.Tag,\n        f.name,\n        f.AbbrName,\n        f.Category,\n        f.CategoryAbbrName,\n        f.Type,\n        f.documentation)\n      if (f.enums) {\n        f.enums.forEach((k: string, v: string) => {\n          sf.addEnum(k, v)\n        })\n      }\n      if (f.name && f.Type && f.Tag) {\n        this.definitions.addSimpleFieldDef(sf, f.simpleTypeName)\n      } else if (f.restrictionBase && f.simpleTypeName) {\n        let mapped = f.simpleTypeName\n        if (mapped.endsWith('_t')) {\n          mapped = mapped.replace(/_t$/, '')\n        } else {\n          mapped = f.restrictionBase\n        }\n        alias.push({\n          name: f.simpleTypeName,\n          mapped: mapped\n        })\n      }\n    })\n    alias.forEach((a: IAlias) => {\n      this.definitions.addSimpleAlias(a.mapped, a.name)\n    })\n  }\n}\n"]}