{"version":3,"file":"include-graph.js","sourceRoot":"","sources":["../../../../src/dictionary/parser/fixml/include-graph.ts"],"names":[],"mappings":"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","sourcesContent":["import { SAXStream } from '../../dict-primitive'\nimport { Dictionary } from '../../../collections'\nimport { INumericKeyed } from '../../../collections/collection'\nimport * as path from 'path'\nimport * as fs from 'fs'\nimport { ISaxNode } from '../../sax-node'\n\nexport interface IInclude {\n  parent: string\n  children: string[]\n}\n\nexport interface IGraphNode {\n  file: string\n  node: number\n  edges: number[]\n}\n\n/*\n  construct a dependency graph from all the xsd files to compute an order to build the definition\n */\n\nexport class IncludeGraph {\n  private nodes: Dictionary<number>\n  private includes: IInclude[]\n  private graph: INumericKeyed<IGraphNode>\n  constructor (public readonly root: string, public readonly main: string) {\n  }\n\n  public async build (): Promise<any> {\n    this.includes = await this.getIncludes(this.main)\n    this.assignNodes()\n    this.getGraph()\n  }\n\n  public resolve (file: string): string[] {\n    const label: number = this.nodes.get(file)\n    if (label == null) {\n      return null\n    }\n    const depends: number[] = []\n    this.resolve_nodes(label, depends)\n    return depends.map((i: number) => {\n      return this.graph[i].file\n    })\n  }\n\n  private resolve_nodes (label: number, depends: number[]): void {\n    const node: IGraphNode = this.graph[label]\n    for (let e of node.edges) {\n      if (depends.indexOf(e) < 0) {\n        this.resolve_nodes(e, depends)\n      }\n    }\n    depends.push(label)\n  }\n\n  private getGraph () {\n    const nodes = this.nodes\n    this.graph = this.includes.reduce((a: INumericKeyed<IGraphNode>, current: IInclude) => {\n      const parent: number = nodes.get(current.parent)\n      let parentNode = a[parent]\n      if (!parentNode) {\n        a[parent] = parentNode = {\n          file: current.parent,\n          node: parent,\n          edges: []\n        } as IGraphNode\n      }\n      current.children.forEach((s: string) => {\n        const child: number = nodes.get(s)\n        if (parentNode.edges.indexOf(child) < 0) {\n          parentNode.edges.push(child)\n        }\n      })\n      return a\n    }, {} as INumericKeyed<IGraphNode>)\n  }\n\n  private assignNodes () {\n    let next: number = 0\n    this.nodes = this.includes.reduce((a: Dictionary<number>, current: IInclude) => {\n      if (!a.containsKey(current.parent)) {\n        a.add(current.parent, next++)\n      }\n      current.children.forEach((c: string) => {\n        if (!a.containsKey(c)) {\n          a.add(c, next++)\n        }\n      })\n      return a\n    }, new Dictionary<number>())\n  }\n\n  private scanIncludes (file: string): Promise<string[]> {\n    return new Promise<string[]>((accept, reject) => {\n      const includes: string[] = []\n      const pass: fs.ReadStream = fs.createReadStream(path.join(this.root, file))\n      const saxStream: SAXStream = require('sax').createStream(true, {})\n      saxStream.on('opentag', (node) => {\n        const saxNode: ISaxNode = node\n        switch (saxNode.name) {\n          case 'xs:include': {\n            includes.push(saxNode.attributes.schemaLocation)\n            break\n          }\n        }\n      })\n      saxStream.on('ready', () => {\n        accept(includes)\n      })\n      saxStream.on('error', (r) => {\n        reject(r)\n      })\n      pass.pipe(saxStream)\n    })\n  }\n\n  private getIncludes (main: string): Promise<IInclude[]> {\n    const q: any[] = []\n    q.push([main])\n    const ordered: IInclude[] = []\n    const seen: Dictionary<boolean> = new Dictionary<boolean>()\n    return new Promise<IInclude[]>(async (accept, reject) => {\n      try {\n        while (q.length > 0) {\n          const batch: string[] = q.pop()\n          for (let next of batch) {\n            if (seen.containsKey(next)) {\n              continue\n            }\n            seen.add(next, true)\n            const includes: string[] = await this.scanIncludes(next)\n            ordered.push({\n              parent: next,\n              children: includes\n            } as IInclude)\n            q.push(includes)\n          }\n        }\n        accept(ordered)\n      } catch (e) {\n        reject(e)\n      }\n    })\n  }\n}\n"]}