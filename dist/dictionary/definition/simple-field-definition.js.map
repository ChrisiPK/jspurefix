{"version":3,"file":"simple-field-definition.js","sourceRoot":"","sources":["../../../src/dictionary/definition/simple-field-definition.ts"],"names":[],"mappings":"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","sourcesContent":["import { Dictionary } from '../../collections'\nimport { FieldEnum } from '../field-enum'\nimport { Tags } from '../../buffer/tag/tags'\nimport { AsciiChars } from '../../buffer/ascii/ascii-chars'\nimport * as _ from 'lodash'\nimport { TagType } from '../../buffer/tag/tag-type'\n\nexport class SimpleFieldDefinition {\n  public readonly tag: number\n  public readonly tagType: TagType\n  public enums: Dictionary<FieldEnum>\n  public enumVals: Dictionary<boolean>\n\n  constructor (public readonly num: string,\n                public readonly name: string,\n                public readonly abbreviation: string,\n                public readonly baseCategory: string,\n                public readonly baseCategoryAbbreviation: string,\n                public readonly type: string,\n                public readonly description: string) {\n    this.tag = parseInt(num, 10)\n    this.tagType = Tags.toType(type)\n  }\n\n  public isEnum (): boolean {\n    return this.enums != null\n  }\n\n  public containsEnum (key: string): boolean {\n    const enums = this.enums\n    if (!enums) {\n      return false\n    }\n    return enums.get(key) != null\n  }\n\n  public resolveEnum (key: string): string {\n    const enums = this.enums\n    if (!enums) {\n      return key\n    }\n    const e: FieldEnum = enums.get(key)\n    if (e) {\n      return e.val\n    }\n    return key\n  }\n\n  public patchEnumValue (v: string): string {\n    let converted = _.upperFirst(_.camelCase(v))\n    const charAtPos = converted.charCodeAt(0)\n    const zero: number = AsciiChars.Zero\n    const nine: number = AsciiChars.Nine\n    const atDigit: boolean = charAtPos >= zero && charAtPos <= nine\n    if (atDigit) {\n      converted = `E${converted}`\n    }\n    if (this.enumVals.containsKey(converted)) {\n      converted = `${converted}2`\n    }\n    return converted\n  }\n\n  public addEnum (key: string, val: string, description?: string): void {\n    let enums = this.enums\n    let enumVals = this.enumVals\n    if (enums == null) {\n      this.enums = enums = new Dictionary<FieldEnum>()\n      this.enumVals = enumVals = new Dictionary<boolean>()\n    }\n    val = this.patchEnumValue(val)\n    enums.add(key, new FieldEnum(key, val, description))\n    enumVals.add(val, true)\n  }\n\n  public toString (): string {\n    let abbreviation: string = ''\n    if (this.abbreviation && this.name !== this.abbreviation) {\n      abbreviation = `(${this.abbreviation})`\n    }\n    let baseCategoryAbbreviation: string = ''\n    if (this.baseCategoryAbbreviation && this.baseCategoryAbbreviation !== this.name) {\n      baseCategoryAbbreviation = this.baseCategoryAbbreviation\n    }\n    if (baseCategoryAbbreviation.length > 0 && this.baseCategory) {\n      baseCategoryAbbreviation = `${this.baseCategory} ${baseCategoryAbbreviation}`\n    }\n    return `${this.num} ${this.name} ${abbreviation} ${baseCategoryAbbreviation} ${this.type} ${this.description || ''} ${this.enums ? `enumerated = [ ${this.enums.toString()} ]` : ''}`\n  }\n}\n"]}