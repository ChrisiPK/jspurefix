{"version":3,"file":"winston-logger.js","sourceRoot":"","sources":["../../src/config/winston-logger.ts"],"names":[],"mappings":";;;AAEA,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,SAAS,CAAC,CAAA;AAC/D,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA;AAE7C,MAAa,aAAa;IASxB,YAA6B,UAAe,aAAa,CAAC,cAAc,EAAE;QAA7C,YAAO,GAAP,OAAO,CAAsC;QACxE,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,CAAA;IACxC,CAAC;IAEM,MAAM,CAAC,cAAc,CAAE,QAAgB,OAAO;QACnD,OAAO;YACL,MAAM,EAAE,OAAO,CACb,SAAS,EAAE,EACX,aAAa,CAAC,SAAS,CACxB;YACD,KAAK,EAAE,KAAK;YACZ,UAAU,EAAE;gBACV,IAAI,UAAU,CAAC,OAAO,EAAE;aACzB;SACF,CAAA;IACH,CAAC;IAEM,MAAM,CAAC,WAAW,CAAE,QAAgB,EAAE,QAAgB,OAAO,EAAE,UAAkB,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,SAAc,OAAO,CAC7H,SAAS,EAAE,EACX,aAAa,CAAC,SAAS,CACxB;QACC,OAAO;YACL,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,KAAK;YACZ,UAAU,EAAE;gBACV,IAAI,UAAU,CAAC,IAAI,CAAC;oBAClB,QAAQ,EAAE,QAAQ;oBAClB,OAAO,EAAE,OAAO;iBACjB,CAAC;aACH;SACF,CAAA;IACH,CAAC;IAEM,KAAK,CAAE,QAAgB,EAAE,UAAkB,EAAE,GAAG,IAAI,GAAG,IAAI;QAChE,MAAM,SAAS,GAAW,YAAY,CAAC;YACrC,MAAM,EAAE,aAAa,CAAC,WAAW;YACjC,KAAK,EAAE,MAAM;YACb,UAAU,EAAE;gBACV,IAAI,UAAU,CAAC,IAAI,CAAC;oBAClB,QAAQ,EAAE,QAAQ;oBAClB,OAAO,EAAE,OAAO;iBACjB,CAAC;aACH;SACF,CAAC,CAAA;QAEF,OAAO;YACL,GAAG,EAAE,UAAU,GAAW;gBACxB,SAAS,CAAC,IAAI,CAAC;oBACb,IAAI,EAAE,MAAM;oBACZ,OAAO,EAAE,GAAG;iBACb,CAAC,CAAA;YACJ,CAAC;YAED,IAAI,EAAE,UAAU,GAAW;gBACzB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;YACf,CAAC;YACD,KAAK,EAAE,UAAU,GAAW;gBAC1B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;YACf,CAAC;YACD,OAAO,EAAE,UAAU,GAAW;gBAC5B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;YACf,CAAC;YACD,KAAK,EAAE;YAEP,CAAC;SACc,CAAA;IACnB,CAAC;IAEM,IAAI,CAAE,IAAY;QACvB,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAA;QAC7B,OAAO;YACL,IAAI,EAAE,UAAU,GAAW;gBACzB,MAAM,CAAC,IAAI,CAAC;oBACV,IAAI,EAAE,IAAI;oBACV,OAAO,EAAE,GAAG;iBACb,CAAC,CAAA;YACJ,CAAC;YACD,KAAK,EAAE,UAAU,GAAW;gBAC1B,MAAM,CAAC,KAAK,CAAC;oBACX,IAAI,EAAE,IAAI;oBACV,OAAO,EAAE,GAAG;iBACb,CAAC,CAAA;YACJ,CAAC;YACD,OAAO,EAAE,UAAU,GAAW;gBAC5B,MAAM,CAAC,IAAI,CAAC;oBACV,IAAI,EAAE,IAAI;oBACV,OAAO,EAAE,GAAG;iBACb,CAAC,CAAA;YACJ,CAAC;YACD,KAAK,EAAE,UAAU,CAAQ;gBACvB,MAAM,CAAC,KAAK,CAAC;oBACX,IAAI,EAAE,IAAI;oBACV,OAAO,EAAE,GAAG,CAAC,CAAC,OAAO,MAAM,CAAC,CAAC,KAAK,EAAE;iBACrC,CAAC,CAAA;YACJ,CAAC;SACc,CAAA;IACnB,CAAC;;AAzGH,sCA0GC;AAzGwB,uBAAS,GAAG,MAAM,CAAC,CAAC,IAAS,EAAE,EAAE;IACtD,OAAO,GAAG,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,OAAO,EAAE,CAAA;AAC1E,CAAC,CAAC,CAAA;AACqB,yBAAW,GAAG,MAAM,CAAC,CAAC,IAAS,EAAE,EAAE;IACxD,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,CAAA;AAC1B,CAAC,CAAC,CAAA","sourcesContent":["import { IJsFixLogger } from './js-fix-logger'\nimport { Logger } from 'winston'\nconst { createLogger, format, transports } = require('winston')\nconst { combine, timestamp, printf } = format\n\nexport class WinstonLogger {\n  public static readonly appFormat = printf((info: any) => {\n    return `${info.timestamp} [${info.type}] ${info.level}: ${info.message}`\n  })\n  public static readonly plainFormat = printf((info: any) => {\n    return `${info.message}`\n  })\n  private readonly appLogger: Logger\n\n  constructor (public readonly options: any = WinstonLogger.consoleOptions()) {\n    this.appLogger = createLogger(options)\n  }\n\n  public static consoleOptions (level: string = 'debug'): any {\n    return {\n      format: combine(\n        timestamp(),\n        WinstonLogger.appFormat\n      ),\n      level: level,\n      transports: [\n        new transports.Console()\n      ]\n    }\n  }\n\n  public static fileOptions (fileName: string, level: string = 'debug', maxSize: number = 50 * 1024 * 1024, format: any = combine(\n    timestamp(),\n    WinstonLogger.appFormat\n  )): any {\n    return {\n      format: format,\n      level: level,\n      transports: [\n        new transports.File({\n          filename: fileName,\n          maxsize: maxSize\n        })\n      ]\n    }\n  }\n\n  public plain (fileName: string, maxSize: number = 10 * 1024 * 1024): IJsFixLogger {\n    const txtLogger: Logger = createLogger({\n      format: WinstonLogger.plainFormat,\n      level: 'info',\n      transports: [\n        new transports.File({\n          filename: fileName,\n          maxsize: maxSize\n        })\n      ]\n    })\n\n    return {\n      log: function (txt: string) {\n        txtLogger.info({\n          type: 'info',\n          message: txt\n        })\n      },\n\n      info: function (msg: string): void {\n        this.log(msg)\n      },\n      debug: function (msg: string): void {\n        this.log(msg)\n      },\n      warning: function (msg: string): void {\n        this.log(msg)\n      },\n      error: function (): void {\n        // nothing\n      }\n    } as IJsFixLogger\n  }\n\n  public make (type: string): IJsFixLogger {\n    const logger = this.appLogger\n    return {\n      info: function (msg: string): void {\n        logger.info({\n          type: type,\n          message: msg\n        })\n      },\n      debug: function (msg: string): void {\n        logger.debug({\n          type: type,\n          message: msg\n        })\n      },\n      warning: function (msg: string): void {\n        logger.warn({\n          type: type,\n          message: msg\n        })\n      },\n      error: function (e: Error): void {\n        logger.error({\n          type: type,\n          message: `${e.message} : ${e.stack}`\n        })\n      }\n    } as IJsFixLogger\n  }\n}\n"]}