{"version":3,"file":"definition-factory.js","sourceRoot":"","sources":["../../src/util/definition-factory.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,sCAA2D;AAC3D,6BAA4B;AAC5B,yBAAwB;AACxB,iDAA+F;AAG/F,MAAM,IAAI,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;AAEnD,MAAa,iBAAiB;IAE5B,WAAW,CAAE,CAAS;QACpB,MAAM,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,sBAAsB,CAAC,CAAC,CAAA;QACnE,OAAO,UAAU,CAAC,CAAC,CAAC,CAAA;IACtB,CAAC;IAEK,cAAc,CAAE,IAAY,EAAE,YAA4B,wBAAe;;YAC7E,MAAM,EAAE,GAAoB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;YAClD,IAAI,EAAE,EAAE;gBACN,IAAI,GAAG,EAAE,CAAC,IAAI,CAAA;aACf;YACD,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACtB,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;YAC9C,OAAO,MAAM,CAAC,KAAK,EAAE,CAAA;QACvB,CAAC;KAAA;IAED,SAAS,CAAE,IAAY,EAAE,SAAyB;QAChD,IAAI,MAAiB,CAAA;QACrB,IAAI,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAClE,MAAM,GAAG,IAAI,qBAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;SAC3C;aAAM,IAAI,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE;YAC3C,MAAM,GAAG,IAAI,4BAAmB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;SAClD;aAAM;YACL,MAAM,GAAG,IAAI,8BAAqB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;SACpD;QACD,OAAO,MAAM,CAAA;IACf,CAAC;IAED,IAAI,CAAE,CAAS;QACb,IAAI,CAAC,GAAW,CAAC,CAAA;QACjB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;YACvB,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAA;SACvB;QACD,OAAO,CAAC,CAAA;IACV,CAAC;CACF;AApCD,8CAoCC","sourcesContent":["import { FixParser } from '../dictionary'\nimport { FixDefinitions } from '../dictionary/definition'\nimport { GetJsFixLogger, makeEmptyLogger } from '../config'\nimport * as path from 'path'\nimport * as fs from 'fs'\nimport { FixXsdParser, QuickFixXmlFileParser, RepositoryXmlParser } from '../dictionary/parser'\nimport { IDictionaryPath } from './dictionary-path'\n\nconst root: string = path.join(__dirname, '../../')\n\nexport class DefinitionFactory {\n\n  getDictPath (p: string): IDictionaryPath {\n    const dictionary = require(path.join(root, 'data/dictionary.json'))\n    return dictionary[p]\n  }\n\n  async getDefinitions (path: string, getLogger: GetJsFixLogger = makeEmptyLogger): Promise<FixDefinitions> {\n    const dp: IDictionaryPath = this.getDictPath(path)\n    if (dp) {\n      path = dp.dict\n    }\n    path = this.norm(path)\n    const parser = this.getParser(path, getLogger)\n    return parser.parse()\n  }\n\n  getParser (path: string, getLogger: GetJsFixLogger): FixParser {\n    let parser: FixParser\n    if (fs.lstatSync(path).isDirectory() && path.indexOf('fixml') >= 0) {\n      parser = new FixXsdParser(path, getLogger)\n    } else if (fs.lstatSync(path).isDirectory()) {\n      parser = new RepositoryXmlParser(path, getLogger)\n    } else {\n      parser = new QuickFixXmlFileParser(path, getLogger)\n    }\n    return parser\n  }\n\n  norm (p: string): string {\n    let f: string = p\n    if (!path.isAbsolute(p)) {\n      f = path.join(root, f)\n    }\n    return f\n  }\n}\n"]}