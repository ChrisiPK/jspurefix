{"version":3,"file":"fix-msg-memory-store.js","sourceRoot":"","sources":["../../src/store/fix-msg-memory-store.ts"],"names":[],"mappings":"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","sourcesContent":["import { IFixMsgStore } from './fix-msg-store'\nimport { IJsFixConfig, IJsFixLogger } from '../config'\nimport { IFixMsgStoreRecord } from './fix-msg-store-record'\nimport { Dictionary } from '../collections'\nimport { MsgType } from '../types'\nimport { IFixMsgStoreState } from './fix-msg-store-state'\n\nexport class FixMsgMemoryStore implements IFixMsgStore {\n  protected readonly logger: IJsFixLogger\n  public heartbeat: boolean = true\n  private sortedBySeqNum: IFixMsgStoreRecord[] = []\n  private excluded: Dictionary<boolean> = new Dictionary<boolean>()\n  public length: number = 0\n  private sessionMessages: string[] = [\n    MsgType.Logon,\n    MsgType.Logout,\n    MsgType.ResendRequest,\n    MsgType.Heartbeat,\n    MsgType.TestRequest,\n    MsgType.SequenceReset\n  ]\n\n  public constructor (public readonly id: string, public readonly config: IJsFixConfig) {\n    this.logger = config.logFactory.logger(`${this.id}:FixMsgMemoryStore`)\n    this.setExcMsgType([])\n  }\n\n  public static search (ar: IFixMsgStoreRecord[], target?: number, isDate?: boolean): number {\n    let m: number = 0\n    let n: number = ar.length - 1\n    while (m <= n) {\n      const k: number = (n + m) >> 1\n      const check: number = isDate ? ar[k].timestamp.getDate() : ar[k].seqNum\n      const cmp: number = target - check\n      if (cmp > 0) {\n        m = k + 1\n      } else if (cmp < 0) {\n        n = k - 1\n      } else {\n        return k\n      }\n    }\n    return -m - 1\n  }\n\n  public getMsgType (msgType: string): Promise<IFixMsgStoreRecord[]> {\n    return new Promise((resolve, reject: any) => {\n      const data = this.sortedBySeqNum\n      if (data === null) reject(new Error('no store'))\n      const required = data.filter(x => x.msgType === msgType)\n      resolve(required)\n    })\n  }\n\n  private getIndex (seq: number): number {\n    const arr = this.sortedBySeqNum\n    let index = FixMsgMemoryStore.search(arr, seq)\n    if (index < 0) {\n      index = -(index + 1)\n    }\n    return index\n  }\n\n  private bounded (fromIdx: number, toIdx: number) {\n    const arr = this.sortedBySeqNum\n    return fromIdx >= 0 && fromIdx <= arr.length && toIdx >= fromIdx && toIdx <= arr.length\n  }\n\n  public get (from: number): Promise<IFixMsgStoreRecord> {\n    return new Promise((resolve, reject) => {\n      this.getSeqNumRange(from, from).then(res => {\n        if (res.length > 0) {\n          const record = res[0].clone()\n          resolve(record)\n        } else {\n          reject(new Error(`${from} not in store`))\n        }\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  public getSeqNumRange (from: number, to?: number): Promise<IFixMsgStoreRecord[]> {\n    return new Promise((resolve, reject) => {\n      const arr = this.sortedBySeqNum\n      if (from < 0) reject(new Error(`illegal from ${from}`))\n      if (to < 0) reject(new Error(`illegal to ${to}`))\n      let fromIdx = this.getIndex(from)\n      const toEnd = to === 0 || isNaN(to)\n      let toIdx = toEnd ? arr.length - 1 : this.getIndex(to)\n      if (this.bounded(fromIdx, toIdx)) {\n        resolve(arr.slice(fromIdx, toIdx + 1))\n      } else {\n        reject(new Error(`incorrect bounds from=${from}, fromIdx=${fromIdx}, to=${to}, toIdx=${toIdx}, length=${arr.length}`))\n      }\n    })\n  }\n\n  private buildState (): IFixMsgStoreState {\n    const arr = this.sortedBySeqNum\n    return {\n      firstSeq: arr.length > 0 ? arr[0].seqNum : 0,\n      lastSeq: arr.length > 0 ? arr[arr.length - 1].seqNum : 0,\n      id: this.id,\n      length: arr.length\n    } as IFixMsgStoreState\n  }\n\n  public getState (): Promise<IFixMsgStoreState> {\n    return new Promise((resolve, reject) => {\n      try {\n        resolve(this.buildState())\n      } catch (e) {\n        reject(e)\n      }\n    })\n  }\n\n  public clear (): Promise<IFixMsgStoreState> {\n    this.sortedBySeqNum = []\n    return new Promise((resolve, reject) => {\n      try {\n        resolve(this.buildState())\n      } catch (e) {\n        reject(e)\n      }\n    })\n  }\n\n  public put (record: IFixMsgStoreRecord): Promise<IFixMsgStoreState> {\n    return new Promise((resolve, reject) => {\n      if (this.excluded.containsKey(record.msgType)) {\n        resolve(this.buildState())\n      } else {\n        const arr = this.sortedBySeqNum\n        const idx = FixMsgMemoryStore.search(arr, record.seqNum)\n        if (idx >= 0) { // seen this before\n          reject(new Error(`this seqNum ${record.seqNum} already in store`))\n        }\n        arr.splice(-idx, 0, record)\n        this.length = arr.length\n        resolve(this.buildState())\n      }\n    })\n  }\n\n  public setExcMsgType (exclude: string[]): void {\n    this.excluded.clear()\n    this.excludeRange(this.sessionMessages)\n    this.excludeRange(exclude)\n  }\n\n  private excludeRange (exclude: string[]): void {\n    exclude.forEach(s => {\n      this.excluded.add(s, true)\n    })\n  }\n\n  exists (seqNum: number): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      try {\n        const arr = this.sortedBySeqNum\n        let index = FixMsgMemoryStore.search(arr, seqNum)\n        resolve(index >= 0)\n      } catch (e) {\n        reject(e)\n      }\n    })\n  }\n}\n"]}