{"version":3,"file":"skeleton-session.js","sourceRoot":"","sources":["../../../../src/sample/tcp/skeleton/skeleton-session.ts"],"names":[],"mappings":"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","sourcesContent":["import { MsgView } from '../../../buffer'\nimport { AsciiSession } from '../../../transport'\nimport { IJsFixLogger, IJsFixConfig } from '../../../config'\nimport { ILooseObject } from '../../../collections/collection'\nimport { FixMsgStoreRecord } from '../../../store'\nimport { inject, injectable } from 'tsyringe'\nimport { DITokens } from '../../../runtime'\n\n@injectable()\nexport class SkeletonSession extends AsciiSession {\n  private readonly logger: IJsFixLogger\n  private readonly fixLog: IJsFixLogger\n\n  constructor (@inject(DITokens.IJsFixConfig) public readonly config: IJsFixConfig,\n               @inject('logoutSeconds') public readonly logoutSeconds: number,\n               @inject('useInMemoryStore') public useInMemoryStore: boolean) {\n    super(config)\n    this.logReceivedMsgs = true\n    this.fixLog = config.logFactory.plain(`jsfix.${config.description.application.name}.txt`)\n    this.logger = config.logFactory.logger(`${this.me}`)\n  }\n\n  protected onApplicationMsg (msgType: string, view: MsgView): void {\n    // dispatch messages\n    if (this.useInMemoryStore) {\n      const rec = FixMsgStoreRecord.toMsgStoreRecord(view)\n      this.store.put(rec).then(r => {\n        this.logger.info(`store state ${JSON.stringify(r, null, 4)}`)\n        this.dispatch(msgType, view)\n      }).catch(e => {\n        this.logger.error(e)\n      })\n    } else {\n      this.dispatch(msgType, view)\n    }\n  }\n\n  private dispatch (msgType: string, view: MsgView) {\n    const o = view.toObject()\n    switch (msgType) {\n      default: {\n        this.logger.info(`received message type ${msgType} ${JSON.stringify(o, null, 4)}`)\n        break\n      }\n    }\n  }\n\n  public sendMessage (msgType: string, obj: ILooseObject): void {\n    this.send(msgType, obj)\n  }\n\n  // use msgType for example to persist only trade capture messages to database\n  protected onDecoded (msgType: string, txt: string): void {\n    this.fixLog.info(txt)\n  }\n\n  // delimiter substitution now done in encoding\n  protected onEncoded (msgType: string, txt: string): void {\n    this.fixLog.info(txt)\n  }\n\n  protected onLogon (view: MsgView, user: string, password: string): boolean {\n    this.logger.info(`peer logs in user ${user}`)\n    return true\n  }\n\n  protected onReady (view: MsgView): void {\n    this.logger.info('onReady')\n    const logoutSeconds = this.logoutSeconds\n    const t = this.config.description.application.type\n    switch (t) {\n      case 'initiator': {\n        this.logger.info(`will logout after ${logoutSeconds}`)\n        setTimeout(() => {\n          this.done()\n        }, logoutSeconds * 1000)\n        break\n      }\n\n      case 'acceptor': {\n        this.logger.info(`acceptor is ready for requests`)\n        break\n      }\n\n      default: {\n        this.logger.warning(`unknown type ${t}`)\n        break\n      }\n    }\n  }\n\n  protected onStopped (): void {\n    this.logger.info('stopped')\n  }\n}\n"]}