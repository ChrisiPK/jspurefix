{"version":3,"file":"md-client.js","sourceRoot":"","sources":["../../../../src/sample/tcp/qf-md/md-client.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,kDAAiD;AACjD,0CAAwC;AAGxC,6CAAwC;AACxC,uCAA6C;AAC7C,8CAA2C;AAGpC,IAAM,QAAQ,GAAd,MAAM,QAAS,SAAQ,wBAAY;IAIxC,YAA4D,MAAoB;QAC9E,KAAK,CAAC,MAAM,CAAC,CAAA;QAD6C,WAAM,GAAN,MAAM,CAAc;QAE9E,IAAI,CAAC,eAAe,GAAG,IAAI,CAAA;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,MAAO,CAAC,WAAY,CAAC,WAAY,CAAC,IAAI,MAAM,CAAC,CAAA;QAC5F,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,EAAE,WAAW,CAAC,CAAA;IAC/D,CAAC;IAES,gBAAgB,CAAE,OAAe,EAAE,IAAa;QACxD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;IACtC,CAAC;IAES,SAAS;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IAC7B,CAAC;IAGS,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAGS,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAES,OAAO,CAAE,IAAa;QAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QACzB,MAAM,aAAa,GAAG,EAAE,CAAA;QACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,aAAa,EAAE,CAAC,CAAA;QACtD,MAAM,GAAG,GAAG,sBAAS,CAAC,eAAe,CAAC,SAAS,CAAC,CAAA;QAChD,IAAI,CAAC,IAAI,CAAC,eAAO,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAA;QACzC,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,IAAI,EAAE,CAAA;QACb,CAAC,EAAE,aAAa,GAAG,IAAI,CAAC,CAAA;IAC1B,CAAC;IAES,OAAO,CAAE,IAAa,EAAE,IAAY,EAAE,QAAgB;QAC9D,OAAO,IAAI,CAAA;IACb,CAAC;CACF,CAAA;AA3CY,QAAQ;IADpB,IAAA,qBAAU,GAAE;IAKG,WAAA,IAAA,iBAAM,EAAC,kBAAQ,CAAC,YAAY,CAAC,CAAA;;GAJhC,QAAQ,CA2CpB;AA3CY,4BAAQ","sourcesContent":["import { MsgView } from '../../../buffer'\nimport { AsciiSession } from '../../../transport'\nimport { MsgType } from '../../../types'\nimport { IJsFixLogger, IJsFixConfig } from '../../../config'\n\nimport { MDFactory } from './md-factory'\nimport { inject, injectable } from 'tsyringe'\nimport { DITokens } from '../../../runtime'\n\n@injectable()\nexport class MDClient extends AsciiSession {\n  private readonly logger: IJsFixLogger\n  private readonly fixLog: IJsFixLogger\n\n  constructor (@inject(DITokens.IJsFixConfig) public readonly config: IJsFixConfig) {\n    super(config)\n    this.logReceivedMsgs = true\n    this.fixLog = config.logFactory.plain(`jsfix.${config!.description!.application!.name}.txt`)\n    this.logger = config.logFactory.logger(`${this.me}:MDClient`)\n  }\n\n  protected onApplicationMsg (msgType: string, view: MsgView): void {\n    this.logger.info(`${view.toJson()}`)\n  }\n\n  protected onStopped (): void {\n    this.logger.info('stopped')\n  }\n\n  // use msgType for example to persist only trade capture messages to database\n  protected onDecoded (msgType: string, txt: string): void {\n    this.fixLog.info(txt)\n  }\n\n  // delimiter substitution now done in encoding\n  protected onEncoded (msgType: string, txt: string): void {\n    this.fixLog.info(txt)\n  }\n\n  protected onReady (view: MsgView): void {\n    this.logger.info('ready')\n    const logoutSeconds = 32\n    this.logger.info(`will logout after ${logoutSeconds}`)\n    const mdr = MDFactory.BidOfferRequest('EUR/USD')\n    this.send(MsgType.MarketDataRequest, mdr)\n    setTimeout(() => {\n      this.done()\n    }, logoutSeconds * 1000)\n  }\n\n  protected onLogon (view: MsgView, user: string, password: string): boolean {\n    return true\n  }\n}\n"]}