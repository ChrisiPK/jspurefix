{"version":3,"file":"md-server.js","sourceRoot":"","sources":["../../../../src/sample/tcp/qf-md/md-server.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,kDAAiD;AACjD,0CAAwC;AAGxC,uCAA6C;AAKtC,IAAM,QAAQ,GAAd,MAAM,QAAS,SAAQ,wBAAY;IAKxC,YAAqD,MAAoB;QACvE,KAAK,CAAC,MAAM,CAAC,CAAA;QADsC,WAAM,GAAN,MAAM,CAAc;QAFjE,gBAAW,GAAiB,IAAI,CAAA;QAItC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAA;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,EAAE,WAAW,CAAC,CAAA;QAC7D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,MAAO,CAAC,WAAY,CAAC,WAAY,CAAC,IAAI,MAAM,CAAC,CAAA;IAC9F,CAAC;IAES,gBAAgB,CAAE,OAAe,EAAE,IAAa;QACxD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;QACpC,QAAQ,OAAO,EAAE;YACf,KAAK,eAAO,CAAC,iBAAiB,CAAC,CAAC;gBAC9B,MAAM,GAAG,GAAuB,IAAI,CAAC,QAAQ,EAAE,CAAA;gBAC/C,MAAK;aACN;SACF;IACH,CAAC;IAES,OAAO,CAAE,IAAa;QAE9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAA;IACzC,CAAC;IAES,SAAS;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QAC3B,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;SAChC;IACH,CAAC;IAES,OAAO,CAAE,IAAa,EAAE,IAAY,EAAE,QAAgB;QAC9D,OAAO,IAAI,CAAA;IACb,CAAC;IAGS,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAGS,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;CACF,CAAA;AA/CY,QAAQ;IADpB,IAAA,qBAAU,GAAE;IAMG,WAAA,IAAA,iBAAM,EAAC,cAAc,CAAC,CAAA;;GALzB,QAAQ,CA+CpB;AA/CY,4BAAQ","sourcesContent":["import { MsgView } from '../../../buffer'\nimport { AsciiSession } from '../../../transport'\nimport { MsgType } from '../../../types'\nimport { IJsFixLogger, IJsFixConfig } from '../../../config'\nimport { IMarketDataRequest } from '../../../types/FIX4.4/quickfix'\nimport { inject, injectable } from 'tsyringe'\n\n// interfaces generated by compiler to make messages easy in an IDE\n\n@injectable()\nexport class MDServer extends AsciiSession {\n  private readonly logger: IJsFixLogger\n  private readonly fixLog: IJsFixLogger\n  private timerHandle: NodeJS.Timer = null\n\n  constructor (@inject('IJsFixConfig') public readonly config: IJsFixConfig) {\n    super(config)\n    this.logReceivedMsgs = true\n    this.logger = config.logFactory.logger(`${this.me}:MDServer`)\n    this.fixLog = config.logFactory.plain(`jsfix.${config!.description!.application!.name}.txt`)\n  }\n\n  protected onApplicationMsg (msgType: string, view: MsgView): void {\n    this.logger.info(`${view.toJson()}`)\n    switch (msgType) {\n      case MsgType.MarketDataRequest: {\n        const req: IMarketDataRequest = view.toObject()\n        break\n      }\n    }\n  }\n\n  protected onReady (view: MsgView): void {\n    // server waits for client to make a request\n    this.logger.info('ready for requests.')\n  }\n\n  protected onStopped (): void {\n    this.logger.info('stopped')\n    if (this.timerHandle) {\n      clearInterval(this.timerHandle)\n    }\n  }\n\n  protected onLogon (view: MsgView, user: string, password: string): boolean {\n    return true\n  }\n\n  // use msgType for example to persist only trade capture messages to database\n  protected onDecoded (msgType: string, txt: string): void {\n    this.fixLog.info(txt)\n  }\n\n  // delimiter substitution now done in encoding\n  protected onEncoded (msgType: string, txt: string): void {\n    this.fixLog.info(txt)\n  }\n}\n"]}