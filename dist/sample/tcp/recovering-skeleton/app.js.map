{"version":3,"file":"app.js","sourceRoot":"","sources":["../../../../src/sample/tcp/recovering-skeleton/app.ts"],"names":[],"mappings":";;AAAA,4BAAyB;AAGzB,8CAA4D;AAC5D,uDAAkD;AAClD,gDAA+D;AAC/D,yDAAoD;AACpD,iDAAkD;AAElD,uDAAkD;AAGlD,MAAM,WAAY,SAAQ,yBAAe;IAEvC;QACE,KAAK,CACH,kCAAkC,EAClC,iCAAiC,CAAC,CAAA;IACtC,CAAC;IAEkB,mBAAmB,CAAE,gBAAqC;QAC3E,MAAM,MAAM,GAAiB,gBAAgB,CAAC,OAAO,CAAe,kBAAQ,CAAC,YAAY,CAAC,CAAA;QAE1F,MAAM,CAAC,YAAY,GAAG,kBAAU,CAAC,KAAK,CAAA;QAEtC,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;QACxD,IAAI,WAAW,EAAE;YACf,gBAAgB,CAAC,QAAQ,CAAa,kBAAQ,CAAC,UAAU,EAAE;gBACzD,QAAQ,EAAE,gCAAc;aACzB,CAAC,CAAA;YACF,gBAAgB,CAAC,QAAQ,CAAY,kBAAQ,CAAC,SAAS,EAAE;gBACvD,QAAQ,EAAE,4BAAsB;aACjC,CAAC,CAAA;SACH;aAAM;YACL,gBAAgB,CAAC,QAAQ,CAAY,kBAAQ,CAAC,SAAS,EAAE;gBACvD,QAAQ,EAAE,kCAAe;aAC1B,CAAC,CAAA;YACF,gBAAgB,CAAC,QAAQ,CAAa,kBAAQ,CAAC,UAAU,EAAE;gBACzD,QAAQ,EAAE,gCAAc;aACzB,CAAC,CAAA;YACF,gBAAgB,CAAC,QAAQ,CAAC,eAAe,EAAE;gBACzC,QAAQ,EAAE,EAAE;aACb,CAAC,CAAA;SACH;QACD,gBAAgB,CAAC,QAAQ,CAAC,eAAe,EAAE;YACzC,QAAQ,EAAE,EAAE;SACb,CAAC,CAAA;QACF,gBAAgB,CAAC,QAAQ,CAAC,kBAAkB,EAAE;YAC5C,QAAQ,EAAE,KAAK;SAChB,CAAC,CAAA;IACJ,CAAC;CACF;AAED,MAAM,CAAC,GAAG,IAAI,WAAW,EAAE,CAAA;AAC3B,CAAC,CAAC,IAAI,EAAE,CAAA","sourcesContent":["import 'reflect-metadata'\n\nimport { IJsFixConfig } from '../../../config'\nimport { SessionLauncher, DITokens } from '../../../runtime'\nimport { SkeletonClient } from './skeleton-client'\nimport { RecoveringTcpInitiator } from '../../../transport/tcp'\nimport { RespawnAcceptor } from './respawn-acceptor'\nimport { AsciiChars } from '../../../buffer/ascii'\nimport { DependencyContainer } from 'tsyringe'\nimport { SkeletonServer } from './skeleton-server'\nimport { FixSession, FixEntity } from '../../../transport'\n\nclass AppLauncher extends SessionLauncher {\n\n  public constructor () {\n    super(\n      'data/session/test-initiator.json',\n      'data/session/test-acceptor.json')\n  }\n\n  protected override registerApplication (sessionContainer: DependencyContainer) {\n    const config: IJsFixConfig = sessionContainer.resolve<IJsFixConfig>(DITokens.IJsFixConfig)\n    // use a different log delimiter as an example\n    config.logDelimiter = AsciiChars.Carat\n\n    const isInitiator = this.isInitiator(config.description)\n    if (isInitiator) {\n      sessionContainer.register<FixSession>(DITokens.FixSession, {\n        useClass: SkeletonClient\n      })\n      sessionContainer.register<FixEntity>(DITokens.FixEntity, {\n        useClass: RecoveringTcpInitiator\n      })\n    } else {\n      sessionContainer.register<FixEntity>(DITokens.FixEntity, {\n        useClass: RespawnAcceptor\n      })\n      sessionContainer.register<FixSession>(DITokens.FixSession, {\n        useClass: SkeletonServer\n      })\n      sessionContainer.register('logoutSeconds', {\n        useValue: 45\n      })\n    }\n    sessionContainer.register('logoutSeconds', {\n      useValue: 45\n    })\n    sessionContainer.register('useInMemoryStore', {\n      useValue: false\n    })\n  }\n}\n\nconst l = new AppLauncher()\nl.exec()\n"]}