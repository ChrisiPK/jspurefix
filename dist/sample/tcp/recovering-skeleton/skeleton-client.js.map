{"version":3,"file":"skeleton-client.js","sourceRoot":"","sources":["../../../../src/sample/tcp/recovering-skeleton/skeleton-client.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,kDAAiD;AAEjD,uCAA6C;AAGtC,IAAM,cAAc,GAApB,MAAM,cAAe,SAAQ,wBAAY;IAI9C,YAAqD,MAAoB,EACnB,aAAqB;QACzE,KAAK,CAAC,MAAM,CAAC,CAAA;QAFsC,WAAM,GAAN,MAAM,CAAc;QACnB,kBAAa,GAAb,aAAa,CAAQ;QAEzE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAA;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,MAAM,CAAC,CAAA;QACzF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,CAAA;IACtD,CAAC;IAES,gBAAgB,CAAE,OAAe,EAAE,IAAa;QAExD,QAAQ,OAAO,EAAE;YACf,OAAO,CAAC,CAAC;gBACP,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,OAAO,EAAE,CAAC,CAAA;gBACpD,MAAK;aACN;SACF;IACH,CAAC;IAGS,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAGS,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAES,OAAO,CAAE,IAAa,EAAE,IAAY,EAAE,QAAgB;QAC9D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,IAAI,EAAE,CAAC,CAAA;QAC7C,OAAO,IAAI,CAAA;IACb,CAAC;IAES,OAAO,CAAE,IAAa;QAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QAC3B,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAA;QACxC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,aAAa,EAAE,CAAC,CAAA;QACtD,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,IAAI,EAAE,CAAA;QACb,CAAC,EAAE,aAAa,GAAG,IAAI,CAAC,CAAA;IAC1B,CAAC;IAES,SAAS;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IAC7B,CAAC;CACF,CAAA;AAjDY,cAAc;IAD1B,IAAA,qBAAU,GAAE;IAKG,WAAA,IAAA,iBAAM,EAAC,cAAc,CAAC,CAAA;IACtB,WAAA,IAAA,iBAAM,EAAC,eAAe,CAAC,CAAA;;GAL1B,cAAc,CAiD1B;AAjDY,wCAAc","sourcesContent":["import { MsgView } from '../../../buffer'\nimport { AsciiSession } from '../../../transport'\nimport { IJsFixLogger, IJsFixConfig } from '../../../config'\nimport { inject, injectable } from 'tsyringe'\n\n@injectable()\nexport class SkeletonClient extends AsciiSession {\n  private readonly logger: IJsFixLogger\n  private readonly fixLog: IJsFixLogger\n\n  constructor (@inject('IJsFixConfig') public readonly config: IJsFixConfig,\n               @inject('logoutSeconds') public readonly logoutSeconds: number) {\n    super(config)\n    this.logReceivedMsgs = true\n    this.fixLog = config.logFactory.plain(`jsfix.${config.description.application.name}.txt`)\n    this.logger = config.logFactory.logger(`${this.me}`)\n  }\n\n  protected onApplicationMsg (msgType: string, view: MsgView): void {\n    // dispatch messages\n    switch (msgType) {\n      default: {\n        this.logger.info(`received message type ${msgType}`)\n        break\n      }\n    }\n  }\n\n  // use msgType for example to persist only trade capture messages to database\n  protected onDecoded (msgType: string, txt: string): void {\n    this.fixLog.info(txt)\n  }\n\n  // delimiter substitution now done in encoding\n  protected onEncoded (msgType: string, txt: string): void {\n    this.fixLog.info(txt)\n  }\n\n  protected onLogon (view: MsgView, user: string, password: string): boolean {\n    this.logger.info(`peer logs in user ${user}`)\n    return true\n  }\n\n  protected onReady (view: MsgView): void {\n    this.logger.info('onReady')\n    const logoutSeconds = this.logoutSeconds\n    this.logger.info(`will logout after ${logoutSeconds}`)\n    setTimeout(() => {\n      this.done()\n    }, logoutSeconds * 1000)\n  }\n\n  protected onStopped (): void {\n    this.logger.info('stopped')\n  }\n}\n"]}