{"version":3,"file":"trade-factory.js","sourceRoot":"","sources":["../../../../src/sample/tcp/trade-capture/trade-factory.ts"],"names":[],"mappings":";;;AAAA,qDAWmC;AAEnC,0DAAgE;AAEhE,MAAa,YAAY;IAAzB;QACU,gBAAW,GAAW,MAAM,CAAA;QAC5B,eAAU,GAAW,MAAM,CAAA;QAClB,eAAU,GACzB;YACE,MAAM;YACN,QAAQ;YACR,UAAU;YACV,WAAW;YACX,OAAO;SACR,CAAA;IA2EL,CAAC;IAzEQ,MAAM,CAAC,4BAA4B,CAAE,GAA+B,EAAE,MAA0B;QAErG,OAAO;YACL,cAAc,EAAE,GAAG,CAAC,cAAc;YAClC,gBAAgB,EAAE,GAAG,CAAC,gBAAgB;YACtC,kBAAkB,EAAE,MAAM;YAC1B,kBAAkB,EAAE,yBAAkB,CAAC,UAAU;SACjB,CAAA;IACpC,CAAC;IAEM,MAAM,CAAC,yBAAyB,CAAE,SAAiB,EAAE,SAAe;QACzE,MAAM,EAAE,GAAG,SAAS,CAAA;QACpB,MAAM,EAAE,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAA;QACxC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAA;QAC5B,OAAO;YACL,cAAc,EAAE,YAAY;YAC5B,gBAAgB,EAAE,uBAAgB,CAAC,SAAS;YAC5C,uBAAuB,EAAE,8BAAuB,CAAC,kBAAkB;YACnE,WAAW,EAAE;gBACX;oBACE,YAAY,EAAE,EAAE;iBACjB;gBACD;oBACE,YAAY,EAAE,EAAE;iBACjB;aACF;SAC4B,CAAA;IACjC,CAAC;IAEO,MAAM,CAAC,YAAY,CAAE,GAAW,EAAE,GAAW;QACnD,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QACpB,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACrB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAA;IACtD,CAAC;IAEM,yBAAyB,CAAE,MAAe;QAC/C,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,GAAG,YAAY,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;SACzC;QACD,MAAM,GAAG,GAA0B,EAAE,CAAA;QACrC,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;YACvC,MAAM,EAAE,GAAwB,IAAI,CAAC,wBAAwB,EAAE,CAAA;YAC/D,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;SACb;QACD,OAAO,GAAG,CAAA;IACZ,CAAC;IAEM,wBAAwB;QAC7B,MAAM,aAAa,GAAG,IAAI,CAAC,WAAW,EAAE,CAAA;QACxC,MAAM,GAAG,GAAW,YAAY,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;QACvD,MAAM,KAAK,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACjE,MAAM,UAAU,GAAW,YAAY,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;QACnF,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAA;QAClC,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAA;QAChC,OAAO;YACL,aAAa,EAAE,aAAa,CAAC,QAAQ,EAAE;YACvC,oBAAoB,EAAE,iCAAoB,CAAC,GAAG;YAC9C,eAAe,EAAE,sBAAe,CAAC,MAAM;YACvC,OAAO,EAAE,cAAO,CAAC,YAAY;YAC7B,YAAY,EAAE,IAAI,IAAI,EAAE;YACxB,MAAM,EAAE,MAAM,CAAC,QAAQ,EAAE;YACzB,kBAAkB,EAAE,KAAK;YACzB,SAAS,EAAE,gBAAS,CAAC,MAAM;YAC3B,UAAU,EAAE;gBACV,UAAU,EAAE,GAAG,UAAU,CAAC,UAAU,CAAC,MAAM;gBAC3C,MAAM,EAAE,GAAG,UAAU,CAAC,UAAU,CAAC,EAAE;aACpC;YACD,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,KAAK;SAES,CAAA;IAC1B,CAAC;CACF;AArFD,oCAqFC","sourcesContent":["import {\n  OrdStatus,\n  SubscriptionRequestType,\n  TradeReportType,\n  TradeRequestResult,\n  TradeRequestStatus,\n  TradeRequestType,\n  TrdType,\n  ITradeCaptureReportRequestAck,\n  ITradeCaptureReport,\n  ITradeCaptureReportRequest\n} from '../../../types/FIX4.4/repo'\n\nimport { TradeReportTransType } from '../../../types/FIXML50SP2'\n\nexport class TradeFactory {\n  private nextTradeId: number = 100000\n  private nextExecId: number = 600000\n  private readonly securities: string[] =\n    [\n      'Gold',\n      'Silver',\n      'Platinum',\n      'Magnesium',\n      'Steel'\n    ]\n\n  public static tradeCaptureReportRequestAck (tcr: ITradeCaptureReportRequest, status: TradeRequestStatus): ITradeCaptureReportRequestAck {\n    // send back an ack.\n    return {\n      TradeRequestID: tcr.TradeRequestID,\n      TradeRequestType: tcr.TradeRequestType,\n      TradeRequestStatus: status,\n      TradeRequestResult: TradeRequestResult.Successful\n    } as ITradeCaptureReportRequestAck\n  }\n\n  public static tradeCaptureReportRequest (requestId: string, tradeDate: Date): ITradeCaptureReportRequest {\n    const d0 = tradeDate\n    const d1 = new Date(tradeDate.getTime())\n    d1.setDate(d1.getDate() + 1)\n    return {\n      TradeRequestID: 'all-trades',\n      TradeRequestType: TradeRequestType.AllTrades,\n      SubscriptionRequestType: SubscriptionRequestType.SnapshotAndUpdates,\n      TrdCapDtGrp: [\n        {\n          TransactTime: d0\n        },\n        {\n          TransactTime: d1\n        }\n      ]\n    } as ITradeCaptureReportRequest\n  }\n\n  private static getRandomInt (min: number, max: number) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min)) + min\n  }\n\n  public batchOfTradeCaptureReport (toMake?: number): ITradeCaptureReport[] {\n    if (!toMake) {\n      toMake = TradeFactory.getRandomInt(4, 8)\n    }\n    const arr: ITradeCaptureReport[] = []\n    for (let i: number = 0; i < toMake; ++i) {\n      const tc: ITradeCaptureReport = this.singleTradeCaptureReport()\n      arr.push(tc)\n    }\n    return arr\n  }\n\n  public singleTradeCaptureReport (): ITradeCaptureReport {\n    const tradeReportId = this.nextTradeId++\n    const qty: number = TradeFactory.getRandomInt(100, 200)\n    const price: number = Math.round(Math.random() * 100 * 100) / 100\n    const instrument: number = TradeFactory.getRandomInt(0, this.securities.length - 1)\n    const securities = this.securities\n    const execId = this.nextExecId++\n    return {\n      TradeReportID: tradeReportId.toString(),\n      TradeReportTransType: TradeReportTransType.New,\n      TradeReportType: TradeReportType.Submit,\n      TrdType: TrdType.RegularTrade,\n      TransactTime: new Date(),\n      ExecID: execId.toString(),\n      PreviouslyReported: false,\n      OrdStatus: OrdStatus.Filled,\n      Instrument: {\n        SecurityID: `${securities[instrument]}.INC`,\n        Symbol: `${securities[instrument]}`\n      },\n      TradeDate: new Date(),\n      LastQty: qty,\n      LastPx: price\n\n    } as ITradeCaptureReport\n  }\n}\n"]}