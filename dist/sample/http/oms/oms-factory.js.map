{"version":3,"file":"oms-factory.js","sourceRoot":"","sources":["../../../../src/sample/http/oms/oms-factory.ts"],"names":[],"mappings":";;;AAAA,0DAWkC;AAElC,MAAa,UAAU;IAGrB,YAA6B,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;QAFpC,OAAE,GAAW,CAAC,CAAA;QACd,WAAM,GAAW,CAAC,CAAA;IAE1B,CAAC;IAEM,WAAW,CAAE,MAAc,EAAE,IAAU,EAAE,GAAW,EAAE,KAAa;QACxE,MAAM,EAAE,GAAW,IAAI,CAAC,EAAE,EAAE,CAAA;QAC5B,OAAO;YACL,OAAO,EAAE,MAAM,EAAE,EAAE;YACnB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,KAAK;YACZ,OAAO,EAAE,oBAAO,CAAC,KAAK;YACtB,YAAY,EAAE;gBACZ,QAAQ,EAAE,GAAG;aACG;YAClB,UAAU,EAAE;gBACV,MAAM,EAAE,MAAM;gBACd,UAAU,EAAE,WAAW;gBACvB,gBAAgB,EAAE,6BAAgB,CAAC,UAAU;aAC/B;YAChB,WAAW,EAAE,wBAAW,CAAC,iBAAiB;SACxB,CAAA;IACtB,CAAC;IAEM,SAAS,CAAE,KAAsB;QACtC,MAAM,EAAE,GAAW,IAAI,CAAC,MAAM,EAAE,CAAA;QAChC,OAAO;YACL,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,YAAY,EAAE,IAAI,IAAI,EAAE;YACxB,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,SAAS,EAAE,CAAC;YACZ,MAAM,EAAE,KAAK,CAAC,KAAK;YACnB,QAAQ,EAAE,qBAAQ,CAAC,WAAW;YAC9B,SAAS,EAAE,sBAAS,CAAC,MAAM;YAC3B,MAAM,EAAE,OAAO,EAAE,EAAE;YACnB,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,YAAY,EAAE;gBACZ,QAAQ,EAAE,KAAK,CAAC,YAAY,CAAC,QAAQ;aACrB;YAClB,UAAU,EAAE;gBACV,MAAM,EAAE,KAAK,CAAC,UAAU,CAAC,MAAM;gBAC/B,UAAU,EAAE,KAAK,CAAC,UAAU,CAAC,UAAU;gBACvC,gBAAgB,EAAE,6BAAgB,CAAC,UAAU;aAC/B;SACG,CAAA;IACvB,CAAC;CACF;AAlDD,gCAkDC","sourcesContent":["import {\n  INewOrderSingle,\n  ExecType,\n  OrdStatus,\n  OrdType,\n  SecurityIDSource,\n  Side,\n  TimeInForce,\n  IOrderQtyData,\n  IInstrument,\n  IExecutionReport\n} from '../../../types/FIXML50SP2'\n\nexport class OmsFactory {\n  private id: number = 1\n  private execId: number = 1\n  constructor (public readonly account: string) {\n  }\n\n  public createOrder (symbol: string, side: Side, qty: number, price: number): INewOrderSingle {\n    const id: number = this.id++\n    return {\n      ClOrdID: `Cli${id}`,\n      Account: this.account,\n      Side: side,\n      Price: price,\n      OrdType: OrdType.Limit,\n      OrderQtyData: {\n        OrderQty: qty\n      } as IOrderQtyData,\n      Instrument: {\n        Symbol: symbol,\n        SecurityID: '459200101',\n        SecurityIDSource: SecurityIDSource.IsinNumber\n      } as IInstrument,\n      TimeInForce: TimeInForce.GoodTillCancelGtc\n    } as INewOrderSingle\n  }\n\n  public fillOrder (order: INewOrderSingle): IExecutionReport {\n    const id: number = this.execId++\n    return {\n      ClOrdID: order.ClOrdID,\n      OrdType: order.OrdType,\n      TransactTime: new Date(),\n      AvgPx: order.Price,\n      LeavesQty: 0,\n      LastPx: order.Price,\n      ExecType: ExecType.OrderStatus,\n      OrdStatus: OrdStatus.Filled,\n      ExecID: `exec${id}`,\n      Side: order.Side,\n      Price: order.Price,\n      OrderQtyData: {\n        OrderQty: order.OrderQtyData.OrderQty\n      } as IOrderQtyData,\n      Instrument: {\n        Symbol: order.Instrument.Symbol,\n        SecurityID: order.Instrument.SecurityID,\n        SecurityIDSource: SecurityIDSource.IsinNumber\n      } as IInstrument\n    } as IExecutionReport\n  }\n}\n"]}