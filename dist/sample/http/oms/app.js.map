{"version":3,"file":"app.js","sourceRoot":"","sources":["../../../../src/sample/http/oms/app.ts"],"names":[],"mappings":";;AAAA,4BAAyB;AAEzB,+CAA0C;AAC1C,+CAA0C;AAE1C,8CAA2E;AAK3E,MAAM,WAAY,SAAQ,yBAAe;IACvC;QACE,KAAK,CACH,uCAAuC,EACvC,sCAAsC,CAAC,CAAA;IAC3C,CAAC;IAEkB,WAAW,CAAE,MAAoB;QAClD,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;QACxD,OAAO;YACL,WAAW,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,CAAC;gBAC9B,IAAI,wBAAU,CAAC,MAAM,CAAC,CAAC,CAAC;gBACxB,IAAI,wBAAU,CAAC,MAAM,CAAC;SACR,CAAA;IACpB,CAAC;IAEkB,YAAY,CAAE,gBAAqC;QACpE,MAAM,MAAM,GAAiB,gBAAgB,CAAC,OAAO,CAAe,kBAAQ,CAAC,YAAY,CAAC,CAAA;QAC1F,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,OAAO,CAAe,kBAAQ,CAAC,YAAY,CAAC,CAAA;QAC3G,MAAM,SAAS,GAAG,gBAAgB,CAAC,OAAO,CAAY,kBAAQ,CAAC,SAAS,CAAC,CAAA;QACzE,OAAO,SAAS,CAAC,KAAK,EAAE,CAAA;IAC1B,CAAC;CACF;AAED,MAAM,CAAC,GAAG,IAAI,WAAW,EAAE,CAAA;AAC3B,CAAC,CAAC,IAAI,EAAE,CAAA","sourcesContent":["import 'reflect-metadata'\n\nimport { HttpServer } from './http-server'\nimport { HttpClient } from './http-client'\nimport { IJsFixConfig } from '../../../config'\nimport { DITokens, EngineFactory, SessionLauncher } from '../../../runtime'\nimport { DependencyContainer } from 'tsyringe'\nimport { FixEntity } from '../../../transport'\nimport { IHttpAdapter } from '../../../transport/http/http-adapter'\n\nclass AppLauncher extends SessionLauncher {\n  public constructor () {\n    super(\n      'data/session/test-http-initiator.json',\n      'data/session/test-http-acceptor.json')\n  }\n\n  protected override makeFactory (config: IJsFixConfig): EngineFactory {\n    const isInitiator = this.isInitiator(config.description)\n    return {\n      makeSession: () => isInitiator ?\n        new HttpClient(config) :\n        new HttpServer(config)\n    } as EngineFactory\n  }\n\n  protected override getInitiator (sessionContainer: DependencyContainer): Promise<any> {\n    const config: IJsFixConfig = sessionContainer.resolve<IJsFixConfig>(DITokens.IJsFixConfig)\n    config.description.application.http.adapter = sessionContainer.resolve<IHttpAdapter>(DITokens.IHttpAdapter)\n    const initiator = sessionContainer.resolve<FixEntity>(DITokens.FixEntity)\n    return initiator.start()\n  }\n}\n\nconst l = new AppLauncher()\nl.exec()\n"]}