{"version":3,"file":"http-client.js","sourceRoot":"","sources":["../../../../src/sample/http/oms/http-client.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,oDAAuD;AAGvD,+CAA0C;AAC1C,0DAAkE;AAClE,uCAA6C;AAC7C,8CAA2C;AAGpC,IAAM,UAAU,GAAhB,MAAM,UAAW,SAAQ,oBAAY;IAI1C,YAA4D,MAAoB,EAC1B,gBAAwB,EAAE;QAC9E,KAAK,CAAC,MAAM,CAAC,CAAA;QAF6C,WAAM,GAAN,MAAM,CAAc;QAC1B,kBAAa,GAAb,aAAa,CAAa;QAF/D,YAAO,GAAe,IAAI,wBAAU,CAAC,YAAY,CAAC,CAAA;QAIjE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAA;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,MAAM,CAAC,CAAA;QACzF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,CAAA;IACtD,CAAC;IAES,gBAAgB,CAAE,OAAe,EAAE,IAAa;QAExD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;QAC/B,QAAQ,OAAO,EAAE;YACf,KAAK,WAAW,CAAC,CAAC;gBAChB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAA;gBACzC,MAAK;aACN;YAED,KAAK,SAAS,CAAC,CAAC;gBACd,MAAM,IAAI,GAAqB,IAAI,CAAC,QAAQ,EAAE,CAAA;gBAC9C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,6BAA6B,IAAI,CAAC,YAAY,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC,CAAA;gBAC5F,MAAK;aACN;SACF;IACH,CAAC;IAGS,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAES,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAES,OAAO,CAAE,IAAa,EAAE,IAAY,EAAE,QAAgB;QAC9D,OAAO,IAAI,CAAA;IACb,CAAC;IAES,OAAO,CAAE,IAAa;QAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QAC3B,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAA;QACxC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE,iBAAI,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,CAAA;QACpE,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAA;QAChC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,aAAa,EAAE,CAAC,CAAA;QACtD,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,IAAI,EAAE,CAAA;QACb,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAA;IACf,CAAC;IAES,SAAS;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IAC7B,CAAC;CACF,CAAA;AAxDY,UAAU;IADtB,IAAA,qBAAU,GAAE;IAKG,WAAA,IAAA,iBAAM,EAAC,kBAAQ,CAAC,YAAY,CAAC,CAAA;IAC7B,WAAA,IAAA,iBAAM,EAAC,eAAe,CAAC,CAAA;;GAL1B,UAAU,CAwDtB;AAxDY,gCAAU","sourcesContent":["import { FixmlSession } from '../../../transport/fixml'\nimport { MsgView } from '../../../buffer'\nimport { IJsFixLogger, IJsFixConfig } from '../../../config'\nimport { OmsFactory } from './oms-factory'\nimport { IExecutionReport, Side } from '../../../types/FIXML50SP2'\nimport { inject, injectable } from 'tsyringe'\nimport { DITokens } from '../../../runtime'\n\n@injectable()\nexport class HttpClient extends FixmlSession {\n  private readonly logger: IJsFixLogger\n  private readonly fixLog: IJsFixLogger\n  private readonly factory: OmsFactory = new OmsFactory('TradersRUs')\n  constructor (@inject(DITokens.IJsFixConfig) public readonly config: IJsFixConfig,\n               @inject('logoutSeconds') public readonly logoutSeconds: number = 45) {\n    super(config)\n    this.logReceivedMsgs = true\n    this.fixLog = config.logFactory.plain(`jsfix.${config.description.application.name}.txt`)\n    this.logger = config.logFactory.logger(`${this.me}`)\n  }\n\n  protected onApplicationMsg (msgType: string, view: MsgView): void {\n    // dispatch messages\n    this.logger.info(view.toJson())\n    switch (msgType) {\n      case 'BizMsgRej': {\n        this.logger.warning('received rejection')\n        break\n      }\n\n      case 'ExecRpt': {\n        const fill: IExecutionReport = view.toObject()\n        this.logger.warning(`received execution report ${fill.OrderQtyData.OrderQty}@${fill.Price}`)\n        break\n      }\n    }\n  }\n\n  // use msgType for example to persist only trade capture messages to database\n  protected onDecoded (msgType: string, txt: string): void {\n    this.fixLog.info(txt)\n  }\n\n  protected onEncoded (msgType: string, txt: string): void {\n    this.fixLog.info(txt)\n  }\n\n  protected onLogon (view: MsgView, user: string, password: string): boolean {\n    return true\n  }\n\n  protected onReady (view: MsgView): void {\n    this.logger.info('onReady')\n    const logoutSeconds = this.logoutSeconds\n    const req = this.factory.createOrder('IBM', Side.Buy, 10000, 100.12)\n    this.send('NewOrderSingle', req)\n    this.logger.info(`will logout after ${logoutSeconds}`)\n    setTimeout(() => {\n      this.done()\n    }, 11 * 1000)\n  }\n\n  protected onStopped (): void {\n    this.logger.info('stopped')\n  }\n}\n"]}