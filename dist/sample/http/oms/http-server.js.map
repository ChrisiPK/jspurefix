{"version":3,"file":"http-server.js","sourceRoot":"","sources":["../../../../src/sample/http/oms/http-server.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,oDAAuD;AAGvD,+CAA0C;AAC1C,uCAA6C;AAC7C,8CAA2C;AAGpC,IAAM,UAAU,GAAhB,MAAM,UAAW,SAAQ,oBAAY;IAK1C,YAA4D,MAAoB;QAC9E,KAAK,CAAC,MAAM,CAAC,CAAA;QAD6C,WAAM,GAAN,MAAM,CAAc;QAF/D,YAAO,GAAe,IAAI,wBAAU,CAAC,QAAQ,CAAC,CAAA;QAI7D,IAAI,CAAC,eAAe,GAAG,IAAI,CAAA;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,MAAM,CAAC,CAAA;QACzF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,CAAA;IACtD,CAAC;IAES,gBAAgB,CAAE,OAAe,EAAE,IAAa;QAExD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;QAC/B,QAAQ,OAAO,EAAE;YACf,KAAK,OAAO,CAAC,CAAC;gBACZ,MAAM,KAAK,GAAoB,IAAI,CAAC,QAAQ,EAAE,CAAA;gBAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAA;gBACtD,MAAM,IAAI,GAAqB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;gBAC5D,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAA;aACnC;SACF;IACH,CAAC;IAGS,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAES,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAES,OAAO,CAAE,IAAa,EAAE,IAAY,EAAE,QAAgB;QAC9D,OAAO,IAAI,CAAA;IACb,CAAC;IAES,OAAO,CAAE,IAAa;QAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IAC7B,CAAC;IAES,SAAS;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IAC7B,CAAC;CACF,CAAA;AA7CY,UAAU;IADtB,IAAA,qBAAU,GAAE;IAMG,WAAA,IAAA,iBAAM,EAAC,kBAAQ,CAAC,YAAY,CAAC,CAAA;;GALhC,UAAU,CA6CtB;AA7CY,gCAAU","sourcesContent":["import { MsgView } from '../../../buffer'\nimport { FixmlSession } from '../../../transport/fixml'\nimport { IJsFixLogger, IJsFixConfig } from '../../../config'\nimport { INewOrderSingle, IExecutionReport } from '../../../types/FIXML50SP2'\nimport { OmsFactory } from './oms-factory'\nimport { inject, injectable } from 'tsyringe'\nimport { DITokens } from '../../../runtime'\n\n@injectable()\nexport class HttpServer extends FixmlSession {\n  private readonly logger: IJsFixLogger\n  private readonly fixLog: IJsFixLogger\n  private readonly factory: OmsFactory = new OmsFactory('server')\n\n  constructor (@inject(DITokens.IJsFixConfig) public readonly config: IJsFixConfig) {\n    super(config)\n    this.logReceivedMsgs = true\n    this.fixLog = config.logFactory.plain(`jsfix.${config.description.application.name}.txt`)\n    this.logger = config.logFactory.logger(`${this.me}`)\n  }\n\n  protected onApplicationMsg (msgType: string, view: MsgView): void {\n    // dispatch messages\n    this.logger.info(view.toJson())\n    switch (msgType) {\n      case 'Order': {\n        const order: INewOrderSingle = view.toObject()\n        this.logger.info(`received order id ${order.ClOrdID}`)\n        const fill: IExecutionReport = this.factory.fillOrder(order)\n        this.send('ExecutionReport', fill)\n      }\n    }\n  }\n\n  // use msgType for example to persist only trade capture messages to database\n  protected onDecoded (msgType: string, txt: string): void {\n    this.fixLog.info(txt)\n  }\n\n  protected onEncoded (msgType: string, txt: string): void {\n    this.fixLog.info(txt)\n  }\n\n  protected onLogon (view: MsgView, user: string, password: string): boolean {\n    return true\n  }\n\n  protected onReady (view: MsgView): void {\n    this.logger.info('onReady')\n  }\n\n  protected onStopped (): void {\n    this.logger.info('stopped')\n  }\n}\n"]}