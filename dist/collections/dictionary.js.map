{"version":3,"file":"dictionary.js","sourceRoot":"","sources":["../../src/collections/dictionary.ts"],"names":[],"mappings":";;;AAEA,MAAa,UAAU;IAAvB;QAEU,cAAS,GAAyB,EAAE,CAAA;IA0D9C,CAAC;IAxDQ,KAAK;QACV,MAAM,IAAI,GAAa,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QAClD,OAAO,IAAI,CAAC,MAAM,CAAA;IACpB,CAAC;IAEM,MAAM;QACX,MAAM,EAAE,GAAQ,EAAE,CAAA;QAClB,MAAM,IAAI,GAAa,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QAClD,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC/C,OAAO,EAAE,CAAA;IACX,CAAC;IAEM,IAAI;QACT,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IACpC,CAAC;IAEM,QAAQ;QACb,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAAS,EAAE,OAAe,EAAE,EAAE;YACvD,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAA;YACtC,OAAO,CAAC,GAAG,GAAG,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,CAAA;QAClE,CAAC,EAAE,EAAE,CAAC,CAAA;IACR,CAAC;IAEM,WAAW,CAAE,GAAW;QAC7B,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,IAAI,CAAA;IACpC,CAAC;IAEM,GAAG,CAAE,GAAW,EAAE,CAAI;QAC3B,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;YACzB,MAAM,GAAG,GAAW,iBAAiB,GAAG,EAAE,CAAA;YAC1C,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,CAAA;SACrB;QACD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IACzB,CAAC;IAEM,SAAS,CAAE,GAAW,EAAE,CAAI;QACjC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IACzB,CAAC;IAEM,MAAM,CAAE,GAAW;QACxB,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;IAC5B,CAAC;IAEM,GAAG,CAAE,GAAW;QACrB,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;IAC5B,CAAC;IAEM,KAAK;QACV,IAAI,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACtB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;QAChB,CAAC,CAAC,CAAA;IACJ,CAAC;IAEM,OAAO,CAAE,EAAsB;QACpC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC9E,CAAC;CACF;AA5DD,gCA4DC","sourcesContent":["import { IDictIteratorCb } from './collection'\n\nexport class Dictionary<T> {\n\n  private container: { [id: string]: T; } = {}\n\n  public count (): number {\n    const keys: string[] = Object.keys(this.container)\n    return keys.length\n  }\n\n  public values (): T[] {\n    const va: T[] = []\n    const keys: string[] = Object.keys(this.container)\n    keys.forEach((k) => va.push(this.container[k]))\n    return va\n  }\n\n  public keys (): string[] {\n    return Object.keys(this.container)\n  }\n\n  public toString (): string {\n    return this.keys().reduce((a: string, current: string) => {\n      const token = a.length > 0 ? ', ' : ''\n      return a + `${token}${this.container[current].toString() || ''}`\n    }, '')\n  }\n\n  public containsKey (key: string): boolean {\n    return this.container[key] != null\n  }\n\n  public add (key: string, v: T): void {\n    if (this.containsKey(key)) {\n      const msg: string = `duplicate key ${key}`\n      throw new Error(msg)\n    }\n    this.container[key] = v\n  }\n\n  public addUpdate (key: string, v: T): void {\n    this.container[key] = v\n  }\n\n  public remove (key: string): void {\n    delete this.container[key]\n  }\n\n  public get (key: string): T {\n    return this.container[key]\n  }\n\n  public clear () {\n    this.keys().forEach(k => {\n      this.remove(k)\n    })\n  }\n\n  public forEach (cb: IDictIteratorCb<T>): void {\n    Object.keys(this.container).forEach((k: string) => cb(k, this.container[k]))\n  }\n}\n"]}