{"version":3,"file":"ascii-session.js","sourceRoot":"","sources":["../../../src/transport/ascii/ascii-session.ts"],"names":[],"mappings":"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","sourcesContent":["import { MsgView } from '../../buffer'\nimport { MsgTag, MsgType, SessionRejectReason } from '../../types'\nimport { IJsFixConfig } from '../../config'\nimport { FixSession } from '../session/fix-session'\nimport { FixMsgAsciiStoreResend, FixMsgMemoryStore, IFixMsgStore, IFixMsgStoreRecord } from '../../store'\nimport { SessionState } from '../tcp'\nimport { TickAction } from '../tick-action'\nimport { IMsgApplication } from '../msg-application'\nimport { SegmentType } from '../../buffer/segment/segment-type'\n\nexport abstract class AsciiSession extends FixSession {\n\n  public heartbeat: boolean = true\n  protected store: IFixMsgStore = null\n  protected resender: FixMsgAsciiStoreResend\n\n  protected constructor (public readonly config: IJsFixConfig) {\n    super(config)\n    this.requestLogoutType = this.respondLogoutType = MsgType.Logout\n    this.requestLogonType = MsgType.Logon\n    this.store = new FixMsgMemoryStore(this.config.description.SenderCompId, this.config)\n    this.resender = new FixMsgAsciiStoreResend(this.store, this.config)\n  }\n\n  private checkSeqNo (msgType: string, view: MsgView): boolean {\n\n    switch (msgType) {\n      case MsgType.SequenceReset: {\n        return true\n      }\n\n      default: {\n        const state = this.sessionState\n        const lastSeq: number = state.lastPeerMsgSeqNum\n        const seqNo: number = view.getTyped(MsgTag.MsgSeqNum)\n        let ret: boolean = false\n        const seqDelta: number = seqNo - lastSeq\n        if (seqDelta <= 0) {\n          // serious problem ... drop immediately\n          this.sessionLogger.warning(`terminate as seqDelta (${seqDelta}) < 0 lastSeq = ${lastSeq} seqNo = ${seqNo}`)\n          this.stop()\n        } else if (seqDelta > 1) {\n          // resend request required as have missed messages.\n\n          // We process a Logon beforehand to confirm the connection even we out of sync\n          if (msgType === MsgType.Logon) {\n            this.peerLogon(view)\n          }\n          // If the out of sync message is a resend request itself, then we handle it first in order\n          // to avoid triggering an endless loop of both sides sending resend requests in response to resend requests.\n          if (msgType === MsgType.ResendRequest) {\n            this.onResendRequest(view)\n          }\n          this.sendResendRequest(lastSeq, seqNo)\n        } else {\n          ret = true\n          state.lastPeerMsgSeqNum = seqNo\n        }\n        return ret\n      }\n    }\n  }\n\n  protected checkForwardMsg (msgType: string, view: MsgView): void {\n    const okToForward = this.validStateApplicationMsg()\n    if (okToForward) {\n      this.sessionLogger.info(`ascii forwarding msgType = '${msgType}' to application`)\n      this.setState(SessionState.ActiveNormalSession)\n      this.onApplicationMsg(msgType, view)\n    } else {\n      this.terminate(new Error(`msgType ${msgType} received in state ${this.stateString()}`))\n    }\n  }\n\n  private sendReject (msgType: string, seqNo: number, msg: string, reason: number): void {\n    const factory = this.config.factory\n    const reject = factory.reject(msgType, seqNo, msg, reason)\n    this.sessionLogger.warning(`rejecting with ${JSON.stringify(reject)}`)\n    this.send(MsgType.Reject, reject)\n  }\n\n  protected sendResendRequest (lastSeq: number, receivedSeq: number) {\n    const resend = this.config.factory.resendRequest(lastSeq + 1, 0)\n    this.sessionLogger.warning(`received seq ${receivedSeq}, but last known seq is ${lastSeq}. Sending resend request for all messages > ${lastSeq}`)\n    this.send(MsgType.ResendRequest, resend)\n  }\n\n  private checkIntegrity (msgType: string, view: MsgView): boolean {\n    const state = this.sessionState\n    const seqNum = view.getTyped(MsgTag.MsgSeqNum)\n\n    const received: number = parseInt(view.getString(MsgTag.CheckSum), 10)\n    const computed = view.checksum()\n    if (received !== computed) {\n      const msg: string = `msgType ${msgType} checksum failed. received = ${received} computed = ${computed}`\n      this.sendReject(msgType, seqNum, msg, SessionRejectReason.ValueIsIncorrect)\n      return false\n    }\n\n    if (view.segment.type === SegmentType.Unknown) {\n      const msg: string = `msgType ${msgType} unknown`\n      this.sendReject(msgType, seqNum, msg, SessionRejectReason.InvalidMsgType)\n      return false\n    }\n\n    const invalid = view.invalid()\n    if (invalid.length > 0) {\n      const msg: string = `msgType ${msgType} invalid tag${invalid.length > 1 ? 's' : ''} ${invalid.join(', ')}`\n      this.sendReject(msgType, seqNum, msg, SessionRejectReason.InvalidTagNumber)\n      return false\n    }\n\n    const undefinedMsg: string = view.undefinedForMsg()\n    if (undefinedMsg) {\n      const msg: string = `msgType ${msgType} ${undefinedMsg}`\n      this.sendReject(msgType, seqNum, msg, SessionRejectReason.TagNotDefinedForThisMessageType)\n      return false\n    }\n\n    const missingRequired = view.missing()\n    if (missingRequired.length > 0) {\n      const msg: string = `msgType ${msgType} missing required tag${missingRequired.length > 1 ? 's' : ''} ${missingRequired.join(', ')}`\n      this.sendReject(msgType, seqNum, msg, SessionRejectReason.RequiredTagMissing)\n      return false\n    }\n\n    switch (state.state) {\n      case SessionState.InitiationLogonReceived:\n      case SessionState.InitiationLogonResponse: {\n        const targetCompId = view.getString(MsgTag.TargetCompID)\n        if (targetCompId !== state.compId) {\n          const msg: string = `msgType ${msgType} unexpected TargetCompID ${targetCompId} expecting ${state.compId})`\n          this.sendReject(msgType, seqNum, msg, SessionRejectReason.CompIDProblem)\n          return false\n        }\n\n        const peerCompId = view.getString(MsgTag.SenderCompID)\n        if (peerCompId !== state.peerCompId) {\n          const msg: string = `msgType ${msgType} unexpected SenderCompID ${peerCompId}  expecting ${state.compId}`\n          this.sendReject(msgType, seqNum, msg, SessionRejectReason.CompIDProblem)\n          return false\n        }\n      }\n        break\n\n      default: {\n        break\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Override to resend stored messages following a sequence reset.\n   * @protected\n   */\n  protected onResendRequest (view: MsgView) {\n    // if no records are in store then send a gap fill for entire sequence\n    this.setState(SessionState.HandleResendRequest)\n    const [beginSeqNo, endSeqNo] = view.getTypedTags([MsgTag.BeginSeqNo, MsgTag.EndSeqNo])\n    this.sessionLogger.info(`onResendRequest getResendRequest beginSeqNo = ${beginSeqNo}, endSeqNo = ${endSeqNo}`)\n    this.resender.getResendRequest(beginSeqNo, endSeqNo).then((records: IFixMsgStoreRecord[]) => {\n      const validRecords = records.filter(rec => rec.obj !== null)\n      this.sessionLogger.info(`sending ${validRecords.length}`)\n      validRecords.forEach(rec => {\n        this.send(rec.msgType, rec.obj)\n      })\n      this.setState(SessionState.ActiveNormalSession)\n    }).catch(e => {\n      this.sessionLogger.error(e)\n    })\n  }\n\n  okForLogon (): boolean {\n    const state = this.sessionState.state\n    if (this.acceptor) {\n      return state === SessionState.WaitingForALogon\n    }\n    return state === SessionState.InitiationLogonSent\n  }\n\n  protected onSessionMsg (msgType: string, view: MsgView): void {\n\n    const logger = this.sessionLogger\n\n    switch (msgType) {\n      case MsgType.Logon: {\n        // only valid to receive a logon when in LogonSent or WaitingALogon\n        // else will drop connection immediately.\n        if (this.okForLogon()) {\n          this.peerLogon(view)\n        } else {\n          this.terminate(new Error(`state ${this.stateString()} is illegal for Logon`))\n        }\n        break\n      }\n\n      case MsgType.Logout: {\n        this.peerLogout(view)\n        break\n      }\n\n      case MsgType.TestRequest: {\n        const req: string = view.getString(MsgTag.TestReqID)\n        this.sendHeartbeat(req)\n        break\n      }\n\n      case MsgType.Heartbeat: {\n        this.sessionState.lastTestRequestAt = null\n        this.setState(SessionState.ActiveNormalSession)\n        break\n      }\n\n      case MsgType.ResendRequest: {\n        logger.info(`peer sends '${msgType}' resend request.`)\n        this.onResendRequest(view)\n        break\n      }\n\n      case MsgType.SequenceReset: {\n        const newSeqNo: number = view.getTyped(MsgTag.NewSeqNo)\n        logger.info(`peer sends '${msgType}' sequence reset. newSeqNo = ${newSeqNo}`)\n        // expect  newSeqNo to be the next message's sequence number.\n        this.sessionState.lastPeerMsgSeqNum = newSeqNo - 1\n        break\n      }\n\n      case MsgType.Reject: {\n        logger.info(`peer rejects type '${msgType}' with text '${view.getTyped(MsgTag.Text)}'`)\n        break\n      }\n    }\n  }\n\n  protected onMsg (msgType: string, view: MsgView): void {\n\n    if (!this.checkSeqNo(msgType, view)) {\n      this.sessionLogger.info(`message '${msgType}' failed checkSeqNo.`)\n      return\n    }\n\n    if (this.checkMsgIntegrity && !this.checkIntegrity(msgType, view)) {\n      this.sessionLogger.info(`message '${msgType}' failed checkIntegrity.`)\n      switch (msgType) {\n        case MsgType.Logon: {\n          this.setState(SessionState.PeerLogonRejected)\n          this.startTimer()\n          break\n        }\n      }\n      return\n    }\n\n    switch (msgType) {\n      case MsgType.Logon:\n      case MsgType.Logout:\n      case MsgType.TestRequest:\n      case MsgType.Reject:\n      case MsgType.SequenceReset:\n      case MsgType.Heartbeat:\n      case MsgType.ResendRequest: {\n        this.onSessionMsg(msgType, view)\n        break\n      }\n\n      default: {\n        this.checkForwardMsg(msgType, view)\n        break\n      }\n    }\n  }\n\n  private startTimer (interval: number = 200) {\n    this.timer = setInterval(() => {\n      this.tick()\n    }, interval)\n  }\n\n  private peerLogon (view: MsgView) {\n    const logger = this.sessionLogger\n    const [heartBtInt, peerCompId, userName, password] = view.getTypedTags([MsgTag.HeartBtInt, MsgTag.SenderCompID, MsgTag.Username, MsgTag.Password])\n    logger.info(`peerLogon Username = ${userName}, heartBtInt = ${heartBtInt}, peerCompId = ${peerCompId}, userName = ${userName}`)\n    const state = this.sessionState\n    state.peerHeartBeatSecs = view.getTyped(MsgTag.HeartBtInt)\n    state.peerCompId = view.getTyped(MsgTag.SenderCompID)\n    const res = this.onLogon(view, userName, password)\n    // currently not using this.\n    logger.info(`peerLogon onLogon returns ${res}`)\n    if (this.acceptor) {\n      this.setState(SessionState.InitiationLogonResponse)\n      logger.info('acceptor responds to logon request')\n      this.sendLogon() // if res send response else reject, terminate\n    } else { // as an initiator the acceptor has responded\n      logger.info('initiator receives logon response')\n      this.setState(SessionState.InitiationLogonReceived)\n    }\n    if (this.heartbeat) {\n      logger.debug(`start heartbeat timer.`)\n      this.startTimer()\n    }\n    logger.info(`system ready, inform app`)\n    this.onReady(view)\n  }\n\n  private sendTestRequest () {\n    const factory = this.config.factory\n    this.setState(SessionState.AwaitingProcessingResponseToTestRequest)\n    this.send(MsgType.TestRequest, factory.testRequest())\n  }\n\n  private sendHeartbeat (testReqId: string) {\n    const factory = this.config.factory\n    this.send(MsgType.Heartbeat, factory.heartbeat(testReqId))\n  }\n\n  private tick (): void {\n    if (!this.transport) return\n    const sessionState = this.sessionState\n    const action: TickAction = sessionState.calcAction(new Date())\n    const application: IMsgApplication = this.transport.config.description.application\n    const logger = this.sessionLogger\n\n    switch (action) {\n      case TickAction.Nothing: {\n        // all is well\n        break\n      }\n\n      case TickAction.TestRequest: {\n        logger.debug(`send test req. state = ${sessionState.toString()}`)\n        this.sendTestRequest()\n        break\n      }\n\n      case TickAction.Heartbeat: {\n        logger.debug(`send heartbeat. state = ${sessionState.toString()}`)\n        this.sendHeartbeat(sessionState.now.toUTCString())\n        break\n      }\n\n      case TickAction.TerminateOnError: {\n        logger.info(sessionState.toString())\n        this.terminate(new Error(`${application.name}: peer not responding`))\n        break\n      }\n\n      case TickAction.Stop: {\n        logger.info(sessionState.toString())\n        logger.info('stopping')\n        this.stop()\n        break\n      }\n\n      default:\n        throw new Error(`unexpected action`)\n    }\n  }\n}\n"]}