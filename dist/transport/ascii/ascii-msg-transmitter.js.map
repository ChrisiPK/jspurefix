{"version":3,"file":"ascii-msg-transmitter.js","sourceRoot":"","sources":["../../../src/transport/ascii/ascii-msg-transmitter.ts"],"names":[],"mappings":"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","sourcesContent":["import { AsciiChars, AsciiEncoder, TimeFormatter } from '../../buffer/ascii'\nimport { MsgTransmitter } from '../msg-transmitter'\nimport { ILooseObject } from '../../collections/collection'\nimport { ContainedFieldSet } from '../../dictionary/contained'\nimport { MessageDefinition } from '../../dictionary/definition'\nimport { IJsFixConfig } from '../../config'\nimport { IStandardHeader } from '../../types/FIX4.4/repo'\nimport { inject, injectable } from 'tsyringe'\nimport { DITokens } from '../../runtime/di-tokens'\nimport { ElasticBuffer } from '../../buffer'\n\n@injectable()\nexport class AsciiMsgTransmitter extends MsgTransmitter {\n  public msgSeqNum: number\n  public time: Date\n\n  private readonly header: ContainedFieldSet\n  private readonly trailer: ContainedFieldSet\n\n  constructor (@inject(DITokens.IJsFixConfig) public readonly config: IJsFixConfig) {\n    super(config.sessionContainer.resolve<ElasticBuffer>(DITokens.TransmitBuffer), config.definitions, config.description)\n    this.msgSeqNum = (config.description.LastSentSeqNum || 0) + 1 // adding 1 as this the next sequence # to use.\n    const buffer = this.buffer\n    const tf: TimeFormatter = new TimeFormatter(buffer)\n    this.encoder = new AsciiEncoder(buffer, config.definitions, tf,\n      config.delimiter || AsciiChars.Soh,\n      config.logDelimiter || AsciiChars.Pipe)\n    const components = config.definitions.component\n    this.header = components.get('StandardHeader')\n    this.trailer = components.get('StandardTrailer')\n  }\n\n  private checksum (): number {\n    const buffer = this.buffer\n    const encoder: AsciiEncoder = this.encoder as AsciiEncoder\n    let checksum: number = buffer.sum()\n    if (encoder.delimiter !== encoder.logDelimiter) {\n      const changes = encoder.tags.nextTagPos\n      checksum -= changes * encoder.logDelimiter\n      checksum += changes * encoder.delimiter\n    }\n    checksum = checksum % 256\n    return checksum\n  }\n\n  public encodeMessage (msgType: string, obj: ILooseObject): void {\n    const encoder: AsciiEncoder = this.encoder as AsciiEncoder\n    const factory = this.config.factory\n    let headerProps: Partial<IStandardHeader> = {}\n    const { StandardHeader, ...bodyProps } = obj\n    if (StandardHeader) {\n      const { BeginString, BodyLength, MsgType, SenderCompID, SendingTime, TargetCompID, TargetSubID, ...hp } = StandardHeader\n      headerProps = hp // pick up any optional applied by application\n      headerProps.OrigSendingTime = SendingTime // when first sent\n    }\n\n    const sendingTime = this.time || new Date()\n    const hdr: ILooseObject = factory.header(msgType, this.msgSeqNum, sendingTime, headerProps)\n\n    // Only increment sequence number if this is not a duplicate message.\n    if (!headerProps.PossDupFlag) {\n      this.msgSeqNum++\n    }\n\n    const buffer = this.buffer\n    buffer.reset()\n    const msgDef: MessageDefinition = this.definitions.message.get(msgType)\n    if (!msgDef) {\n      this.emit('error', new Error(`ascii transmitter cannot find definition for ${msgType}`))\n      return\n    }\n    encoder.encode(hdr, this.header.name)\n    encoder.encode(bodyProps, msgDef.name)\n    const lenPos = encoder.bodyLengthPos\n    const bodyLength: number = Math.max(4, this.config.description.BodyLengthChars || 7)\n    const len = buffer.getPos() - encoder.msgTypePos\n    buffer.patchPaddedNumberAtPos(lenPos, len, bodyLength)\n    let checksum: number = this.checksum()\n    const trl: ILooseObject = factory.trailer(checksum)\n    encoder.encode(trl, this.trailer.name)\n  }\n}\n"]}