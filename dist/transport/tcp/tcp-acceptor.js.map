{"version":3,"file":"tcp-acceptor.js","sourceRoot":"","sources":["../../../src/transport/tcp/tcp-acceptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { TcpDuplex } from '../duplex'\nimport { MsgTransport } from '../factory'\nimport { FixAcceptor } from '../fix-acceptor'\nimport { IJsFixConfig, IJsFixLogger } from '../../config'\nimport { createServer as netCreateServer, Server, Socket } from 'net'\nimport { createServer as tlsCreateServer, TlsOptions, TLSSocket } from 'tls'\nimport { TlsOptionsFactory } from './tls-options-factory'\nimport { inject, injectable } from 'tsyringe'\nimport { DITokens } from '../../runtime/di-tokens'\n\n@injectable()\nexport class TcpAcceptor extends FixAcceptor {\n  private server: Server\n  private logger: IJsFixLogger\n  private nextId: number = 0\n\n  constructor (@inject(DITokens.IJsFixConfig) public readonly config: IJsFixConfig) {\n    super(config.description.application)\n    this.logger = config.logFactory.logger(`${config.description.application.name}:TcpAcceptor`)\n    const tlsOptions: TlsOptions = this.tlsOptions()\n    if (tlsOptions) {\n      this.tlsServer()\n    } else {\n      this.unsecureServer()\n    }\n    this.server.on('error', ((err: Error) => {\n      throw err\n    }))\n  }\n\n  getId (): number {\n    this.nextId++\n    return this.nextId\n  }\n\n  tlsServer (): void {\n    try {\n      const config: IJsFixConfig = this.config\n      const tcp = this.config.description.application.tcp\n      const tlsOptions: TlsOptions = TlsOptionsFactory.getTlsOptions(tcp.tls)\n      this.logger.info(`create tls server`)\n      this.server = tlsCreateServer(tlsOptions, (tlsSocket: TLSSocket) => {\n        if (tcp.tls.enableTrace) {\n          this.logger.info(`enabling tls session trace`)\n          tlsSocket.enableTrace()\n        }\n        if (tlsSocket.authorized) {\n          tlsSocket.setEncoding('utf8')\n          const id: number = this.getId()\n          this.logger.info(`tls creates session ${id} ${tlsSocket.authorized}`)\n          this.onSocket(id, tlsSocket, config)\n        } else {\n          this.logger.info(`no transport created on tls with no authorized connection`)\n        }\n      })\n    } catch (e) {\n      this.logger.error(e)\n      throw e\n    }\n  }\n\n  unsecureServer () {\n    try {\n      const config = this.config\n      this.logger.info(`create unsecured server`)\n      this.server = netCreateServer((socket: Socket) => {\n        const id: number = this.getId()\n        this.logger.info(`net creates session ${id}`)\n        socket.setNoDelay(true)\n        this.onSocket(id, socket, config)\n      })\n    } catch (e) {\n      this.logger.error(e)\n      throw e\n    }\n  }\n\n  tlsOptions (): TlsOptions {\n    const tcp = this.config.description.application.tcp\n    return TlsOptionsFactory.getTlsOptions(tcp.tls)\n  }\n\n  private onSocket (id: number, socket: Socket, config: IJsFixConfig) {\n    const transport: MsgTransport = new MsgTransport(id, config, new TcpDuplex(socket))\n    this.saveTransport(id, transport)\n    transport.receiver.on('end', () => {\n      this.harvestTransport(id)\n    })\n    transport.receiver.on('error', (e: Error) => {\n      this.logger.error(e)\n      this.harvestTransport(id)\n    })\n  }\n\n  public listen (): void {\n    const port = this.config.description.application.tcp.port\n    this.logger.info(`start to listen ${port}`)\n    this.server.on('connection', () => {\n      this.logger.info('insecure connection established')\n    })\n    this.server.on('secureConnection', (s) => {\n      this.logger.info(`secure connection; client authorized: ${s.authorized}`)\n    })\n    this.server.listen(port)\n  }\n\n  public close (callback?: (err?: Error) => void): void {\n    const port = this.config.description.application.tcp.port\n    this.logger.info(`close listener on port ${port}`)\n    this.server.close(callback)\n  }\n\n  private saveTransport (tid: number, transport: MsgTransport) {\n    this.transports[tid] = transport\n    const keys: string[] = Object.keys(this.transports)\n    this.logger.info(`new transport id = ${tid} created total transports = ${keys.length}`)\n    this.emit('transport', transport)\n  }\n\n  private harvestTransport (tid: number) {\n    delete this.transports[tid]\n    const keys: string[] = Object.keys(this.transports)\n    this.logger.info(`transport ${tid} ends total transports = ${keys.length}`)\n  }\n}\n"]}