{"version":3,"file":"tcp-initiator-connector.js","sourceRoot":"","sources":["../../../src/transport/tcp/tcp-initiator-connector.ts"],"names":[],"mappings":"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","sourcesContent":["import { IJsFixConfig } from '../../config'\nimport { FixInitiator } from '../fix-initiator'\nimport { TcpInitiator } from './tcp-initiator'\nimport { MsgTransport } from '../factory'\nimport { FixSession } from '../session/fix-session'\nimport { inject, injectable } from 'tsyringe'\nimport { DITokens } from '../../runtime/di-tokens'\nimport { FixEntity } from '../fix-entity'\n\n@injectable()\nexport class TcpInitiatorConnector extends FixEntity {\n  constructor (@inject(DITokens.IJsFixConfig) public readonly config: IJsFixConfig) {\n    super(config)\n  }\n  start (reconnectTimeout: number = 0): Promise<any> {\n    return new Promise<any>(async (accept, reject) => {\n      const logger = this.config.logFactory.logger('initiator')\n      const sessionContainer = this.config.sessionContainer\n      if (!sessionContainer.isRegistered(DITokens.FixSession)) {\n        reject(new Error(`application must register a DI token '${DITokens.FixSession}' - see src/sample`))\n      }\n      logger.info(`create session with DI Token ${DITokens.FixSession}`)\n      const initiatorSession = sessionContainer.resolve<FixSession>(DITokens.FixSession)\n      let connecting: boolean = true\n      while (connecting) {\n        try {\n          await this.connect(initiatorSession)\n          logger.info('session has ended')\n          connecting = false\n          accept(true)\n        } catch (e) {\n          if (!reconnectTimeout) {\n            connecting = false\n            reject(e)\n          } else {\n            logger.info(`waiting ${reconnectTimeout} to reconnect following error`)\n            await this.delay(reconnectTimeout)\n          }\n        }\n      }\n    })\n  }\n\n  delay (p: number): Promise<any> {\n    return new Promise<any>((accept) => {\n      if (!p) {\n        accept(true)\n      }\n      setTimeout(() => {\n        accept(true)\n      }, p)\n    })\n  }\n\n  async connect (initiatorSession: FixSession): Promise<any> {\n    const logger = this.config.logFactory.logger('initiator')\n    const initiator: FixInitiator = this.config.sessionContainer.resolve<FixInitiator>(TcpInitiator)\n    logger.info('connecting ...')\n    const initiatorTransport: MsgTransport = await initiator.connect(22)\n    logger.info('... connected, run session')\n    await initiatorSession.run(initiatorTransport)\n    logger.info('ends')\n    return true\n  }\n}\n"]}