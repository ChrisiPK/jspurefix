{"version":3,"file":"tcp-initiator.js","sourceRoot":"","sources":["../../../src/transport/tcp/tcp-initiator.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { FixInitiator } from '../fix-initiator'\nimport { MsgTransport } from '../factory'\n\nimport { IJsFixConfig, IJsFixLogger } from '../../config'\nimport { TcpDuplex, FixDuplex } from '../duplex'\n\nimport * as util from 'util'\nimport { connect as tlsConnect, ConnectionOptions, TLSSocket } from 'tls'\nimport { createConnection } from 'net'\nimport Timeout = NodeJS.Timeout\nimport { TlsOptionsFactory } from './tls-options-factory'\nimport { inject, injectable } from 'tsyringe'\nimport { DITokens } from '../../runtime/di-tokens'\nimport { ITcpTransportDescription } from './tcp-transport-description'\n\nexport enum InitiatorState {\n  Idle = 1,\n  Connecting = 2,\n  Connected = 3,\n  Stopped = 4\n}\n\n@injectable()\nexport class TcpInitiator extends FixInitiator {\n  public tcp: ITcpTransportDescription\n  public state: InitiatorState = InitiatorState.Idle\n  private readonly logger: IJsFixLogger\n  private duplex: FixDuplex\n  private th: Timeout = null\n\n  constructor (@inject(DITokens.IJsFixConfig) public readonly jsFixConfig: IJsFixConfig) {\n    super(jsFixConfig.description.application)\n    this.logger = jsFixConfig.logFactory.logger(`${this.application.name}:TcpInitiator`)\n    if (!this.application) {\n      throw new Error(`no application in session description.`)\n    }\n    this.tcp = this.application.tcp\n    if (!this.tcp) {\n      throw new Error(`no tcp in session description need tcp { host: hostname, port: port }`)\n    }\n  }\n\n  public end (): void {\n    this.clearTimer()\n    switch (this.state) {\n      case InitiatorState.Connected: {\n        this.logger.info('end')\n        this.duplex.end()\n        this.state = InitiatorState.Stopped\n        break\n      }\n\n      default: {\n        this.logger.info(`end :state ${this.state}`)\n        this.state = InitiatorState.Stopped\n        break\n      }\n    }\n  }\n\n  public connect (timeoutSeconds: number): Promise<MsgTransport> {\n    return new Promise<MsgTransport>(async (resolve, reject) => {\n      switch (this.state) {\n        case InitiatorState.Idle: {\n          this.state = InitiatorState.Connecting\n          this.logger.info(`connecting with timeout ${timeoutSeconds}`)\n          this.tryConnect()\n            .then((t: MsgTransport) => resolve(t))\n            .catch((e: Error) => {\n              this.repeatConnect(timeoutSeconds)\n                .then((t: MsgTransport) => resolve(t))\n                .catch((e: Error) => reject(e))\n            })\n          break\n        }\n\n        default:\n          const e: Error = new Error(`connect not valid from non idle state`)\n          this.logger.warning(`rejecting from state ${this.state}`)\n          reject(e)\n      }\n    })\n  }\n\n  private unsecureDuplex (): Promise<TcpDuplex> {\n    const tcp = this.tcp\n    return new Promise<TcpDuplex>((resolve, reject) => {\n      try {\n        this.logger.info(`unsecureDuplex try to connect to endPoint`)\n        const socket = createConnection(tcp, () => {\n          try {\n            this.logger.info(`net.createConnection cb, resolving`)\n            const tcpDuplex = new TcpDuplex(socket)\n            resolve(tcpDuplex)\n          } catch (e) {\n            reject(e)\n          }\n        })\n        socket.on('error', (err) => {\n          reject(err)\n        })\n      } catch (e) {\n        reject(e)\n      }\n    })\n  }\n\n  private tlsDuplex (): Promise < TcpDuplex > {\n    return new Promise<TcpDuplex>((resolve, reject) => {\n      let tlsSocket: TLSSocket = null\n      const tcp = this.tcp\n      const connectionOptions: ConnectionOptions = TlsOptionsFactory.getTlsConnectionOptions(tcp)\n      if (connectionOptions) {\n        try {\n          tlsSocket = tlsConnect(connectionOptions, () => {\n            this.logger.info(`client connected ${tlsSocket.authorized ? 'authorized' : 'unauthorized'}`)\n            if (!tlsSocket.authorized) {\n              const error = tlsSocket.authorizationError\n              this.logger.warning(`rejecting from state ${this.state} authorizationError ${error}`)\n              tlsSocket.end()\n              reject(error)\n            } else {\n              tlsSocket.setEncoding('utf8')\n              const tlsDuplex = new TcpDuplex(tlsSocket)\n              if (tcp.tls.enableTrace) {\n                this.logger.info(`enabling tls session trace`)\n                tlsSocket.enableTrace()\n              }\n              this.logger.info(`tlsDuplex resolving`)\n              resolve(tlsDuplex)\n            }\n          })\n          tlsSocket.on('error', (err) => {\n            reject(err)\n          })\n        } catch (e) {\n          reject(e)\n        }\n      }\n    })\n  }\n\n  private tryConnect (): Promise < MsgTransport > {\n    return new Promise<MsgTransport>((resolve, reject) => {\n      const tcp = this.tcp\n      const connectionOptions: ConnectionOptions = TlsOptionsFactory.getTlsConnectionOptions(tcp)\n      const connector = connectionOptions ? this.tlsDuplex() : this.unsecureDuplex()\n      this.logger.info(`tryConnect ${tcp.host}:${tcp.port}`)\n      connector.then(duplex => {\n        this.duplex = duplex\n        resolve(new MsgTransport(0, this.jsFixConfig, duplex))\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  public clearTimer () {\n    if (this .th) {\n      clearInterval(this.th)\n      this.th = null\n    }\n  }\n\n  private repeatConnect (timeoutSeconds: number): Promise < MsgTransport > {\n    return new Promise<MsgTransport>(async (resolve, reject) => {\n      const application = this.application\n      const promisify = util.promisify\n      const timeoutPromise = promisify(setTimeout)\n      let retries = 0\n      let lastError: Error\n      this.th = setInterval(() => {\n        ++retries\n        this.tryConnect()\n          .then((t: MsgTransport) => {\n            this.state = InitiatorState.Connected\n            this.clearTimer()\n            resolve(t)\n        }).catch((e: Error) => {\n          lastError = e\n          this.logger.info(`${application.name}: retries ${retries} ${e.message}`)\n        })\n      }, application.reconnectSeconds * 1000)\n      timeoutPromise(timeoutSeconds * 1000).then(() => {\n        this.clearTimer()\n        this.state = InitiatorState.Stopped\n        const e = lastError ?? new Error(`${application.name}: timeout of ${timeoutSeconds} whilst connecting`)\n        reject(e)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n"]}