{"version":3,"file":"recovering-tcp-initiator.js","sourceRoot":"","sources":["../../../src/transport/tcp/recovering-tcp-initiator.ts"],"names":[],"mappings":"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","sourcesContent":["import { IJsFixConfig, IJsFixLogger } from '../../config'\nimport { FixSession } from '../session/fix-session'\nimport { TcpInitiator } from './tcp-initiator'\nimport { MsgTransport } from '../factory'\nimport Timeout = NodeJS.Timeout\nimport { SessionState } from '../session/session-state'\nimport { inject, injectable } from 'tsyringe'\nimport { DITokens } from '../../runtime/di-tokens'\nimport { ITcpTransportDescription } from './tcp-transport-description'\nimport { IMsgApplication } from '../msg-application'\nimport { FixEntity } from '../fix-entity'\n\n/*\n   create one application session instance - and recover a lost transport.  Hence the application\n   will automatically re-connected and the \"message recovery\" policy enacted i.e. replay from\n   last known sequence number or sequence reset.\n */\n\n@injectable()\nexport class RecoveringTcpInitiator extends FixEntity {\n  public tcp: ITcpTransportDescription\n  public session: FixSession\n  private readonly logger: IJsFixLogger\n  private application: IMsgApplication\n  private initiator: TcpInitiator\n  private transport: MsgTransport\n  private th: Timeout = null\n  public recoveryAttemptSecs: number = 5\n  public backoffFailConnectSecs: number = 30\n\n  constructor (@inject(DITokens.IJsFixConfig) public readonly jsFixConfig: IJsFixConfig) {\n    super(jsFixConfig)\n    this.application = this.jsFixConfig.description.application\n    this.logger = jsFixConfig.logFactory.logger(`${this.application.name}:RecoveringTcpInitiator`)\n    if (!this.application) {\n      throw new Error(`no application in session description.`)\n    }\n    this.tcp = this.application.tcp\n    if (!this.tcp) {\n      throw new Error(`no tcp in session description need tcp { host: hostname, port: port }`)\n    }\n    this.createSession(jsFixConfig)\n  }\n\n  private createSession (jsFixConfig: IJsFixConfig) {\n    this.logger.info(`creating an application session with DI token ${DITokens.FixSession}.`)\n    this.session = jsFixConfig.sessionContainer.resolve<FixSession>(DITokens.FixSession)\n    this.session.on('done', () => {\n      this.logger.info('session has permanently ended')\n      this.emit('end', this)\n    })\n    this.session.on('end', () => {\n      this.logger.info('session has permanently ended')\n      this.emit('end', this)\n    })\n    this.session.setState(SessionState.DisconnectedNoConnectionToday)\n  }\n\n  public getState (): SessionState {\n    return this.session.getState()\n  }\n\n  private newTransport (transport: MsgTransport) {\n    this.transport = transport\n    this.emit('transport', transport)\n    this.logger.info(`initiator connects id ${(transport.id)}`)\n    const session = this.session\n    if (this.jsFixConfig.description.ResetSeqNumFlag) {\n      this.logger.info('reset sequence numbers')\n      session.reset()\n    }\n    session.setState(SessionState.NetworkConnectionEstablished)\n    session.run(transport).then((id: number) => {\n      if (!transport || id === transport.id) {\n        this.emit('end', this)\n      } else {\n        this.logger.info(`old transport ${id} ends waiting on ${(transport.id)}`)\n      }\n    }).catch(e => {\n      this.logger.info(`transport id ${(transport.id)} failed - session state ${session.getState()}`)\n      this.logger.warning(e.message)\n      this.recover()\n    })\n    this.logger.info(`running session with transport ${transport.id} state = ${session.getState()}`)\n  }\n\n  private clearTimer () {\n    if (this.th) {\n      clearTimeout(this.th)\n      this.th = null\n    }\n  }\n\n  // at least one connection was established so retry to establish - either\n  // succeed in which case can restart session or fails in which case wait and\n  // restart an attempt to connect\n\n  private recover (): void {\n    this.session.setState(SessionState.DetectBrokenNetworkConnection)\n    this.logger.info(`recover session transport - attempt in ${this.recoveryAttemptSecs} secs`)\n    this.th = setTimeout(() => {\n      this.connect(60).then(t => {\n        this.logger.info(`new transport ${t.id}`)\n      }).catch((e) => {\n        this.logger.info(`failed to re-connect ${e.message} - backoff for ${this.backoffFailConnectSecs}`)\n        this.th = setTimeout(() => {\n          this.logger.info('returning to recover()')\n          this.recover()\n        }, this.backoffFailConnectSecs * 1000)\n      })\n    },this.recoveryAttemptSecs * 1000)\n  }\n\n  public start (): Promise<any> {\n    return this.run()\n  }\n\n  // for first connection - reject if no initial connection established within timeout\n  // once connection established, will not resolve until session is ended - i.e. lost\n  // connections are re-established using the same session instance.\n\n  public run (initialTimeout: number = 60): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n      this.connect(initialTimeout).then(() => {\n        this.on('end', () => {\n          this.clearTimer()\n          this.initiator.end()\n          this.logger.info(`run: transport ${this.transport.id} gracefully ends ${initialTimeout} - resolving`)\n          resolve(null)\n        })\n      }).catch(e => {\n        this.logger.info(`run: failed to connect to first transport ${initialTimeout} - rejecting`)\n        reject(e)\n      })\n    })\n  }\n\n  // return a promise for new transport - or reject if no connection within timeout\n\n  private connect (timeout: number): Promise<MsgTransport> {\n    return new Promise<MsgTransport>((resolve, reject) => {\n      this.logger.info(`connect: start initiator timeout ${timeout}`)\n      this.session.setState(SessionState.InitiateConnection)\n      this.initiator = new TcpInitiator(this.jsFixConfig)\n      this.initiator.connect(timeout).then((transport: MsgTransport) => {\n        this.logger.info(`connect: receive new transport ${transport.id}`)\n        this.newTransport(transport)\n        resolve(transport)\n      }).catch(e => {\n        this.logger.info(`connect: failed to connect within ${timeout} - rejecting`)\n        this.session.setState(SessionState.DetectBrokenNetworkConnection)\n        reject(e)\n      })\n    })\n  }\n}\n"]}