{"version":3,"file":"tls-options-factory.js","sourceRoot":"","sources":["../../../src/transport/tcp/tls-options-factory.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConnectionOptions, TlsOptions } from 'tls'\nimport { ITlsOptions } from './tls-options'\nimport { ITcpTransportDescription } from './tcp-transport-description'\nconst path = require('path')\nconst fs = require('fs')\n\nexport class TlsOptionsFactory {\n  static read (filePath: string) {\n    const root: string = path.join(__dirname, '../../../')\n    const fullPath = path.join(root, filePath)\n    return fs.readFileSync(fullPath,\n      {\n        encoding: 'utf8', flag: 'r'\n      })\n  }\n\n  static getTlsOptions (tls: ITlsOptions): TlsOptions {\n    let tlsOptions: TlsOptions = null\n    if (tls) {\n      tlsOptions = {\n        requestCert: tls.requestCert,\n        rejectUnauthorized: tls.rejectUnauthorized\n      } as TlsOptions\n\n      if (tls.key) {\n        tlsOptions.key = TlsOptionsFactory.read(tls.key)\n        tlsOptions.cert = TlsOptionsFactory.read(tls.cert)\n      }\n\n      if (tls.ca && tls.ca.length > 0) {\n        tlsOptions.ca = tls.ca.map(i => TlsOptionsFactory.read(i))\n      }\n\n      if (tls.nodeTlsServerOptions) {\n        tlsOptions = {\n          ...tlsOptions,\n          ...tls.nodeTlsServerOptions,\n        }\n      }\n    }\n    return tlsOptions\n  }\n\n  static getTlsConnectionOptions (tcp: ITcpTransportDescription): ConnectionOptions {\n    let connectionOptions: ConnectionOptions = null\n    const tls = tcp.tls\n    if (tls) {\n      connectionOptions = {\n        port: tcp.port,\n        host: tcp.host\n      } as ConnectionOptions\n      if (tls.key) {\n        connectionOptions.key = TlsOptionsFactory.read(tcp.tls.key)\n        connectionOptions.cert = TlsOptionsFactory.read(tcp.tls.cert)\n      }\n      if (tcp.tls.ca && tcp.tls.ca.length > 0) {\n        connectionOptions.ca = tcp.tls.ca.map(i => TlsOptionsFactory.read(i))\n      }\n      if (tcp.tls.timeout) {\n        connectionOptions.timeout = tcp.tls.timeout\n      }\n      if (tcp.tls.sessionTimeout) {\n        connectionOptions.sessionTimeout = tcp.tls.sessionTimeout\n      }\n      if (tls.nodeTlsConnectionOptions) {\n        connectionOptions = {\n          ...connectionOptions,\n          ...tls.nodeTlsConnectionOptions,\n        }\n      }\n    }\n    return connectionOptions\n  }\n}\n"]}