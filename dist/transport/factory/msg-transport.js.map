{"version":3,"file":"msg-transport.js","sourceRoot":"","sources":["../../../src/transport/factory/msg-transport.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAEA,sCAAqC;AAErC,uDAAkD;AAElD,uCAA6C;AAGtC,IAAM,YAAY,GAAlB,MAAM,YAAY;IAIvB,YAAyD,EAAU,EACP,MAAoB,EACvB,MAAiB;QAFjB,OAAE,GAAF,EAAE,CAAQ;QACP,WAAM,GAAN,MAAM,CAAc;QACvB,WAAM,GAAN,MAAM,CAAW;QAExE,MAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAA;QAClC,IAAI,CAAC,SAAS,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAA;SAC5C;QAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAA;QACrD,gBAAgB,CAAC,gBAAgB,CAAW,oBAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;QAKtF,IAAI,CAAC,WAAW,GAAG,gBAAgB,CAAC,OAAO,CAAiB,oBAAQ,CAAC,cAAc,CAAC,CAAA;QACpF,IAAI,CAAC,QAAQ,GAAG,gBAAgB,CAAC,OAAO,CAAY,oBAAQ,CAAC,SAAS,CAAC,CAAA;QAGvE,IAAI,MAAM,CAAC,QAAQ,EAAE;YACnB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;SACpD;IACH,CAAC;IAEM,GAAG;QACR,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAA;IACnB,CAAC;IAEM,IAAI;QACT,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC1C,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBAC3B,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;YAClB,CAAC,CAAC,CAAA;YACF,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;gBAC9B,MAAM,CAAC,CAAC,CAAC,CAAA;YACX,CAAC,CAAC,CAAA;YACF,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;gBACjC,MAAM,CAAC,CAAC,CAAC,CAAA;YACX,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC;CACF,CAAA;AA7CY,YAAY;IADxB,IAAA,qBAAU,GAAE;IAKG,WAAA,IAAA,iBAAM,EAAC,oBAAQ,CAAC,SAAS,CAAC,CAAA;IAC1B,WAAA,IAAA,iBAAM,EAAC,oBAAQ,CAAC,YAAY,CAAC,CAAA;IAC7B,WAAA,IAAA,iBAAM,EAAC,oBAAQ,CAAC,SAAS,CAAC,CAAA;qDAAyB,kBAAS;GAN/D,YAAY,CA6CxB;AA7CY,oCAAY","sourcesContent":["import { MsgParser } from '../../buffer'\nimport { MsgTransmitter } from '../msg-transmitter'\nimport { FixDuplex } from '../duplex'\nimport { IJsFixConfig } from '../../config'\nimport { DITokens } from '../../runtime/di-tokens'\nimport { Readable } from 'stream'\nimport { inject, injectable } from 'tsyringe'\n\n@injectable()\nexport class MsgTransport {\n  public readonly transmitter: MsgTransmitter\n  public readonly receiver: MsgParser\n\n  constructor (@inject(DITokens.sessionId) public readonly id: number,\n               @inject(DITokens.IJsFixConfig) public readonly config: IJsFixConfig,\n               @inject(DITokens.FixDuplex) public readonly duplex: FixDuplex) {\n\n    const delimiter = config.delimiter\n    if (!delimiter) {\n      throw new Error(`no delimiter char given.`)\n    }\n\n    const sessionContainer = this.config.sessionContainer\n    sessionContainer.registerInstance<Readable>(DITokens.readStream, this.duplex.readable)\n\n    // let parser replace delimiter with Pipe so fix log does not require\n    // expensive replace\n\n    this.transmitter = sessionContainer.resolve<MsgTransmitter>(DITokens.MsgTransmitter)\n    this.receiver = sessionContainer.resolve<MsgParser>(DITokens.MsgParser)\n\n    // pipe the encoder to say a socket.\n    if (duplex.writable) {\n      this.transmitter.encodeStream.pipe(duplex.writable)\n    }\n  }\n\n  public end (): void {\n    this.duplex.end()\n  }\n\n  public wait (): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n      this.receiver.on('end', () => {\n        resolve(this.id)\n      })\n      this.receiver.on('error', (e) => {\n        reject(e)\n      })\n      this.transmitter.on('error', (e) => {\n        reject(e)\n      })\n    })\n  }\n}\n"]}