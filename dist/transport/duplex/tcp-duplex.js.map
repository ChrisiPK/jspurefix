{"version":3,"file":"tcp-duplex.js","sourceRoot":"","sources":["../../../src/transport/duplex/tcp-duplex.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,6CAAwC;AACxC,2BAA0B;AAC1B,uCAA6C;AAC7C,uDAAkD;AAG3C,IAAM,SAAS,GAAf,MAAM,SAAU,SAAQ,sBAAS;IACtC,YAA2D,MAAkB;QAC3E,KAAK,EAAE,CAAA;QADkD,WAAM,GAAN,MAAM,CAAY;QAE3E,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAA;QACtB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAA;IACxB,CAAC;IAED,GAAG;QACD,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAA;IACnB,CAAC;CACF,CAAA;AAVY,SAAS;IADrB,IAAA,qBAAU,GAAE;IAEG,WAAA,IAAA,iBAAM,EAAC,oBAAQ,CAAC,WAAW,CAAC,CAAA;qCAAyB,GAAG,CAAC,MAAM;GADlE,SAAS,CAUrB;AAVY,8BAAS","sourcesContent":["import { FixDuplex } from './fix-duplex'\nimport * as net from 'net'\nimport { inject, injectable } from 'tsyringe'\nimport { DITokens } from '../../runtime/di-tokens'\n\n@injectable()\nexport class TcpDuplex extends FixDuplex {\n  constructor (@inject(DITokens.duplexParam) public readonly socket: net.Socket) {\n    super()\n    this.readable = socket\n    this.writable = socket\n  }\n\n  end (): void {\n    this.socket.end()\n  }\n}\n"]}