{"version":3,"file":"http-duplex.js","sourceRoot":"","sources":["../../../src/transport/duplex/http-duplex.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6CAAwC;AAExC,6CAA4C;AAG5C,MAAa,UAAW,SAAQ,sBAAS;IACvC,YAAoC,OAAqB;QACvD,KAAK,EAAE,CAAA;QAD2B,YAAO,GAAP,OAAO,CAAc;QAEvD,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,YAAY,EAAE,CAAA;QACzC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,EAAE,CAAA;IACrC,CAAC;IAEO,MAAM,CAAC,YAAY;QACzB,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAA;QAC3C,MAAM,MAAM,GAAG;YACb,IAAI,EAAG,GAAG,EAAE;YAEZ,CAAC;SACF,CAAA;QACD,OAAO,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAA;IAC7B,CAAC;IAEO,YAAY;QAClB,MAAM,OAAO,GAAa,IAAI,CAAC,QAAQ,CAAA;QACvC,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAA;QAC3C,MAAM,MAAM,GAAG;YACb,KAAK,EAAE,CAAO,IAAY,EAAE,CAAM,EAAE,IAAc,EAAE,EAAE;gBACpD,IAAI;oBACF,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAA;oBAC5B,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;oBACxC,EAAE,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,OAAY,EAAE,EAAE;wBAChC,MAAM,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAA;wBACxC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;wBAClB,IAAI,EAAE,CAAA;oBACR,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;wBACtB,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAA;oBAC7B,CAAC,CAAC,CAAA;iBACH;gBAAC,OAAO,CAAC,EAAE;oBACV,IAAI,CAAC,CAAC,CAAC,CAAA;iBACR;YACH,CAAC,CAAA;SACF,CAAA;QACD,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAA;QACrC,OAAO,QAAQ,CAAA;IACjB,CAAC;IAEM,GAAG;QACR,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC1B,CAAC;CACF;AA5CD,gCA4CC","sourcesContent":["import { FixDuplex } from './fix-duplex'\nimport { Readable, Writable } from 'stream'\nimport * as rp from 'request-promise-native'\nimport { IHttpAdapter } from '../http/http-adapter'\n\nexport class HttpDuplex extends FixDuplex {\n  public constructor (public readonly adapter: IHttpAdapter) {\n    super()\n    this.readable = HttpDuplex.makeReadable()\n    this.writable = this.makeWritable()\n  }\n\n  private static makeReadable (): Readable {\n    const Readable = require('stream').Readable\n    const reader = {\n      read:  () => {\n        // nothing\n      }\n    }\n    return new Readable(reader)\n  }\n\n  private makeWritable (): Writable {\n    const forward: Readable = this.readable\n    const Writable = require('stream').Writable\n    const writer = {\n      write: async (data: Buffer, _: any, done: Function) => {\n        try {\n          const adapter = this.adapter\n          const options = adapter.getOptions(data)\n          rp(options).then((message: any) => {\n            const body = adapter.endMessage(message)\n            forward.push(body)\n            done()\n          }).catch((err: Error) => {\n            receiver.emit('error', err)\n          })\n        } catch (e) {\n          done(e)\n        }\n      }\n    }\n    const receiver = new Writable(writer)\n    return receiver\n  }\n\n  public end (): void {\n    this.readable.push(null)\n  }\n}\n"]}