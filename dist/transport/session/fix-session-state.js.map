{"version":3,"file":"fix-session-state.js","sourceRoot":"","sources":["../../../src/transport/session/fix-session-state.ts"],"names":[],"mappings":"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","sourcesContent":["import { ElasticBuffer } from '../../buffer'\nimport moment = require('moment')\nimport { TickAction } from '../tick-action'\nimport { IFixSessionStateArgs } from './fix-session-state-args'\nimport { SessionState } from './session-state'\n\nexport class FixSessionState {\n  public nextTickAction: TickAction = TickAction.Nothing\n\n  public lastReceivedAt: Date = null\n  public LastSentAt: Date = null\n  public lastTestRequestAt: Date = null\n  public logoutSentAt: Date = null\n  public now: Date = new Date()\n  public compId: string = ''\n  public peerCompId: string = ''\n  public peerHeartBeatSecs: number = 0\n  public lastPeerMsgSeqNum: number\n  public readonly heartBeat: number\n  public state: SessionState\n  public readonly waitLogoutConfirmSeconds: number\n  public readonly stopSeconds: number\n\n  private secondsSinceLogoutSent: number = -1\n  private secondsSinceSent: number = -1\n  private secondsSinceReceive: number = -1\n\n  public reset (resetSeqNo: boolean): void {\n    this.lastReceivedAt = null\n    this.LastSentAt = null\n    this.lastTestRequestAt = null\n    this.secondsSinceLogoutSent = -1\n    this.secondsSinceSent = -1\n    this.secondsSinceReceive = -1\n    this.peerHeartBeatSecs = 0\n    this.logoutSentAt = null\n    this.nextTickAction = TickAction.Nothing\n    if (resetSeqNo) {\n      this.lastPeerMsgSeqNum = 0\n    }\n  }\n\n  public constructor ({ heartBeat,\n                        state = SessionState.Idle,\n                        waitLogoutConfirmSeconds = 5,\n                        stopSeconds = 2,\n                        lastPeerMsgSeqNum = 0 }: IFixSessionStateArgs) {\n    this.heartBeat = heartBeat\n    this.state = state\n    this.waitLogoutConfirmSeconds = waitLogoutConfirmSeconds\n    this.stopSeconds = stopSeconds\n    this.lastPeerMsgSeqNum = lastPeerMsgSeqNum\n  }\n\n  private static dateAsString (d: Date) {\n    if (!d) {\n      return 'null'\n    }\n    return moment(d).format('HH:mm:ss.SSS')\n  }\n\n  public toString (): string {\n\n    const buffer = new ElasticBuffer(1024)\n\n    buffer.writeString(`compId = ${this.compId}, `)\n    buffer.writeString(`heartBeat = ${this.heartBeat}, `)\n    buffer.writeString(`state = ${SessionState[this.state]} (${this.state}), `)\n    buffer.writeString(`nextTickAction = ${TickAction[this.nextTickAction]} (${this.nextTickAction}), `)\n    buffer.writeString(`now = ${FixSessionState.dateAsString(this.now)}, `)\n    buffer.writeString(`timeToDie = ${this.timeToDie()}, `)\n    buffer.writeString(`timeToHeartbeat = ${this.timeToHeartbeat()}, `)\n    buffer.writeString(`timeToTerminate = ${this.timeToTerminate()}, `)\n    buffer.writeString(`timeToTestRequest = ${this.timeToTestRequest()}, `)\n    buffer.writeString(`lastReceivedAt = ${FixSessionState.dateAsString(this.lastReceivedAt)}, `)\n    buffer.writeString(`LastSentAt = ${FixSessionState.dateAsString(this.LastSentAt)}, `)\n    buffer.writeString(`lastTestRequestAt = ${FixSessionState.dateAsString(this.lastTestRequestAt)}, `)\n    buffer.writeString(`logoutSentAt = ${FixSessionState.dateAsString(this.logoutSentAt)}, `)\n    buffer.writeString(`peerHeartBeatSecs = ${this.peerHeartBeatSecs}, `)\n    buffer.writeString(`peerCompId = ${this.peerCompId}, `)\n    buffer.writeString(`lastPeerMsgSeqNum = ${this.lastPeerMsgSeqNum}, `)\n    buffer.writeString(`secondsSinceLogoutSent = ${this.secondsSinceLogoutSent}, `)\n    buffer.writeString(`secondsSinceSent = ${this.secondsSinceSent}, `)\n    buffer.writeString(`secondsSinceReceive = ${this.secondsSinceReceive}`)\n\n    return buffer.toString()\n  }\n\n  public calcAction (now: Date): TickAction {\n    this.now = now\n    this.calcState()\n\n    switch (this.state) {\n\n      case SessionState.PeerLogonRejected: {\n        if (this.secondsSinceSent >= this.stopSeconds) {\n          this.nextTickAction = TickAction.Stop\n        }\n        break\n      }\n\n      case SessionState.WaitingLogoutConfirm:\n      case SessionState.ConfirmingLogout: {\n        if (this.timeToDie()) {\n          this.nextTickAction = TickAction.Stop\n        }\n        break\n      }\n\n      case SessionState.ActiveNormalSession:\n      case SessionState.AwaitingProcessingResponseToTestRequest:\n      case SessionState.InitiationLogonReceived:\n      case SessionState.InitiationLogonResponse : {\n        if (this.timeToHeartbeat()) {\n          // have not sent anything for heartbeat period so let other side know still alive.\n          this.nextTickAction = TickAction.Heartbeat\n        } else {\n          // console.log(`${application.name}: secondsSinceSent = ${secondsSinceSent} secondsSinceReceive = ${secondsSinceReceive}`)\n          if (this.timeToTerminate()) {\n            this.nextTickAction = TickAction.TerminateOnError\n          } else if (this.timeToTestRequest()) {\n            if (!this.lastTestRequestAt) {\n              // not received anything from peer\n              this.nextTickAction = TickAction.TestRequest\n              this.lastTestRequestAt = this.now\n            }\n          }\n        }\n        break\n      }\n    }\n\n    return this.nextTickAction\n  }\n\n  public timeToDie (): boolean {\n    return this.secondsSinceLogoutSent > this.waitLogoutConfirmSeconds ||\n      this.secondsSinceLogoutSent > this.stopSeconds\n  }\n\n  public timeToHeartbeat (): boolean {\n    return this.secondsSinceSent >= this.heartBeat\n  }\n\n  public timeToTerminate (): boolean {\n    return this.secondsSinceReceive >= 2.5 * this.peerHeartBeatSecs\n  }\n\n  public timeToTestRequest (): boolean {\n    return this.secondsSinceReceive >= 1.5 * this.peerHeartBeatSecs\n  }\n\n  private calcState (): void {\n    const time = this.now.getTime()\n    this.nextTickAction = TickAction.Nothing\n    this.secondsSinceLogoutSent = this.logoutSentAt ? (time - this.logoutSentAt.getTime()) / 1000 : -1\n    this.secondsSinceSent = (time - this.LastSentAt.getTime()) / 1000\n    this.secondsSinceReceive = (time - this.lastReceivedAt.getTime()) / 1000\n  }\n}\n"]}