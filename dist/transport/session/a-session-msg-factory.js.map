{"version":3,"file":"a-session-msg-factory.js","sourceRoot":"","sources":["../../../src/transport/session/a-session-msg-factory.ts"],"names":[],"mappings":";;;AAGA,uCAAqC;AAerC,MAAsB,kBAAkB;IAEtC,YAA6B,WAAgC,EAAS,UAAyB,IAAI;QAAtE,gBAAW,GAAX,WAAW,CAAqB;QAAS,YAAO,GAAP,OAAO,CAAsB;IACnG,CAAC;IAEM,MAAM,CAAE,OAAe,EAAE,KAAa,EAAE,GAAW,EAAE,MAAc;QACxE,MAAM,CAAC,GAAY;YACjB,UAAU,EAAE,OAAO;YACnB,mBAAmB,EAAE,MAAM;YAC3B,SAAS,EAAE,KAAK;YAChB,IAAI,EAAE,GAAG;SACC,CAAA;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,eAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC7E,CAAC;IAOS,MAAM,CAAE,CAAe,EAAE,IAAY;QAC7C,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IACnE,CAAC;IAEM,WAAW,CAAE,QAAgB,QAAQ,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE;QACpE,MAAM,CAAC,GAAiB;YACtB,SAAS,EAAE,KAAK;SACD,CAAA;QACjB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,eAAO,CAAC,WAAW,CAAC,CAAA;IAC5C,CAAC;IAEM,SAAS,CAAE,SAAiB;QACjC,MAAM,CAAC,GAAe;YACpB,SAAS,EAAE,SAAS;SACP,CAAA;QACf,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,eAAO,CAAC,SAAS,CAAC,CAAA;IAC1C,CAAC;IAEM,aAAa,CAAE,IAAY,EAAE,EAAU;QAC5C,MAAM,CAAC,GAAmB;YACxB,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,EAAE;SACK,CAAA;QACnB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,eAAO,CAAC,aAAa,CAAC,CAAA;IAC9C,CAAC;IAEM,aAAa,CAAE,QAAgB,EAAE,OAAiB;QACvD,MAAM,CAAC,GAAmB;YACxB,WAAW,EAAE,OAAO,KAAK,IAAI;YAC7B,QAAQ,EAAE,QAAQ;SACD,CAAA;QACnB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,eAAO,CAAC,aAAa,CAAC,CAAA;IAC9C,CAAC;IAEM,OAAO,CAAE,QAAgB;QAC9B,MAAM,CAAC,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAA;QAC7B,MAAM,MAAM,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA;QACjC,MAAM,CAAC,GAAG;YACR,QAAQ,EAAE,MAAM;SACG,CAAA;QACrB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAA;IAC1C,CAAC;CACF;AA9DD,gDA8DC","sourcesContent":["import { ISessionMsgFactory } from './session-msg-factory'\nimport { ISessionDescription } from './session-description'\nimport { ILooseObject } from '../../collections/collection'\nimport { MsgType } from '../../types'\n\nimport {\n  IHeartbeat,\n  IReject,\n  IResendRequest,\n  ISequenceReset,\n  IStandardHeader,\n  IStandardTrailer,\n  ITestRequest\n} from '../../types/FIX4.4/repo'\n\nexport interface ObjectMutator { (description: ISessionDescription, type: string, o: ILooseObject): ILooseObject\n}\n\nexport abstract class ASessionMsgFactory implements ISessionMsgFactory {\n  public isAscii: boolean\n  constructor (public readonly description: ISessionDescription, public mutator: ObjectMutator = null) {\n  }\n\n  public reject (msgType: string, seqNo: number, msg: string, reason: number): ILooseObject {\n    const o: IReject = {\n      RefMsgType: msgType,\n      SessionRejectReason: reason,\n      RefSeqNum: seqNo,\n      Text: msg\n    } as IReject\n    return this.mutator ? this.mutator(this.description, MsgType.Reject, o) : o\n  }\n\n  // see implementations Ascii and Fixml\n  public abstract logon (userRequestId: string, isResponse: boolean): ILooseObject\n  public abstract logout (msgType: string, text: string): ILooseObject\n  public abstract header (msgType: string, seqNum: number, time: Date, overrideData?: Partial<IStandardHeader>): ILooseObject\n\n  protected mutate (o: ILooseObject, type: string): ILooseObject {\n    return this.mutator ? this.mutator(this.description, type, o) : o\n  }\n\n  public testRequest (reqId: string = `ping-${new Date().toUTCString()}`): ILooseObject {\n    const o: ITestRequest = {\n      TestReqID: reqId\n    } as ITestRequest\n    return this.mutate(o, MsgType.TestRequest)\n  }\n\n  public heartbeat (testReqId: string): ILooseObject {\n    const o: IHeartbeat = {\n      TestReqID: testReqId\n    } as IHeartbeat\n    return this.mutate(o, MsgType.Heartbeat)\n  }\n\n  public resendRequest (from: number, to: number): ILooseObject {\n    const o: IResendRequest = {\n      BeginSeqNo: from,\n      EndSeqNo: to\n    } as IResendRequest\n    return this.mutate(o, MsgType.ResendRequest)\n  }\n\n  public sequenceReset (newSeqNo: number, gapFill?: boolean): ILooseObject {\n    const o: ISequenceReset = {\n      GapFillFlag: gapFill === true,\n      NewSeqNo: newSeqNo\n    } as ISequenceReset\n    return this.mutate(o, MsgType.SequenceReset)\n  }\n\n  public trailer (checksum: number): ILooseObject {\n    const s = checksum.toString()\n    const padded = s.padStart(3, '0')\n    const o = {\n      CheckSum: padded\n    } as IStandardTrailer\n    return this.mutate(o, 'StandardTrailer')\n  }\n}\n"]}