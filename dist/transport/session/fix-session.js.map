{"version":3,"file":"fix-session.js","sourceRoot":"","sources":["../../../src/transport/session/fix-session.ts"],"names":[],"mappings":"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","sourcesContent":["import { ElasticBuffer, MsgView } from '../../buffer'\nimport { IJsFixConfig, IJsFixLogger } from '../../config'\nimport { FixSessionState } from './fix-session-state'\nimport { MsgTransport } from '../factory'\nimport { MsgTag } from '../../types'\nimport { ILooseObject } from '../../collections/collection'\n\nimport * as events from 'events'\nimport { SessionState } from './session-state'\nimport { SegmentType } from '../../buffer/segment/segment-type'\n\nexport abstract class FixSession extends events.EventEmitter {\n  public logReceivedMsgs: boolean = false\n  protected timer: NodeJS.Timer = null\n  protected transport: MsgTransport = null\n  public manageSession: boolean = true\n  public checkMsgIntegrity: boolean = false\n  protected readonly me: string\n  protected readonly initiator: boolean\n  protected readonly acceptor: boolean\n  protected readonly sessionState: FixSessionState\n  protected readonly sessionLogger: IJsFixLogger\n  protected requestLogoutType: string\n  protected respondLogoutType: string\n  protected requestLogonType: string\n\n  protected constructor (public readonly config: IJsFixConfig) {\n    super()\n    const description = config.description\n    this.me = description.application.name\n    this.sessionState = new FixSessionState(\n      { heartBeat: config.description.HeartBtInt,\n        lastPeerMsgSeqNum: config.description.LastReceivedSeqNum})\n    this.sessionLogger = config.logFactory.logger(`${this.me}:FixSession`)\n    this.initiator = description.application.type === 'initiator'\n    this.acceptor = !this.initiator\n    this.checkMsgIntegrity = this.acceptor\n    this.sessionState.compId = description.SenderCompId\n  }\n\n  public setState (state: SessionState) {\n    if (state === this.sessionState.state) return\n    const logger = this.sessionLogger\n    const prevState = this.sessionState.state\n    const msg = `current state ${SessionState[prevState]} (${prevState}) moves to ${SessionState[state]} (${state})`\n    logger.info(msg)\n    this.sessionState.state = state\n  }\n\n  public getState (): SessionState {\n    return this.sessionState.state\n  }\n\n  public sendLogon () {\n    this.send(this.requestLogonType, this.config.factory.logon())\n  }\n\n  private waitPromise (): Promise<any> {\n    const logger = this.sessionLogger\n    return new Promise<any>((accept, reject) => {\n      if (this.initiator) {\n        logger.debug(`initiator sending logon state = ${this.stateString()}`)\n        this.sendLogon()\n        this.setState(SessionState.InitiationLogonSent)\n      } else {\n        logger.debug(`acceptor waits for logon state = ${this.stateString()}`)\n        this.setState(SessionState.WaitingForALogon)\n      }\n\n      this.on('error', (e: Error) => {\n        logger.error(e)\n        reject(e)\n      })\n\n      this.on('done', () => {\n        accept(this.transport.id)\n      })\n    })\n  }\n\n  public run (transport: MsgTransport): Promise<number> {\n    const logger = this.sessionLogger\n    if (this.transport) {\n      logger.info(`reset from previous transport. state ${this.stateString()}`)\n      this.reset()\n    }\n    this.transport = transport\n    this.subscribe()\n    return this.waitPromise()\n  }\n\n  protected expectedState (): boolean {\n    switch (this.sessionState.state) {\n      case SessionState.ActiveNormalSession:\n      case SessionState.ReceiveLogout:\n      case SessionState.Stopped:\n      case SessionState.ConfirmingLogout:\n      case SessionState.HandleResendRequest:\n      case SessionState.AwaitingProcessingResponseToTestRequest:\n      case SessionState.AwaitingProcessingResponseToResendRequest:\n        return true\n\n      default:\n        return false\n    }\n  }\n\n  protected subscribe () {\n\n    const transport = this.transport\n    const logger = this.sessionLogger\n\n    const rx = transport.receiver\n    const tx = transport.transmitter\n\n    rx.on('msg', (msgType: string, view: MsgView) => {\n      if (this.logReceivedMsgs) {\n        const name = view.segment.type !== SegmentType.Unknown ? view.segment.set.name : 'unknown'\n        logger.info(`${msgType}: ${name}`)\n        logger.info(`${view.toString()}`)\n      }\n      this.sessionState.lastReceivedAt = new Date()\n      if (this.manageSession) {\n        this.onMsg(msgType, view)\n      } else {\n        this.checkForwardMsg(msgType, view)\n      }\n    })\n\n    rx.on('error', (e: Error) => {\n      logger.warning(`rx error event: ${e.message} ${e.stack || ''}`)\n      this.terminate(e)\n    })\n\n    rx.on('done', () => {\n      logger.info('rx done received')\n      this.done()\n    })\n\n    rx.on('end', () => {\n      logger.info(`rx end received sessionState = [${this.sessionState.toString()}]`)\n      const expectedState = this.expectedState()\n      if (expectedState) {\n        logger.info(`rx graceful end state = ${this.stateString()}`)\n        this.done()\n      } else {\n        const e = new Error(`unexpected state - transport failed? = ${this.stateString()}`)\n        logger.info(`rx error ${e.message}`)\n        this.terminate(e)\n      }\n    })\n\n    rx.on('decoded', (msgType: string, data: ElasticBuffer, ptr: number) => {\n      logger.debug(`rx: [${msgType}] ${ptr} bytes`)\n      this.onDecoded(msgType, data.toString(ptr))\n    })\n\n    tx.on('error', (e: Error) => {\n      logger.warning(`tx error event: ${e.message} ${e.stack || ''}`)\n      this.terminate(e)\n    })\n\n    tx.on('encoded', (msgType: string, data: string) => {\n      logger.debug(`tx: [${msgType}] ${data.length} bytes`)\n      this.onEncoded(msgType, data)\n    })\n  }\n\n  protected validStateApplicationMsg (): boolean {\n    switch (this.sessionState.state) {\n      case SessionState.Idle:\n      case SessionState.InitiateConnection:\n      case SessionState.InitiationLogonSent:\n      case SessionState.WaitingForALogon:\n      case SessionState.HandleResendRequest:\n      case SessionState.AwaitingProcessingResponseToTestRequest:\n      case SessionState.AwaitingProcessingResponseToResendRequest:\n        return false\n      default:\n        return true\n    }\n  }\n\n  protected stateString (): string {\n    return SessionState[this.sessionState.state]\n  }\n\n  protected checkForwardMsg (msgType: string, view: MsgView): void {\n    this.sessionLogger.info(`forwarding msgType = '${msgType}' to application`)\n    this.setState(SessionState.ActiveNormalSession)\n    this.onApplicationMsg(msgType, view)\n  }\n\n  protected terminate (error: Error): void {\n    if (this.sessionState.state === SessionState.Stopped) return\n    this.sessionLogger.error(error)\n    if (this.timer) {\n      clearInterval(this.timer)\n    }\n    if (this.transport) {\n      this.transport.end()\n    }\n    this.transport = null\n    this.setState(SessionState.Stopped)\n    this.emit('error', error)\n  }\n\n  protected peerLogout (view: MsgView) {\n    const msg = view.getString(MsgTag.Text)\n    const state = this.sessionState.state\n    switch (state) {\n      case SessionState.WaitingLogoutConfirm: {\n        this.sessionLogger.info(`peer confirms logout Text = '${msg}'`)\n        this.stop()\n        break\n      }\n\n      case SessionState.InitiationLogonResponse:\n      case SessionState.ActiveNormalSession:\n      case SessionState.InitiationLogonReceived: {\n        this.setState(SessionState.ConfirmingLogout)\n        this.sessionLogger.info(`peer initiates logout Text = '${msg}'`)\n        this.sessionLogout()\n      }\n    }\n  }\n\n  protected send (msgType: string, obj: ILooseObject) {\n    const state = this.sessionState.state\n    switch (state) {\n      case SessionState.Stopped: {\n        this.sessionLogger.warning(`can't send in state ${this.stateString()}`)\n        break\n      }\n\n      default: {\n        this.sessionState.LastSentAt = new Date()\n        this.transport.transmitter.send(msgType, obj)\n        break\n      }\n    }\n  }\n\n  protected sendLogout (msg: string) {\n    const factory = this.config.factory\n    this.sessionLogger.info(`sending logout with ${msg}`)\n    this.send(this.requestLogoutType, factory.logout(this.requestLogoutType, msg))\n  }\n\n  protected sessionLogout (): void {\n    const sessionState = this.sessionState\n    if (sessionState.logoutSentAt) {\n      return\n    }\n\n    switch (sessionState.state) {\n      case SessionState.ActiveNormalSession:\n      case SessionState.InitiationLogonResponse:\n      case SessionState.InitiationLogonReceived: {\n        // this instance initiates logout\n        this.setState(SessionState.WaitingLogoutConfirm)\n        sessionState.logoutSentAt = new Date()\n        const msg = `${this.me} initiate logout`\n        this.sessionLogger.info(msg)\n        this.sendLogout(msg)\n        break\n      }\n\n      case SessionState.ConfirmingLogout: {\n        // this instance responds to logout\n        sessionState.logoutSentAt = new Date()\n        const msg = `${this.me} confirming logout`\n        this.sessionLogger.info(msg)\n        this.sendLogout(msg)\n        break\n      }\n\n      default: {\n        this.sessionLogger.info(`sessionLogout ignored as in state ${sessionState.state}`)\n      }\n    }\n  }\n\n  public done (): void {\n    switch (this.sessionState.state) {\n      case SessionState.InitiationLogonResponse:\n      case SessionState.ActiveNormalSession:\n      case SessionState.InitiationLogonReceived: {\n        this.sessionLogout()\n        break\n      }\n\n      case SessionState.Stopped:\n        this.sessionLogger.info(`done. session is now stopped`)\n        break\n\n      default: {\n        this.stop()\n        break\n      }\n    }\n    this.sessionLogger.info(`done. check logout sequence state ${this.stateString()}`)\n  }\n\n  public reset (): void {\n    if (this.timer) {\n      clearInterval(this.timer)\n    }\n    this.transport = null\n    const resetSeqNum = this.config.description.ResetSeqNumFlag || true\n    this.sessionState.reset(resetSeqNum) // from header def ... eventually\n    this.setState(SessionState.NetworkConnectionEstablished)\n  }\n\n  protected stop (error: Error = null): void {\n    if (this.sessionState.state === SessionState.Stopped) {\n      return\n    }\n    if (this.timer) {\n      clearInterval(this.timer)\n    }\n    this.sessionLogger.info(`stop: kill transport`)\n    this.transport.end()\n    if (error) {\n      this.sessionLogger.info(`stop: emit error ${error.message}`)\n      this.emit('error', error)\n    } else {\n      this.emit('done')\n    }\n\n    this.setState(SessionState.Stopped)\n    this.onStopped(error)\n    this.transport = null\n  }\n\n  protected abstract onMsg (msgType: string, view: MsgView): void\n  // application responsible for writing its own log\n  protected abstract onDecoded (msgType: string, txt: string): void\n  protected abstract onEncoded (msgType: string, txt: string): void\n  // an application level message to be handled by implementation, unless\n  // manageSession = false in which case all messages will be forwarded\n  protected abstract onApplicationMsg (msgType: string, view: MsgView): void\n  // inform application peer has logged in - provide login message\n  protected abstract onReady (view: MsgView): void\n  // inform application this session has now ended - either from logout or connection dropped\n  protected abstract onStopped (error?: Error): void\n  // does the application accept the inbound logon request\n  protected abstract onLogon (view: MsgView, user: string, password: string): boolean\n}\n"]}