{"version":3,"file":"msg-transmitter.js","sourceRoot":"","sources":["../../src/transport/msg-transmitter.ts"],"names":[],"mappings":";;;AAEA,mCAAkC;AAClC,+CAA0C;AAG1C,iCAAgC;AAEhC,MAAsB,cAAe,SAAQ,MAAM,CAAC,YAAY;IAI9D,YAAuC,MAAqB,EACrB,WAA2B,EAC3B,OAA4B;QACjE,KAAK,EAAE,CAAA;QAH8B,WAAM,GAAN,MAAM,CAAe;QACrB,gBAAW,GAAX,WAAW,CAAgB;QAC3B,YAAO,GAAP,OAAO,CAAqB;QAEjE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,EAAE,CAAA;QACxC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAQ,EAAE,EAAE;YACzC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;QACvB,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE;YAChC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACnB,CAAC,CAAC,CAAA;IACJ,CAAC;IAGM,IAAI,CAAE,OAAe,EAAE,GAAiB;QAC7C,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,wBAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAA;IACvD,CAAC;IAOO,aAAa;QACnB,MAAM,WAAW,GAAG,IAAI,CAAA;QACxB,OAAO,IAAI,kBAAS,CAAC;YACnB,kBAAkB,EAAE,IAAI;YACxB,SAAS,CAAE,OAAmB,EAAE,QAAQ,EAAE,IAAc;gBACtD,IAAI;oBACF,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAA;oBAC/B,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,CAAA;oBAC3B,WAAW,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,CAAA;oBAC/C,OAAO,CAAC,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,CAAA;oBAC5C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;oBAC1B,MAAM,UAAU,GAAG,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAA;oBAChD,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,UAAU,CAAC,CAAA;oBAChD,IAAI,EAAE,CAAA;iBACP;gBAAC,OAAO,CAAC,EAAE;oBACV,IAAI,CAAC,CAAC,CAAC,CAAA;iBACR;YACH,CAAC;SACF,CAAC,CAAA;IACJ,CAAC;CACF;AA/CD,wCA+CC","sourcesContent":["import { MsgEncoder, ElasticBuffer } from '../buffer'\nimport { FixDefinitions } from '../dictionary/definition'\nimport { Transform } from 'stream'\nimport { MsgPayload } from './msg-payload'\nimport { ILooseObject } from '../collections/collection'\nimport { ISessionDescription } from './session/session-description'\nimport * as events from 'events'\n\nexport abstract class MsgTransmitter extends events.EventEmitter {\n  public readonly encodeStream: Transform\n  public encoder: MsgEncoder\n\n  protected constructor (public readonly buffer: ElasticBuffer,\n                         public readonly definitions: FixDefinitions,\n                         public readonly session: ISessionDescription) {\n    super()\n    this.encodeStream = this.encoderStream()\n    this.encodeStream.on('error', (e: Error) => {\n      this.emit('error', e)\n    })\n    this.encodeStream.on('done', () => {\n      this.emit('done')\n    })\n  }\n\n  // messages at front, byte stream at back\n  public send (msgType: string, obj: ILooseObject): void {\n    this.encodeStream.write(new MsgPayload(msgType, obj))\n  }\n\n  public abstract encodeMessage (msgType: string, obj: ILooseObject): void\n\n  // read fix messages from one side, encode buffers on other ready to pipe\n  // to output stream, say a socket\n\n  private encoderStream (): Transform {\n    const transmitter = this\n    return new Transform({\n      writableObjectMode: true,\n      transform (payload: MsgPayload, encoding, done: Function) {\n        try {\n          const msgType = payload.msgType\n          transmitter.encoder.reset()\n          transmitter.encodeMessage(msgType, payload.obj)\n          payload.encoded = transmitter.encoder.trim()\n          this.push(payload.encoded)\n          const encodedTxt = transmitter.buffer.toString()\n          transmitter.emit('encoded', msgType, encodedTxt)\n          done()\n        } catch (e) {\n          done(e)\n        }\n      }\n    })\n  }\n}\n"]}