{"version":3,"file":"http-initiator.js","sourceRoot":"","sources":["../../../src/transport/http/http-initiator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA,wCAAyC;AACzC,sCAAsC;AAEtC,uCAA6C;AAC7C,uDAAkD;AAClD,8CAAyC;AAGlC,IAAM,aAAa,GAAnB,MAAM,aAAc,SAAQ,sBAAS;IAE1C,YAA4D,MAAoB;QAC9E,KAAK,CAAC,MAAM,CAAC,CAAA;QAD6C,WAAM,GAAN,MAAM,CAAc;QAE9E,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;IACrD,CAAC;IAED,KAAK;QACH,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAClC,CAAC;IAGD,OAAO,CAAE,MAAoB;QAC3B,OAAO,IAAI,OAAO,CAAM,CAAO,MAAM,EAAE,MAAM,EAAE,EAAE;YAC/C,MAAM,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAA;YAC3D,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAM,CAAC,kEAAkE,CAAC,CAAA;aAC3E;YACD,MAAM,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAA;YACrD,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,oBAAQ,CAAC,UAAU,CAAC,EAAE;gBACvD,MAAM,CAAC,IAAI,KAAK,CAAC,yCAAyC,oBAAQ,CAAC,UAAU,oBAAoB,CAAC,CAAC,CAAA;aACpG;YACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gCAAgC,oBAAQ,CAAC,UAAU,EAAE,CAAC,CAAA;YACvE,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,OAAO,CAAa,oBAAQ,CAAC,UAAU,CAAC,CAAA;YAClF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;YAClC,MAAM,kBAAkB,GAAiB,IAAI,sBAAY,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,mBAAU,CAAC,OAAO,CAAC,CAAC,CAAA;YAC7F,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAA;YAC9C,gBAAgB,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;gBACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;gBACxB,MAAM,CAAC,IAAI,CAAC,CAAA;YACd,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAQ,EAAE,EAAE;gBACpB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;gBACpB,MAAM,CAAC,CAAC,CAAC,CAAA;YACX,CAAC,CAAC,CAAA;QACJ,CAAC,CAAA,CAAC,CAAA;IACJ,CAAC;CACF,CAAA;AApCY,aAAa;IADzB,IAAA,qBAAU,GAAE;IAGG,WAAA,IAAA,iBAAM,EAAC,oBAAQ,CAAC,YAAY,CAAC,CAAA;;GAFhC,aAAa,CAoCzB;AApCY,sCAAa","sourcesContent":["import { IJsFixConfig, IJsFixLogger } from '../../config'\nimport { MsgTransport } from '../factory'\nimport { HttpDuplex } from '../duplex'\nimport { FixSession } from '../session/fix-session'\nimport { inject, injectable } from 'tsyringe'\nimport { DITokens } from '../../runtime/di-tokens'\nimport { FixEntity } from '../fix-entity'\n\n@injectable()\nexport class HttpInitiator extends FixEntity {\n  logger: IJsFixLogger\n  constructor (@inject(DITokens.IJsFixConfig) public readonly config: IJsFixConfig) {\n    super(config)\n    this.logger = config.logFactory.logger('initiator')\n  }\n\n  start (): Promise<any> {\n    return this.connect(this.config)\n  }\n\n// the adapter will be provided on config\n  connect (config: IJsFixConfig): Promise<any> {\n    return new Promise<any>(async (accept, reject) => {\n      const adapter = config.description.application.http.adapter\n      if (!adapter) {\n        reject('http initiator needs config.description.application.http.adapter')\n      }\n      const sessionContainer = this.config.sessionContainer\n      if (!sessionContainer.isRegistered(DITokens.FixSession)) {\n        reject(new Error(`application must register a DI token '${DITokens.FixSession}' - see src/sample`))\n      }\n      this.logger.info(`create session with DI Token ${DITokens.FixSession}`)\n      const initiatorSession = sessionContainer.resolve<FixSession>(DITokens.FixSession)\n      this.logger.info('connecting ...')\n      const initiatorTransport: MsgTransport = new MsgTransport(0, config, new HttpDuplex(adapter))\n      this.logger.info('... connected, run session')\n      initiatorSession.run(initiatorTransport).then(() => {\n        this.logger.info('ends')\n        accept(true)\n      }).catch((e: Error) => {\n        this.logger.error(e)\n        reject(e)\n      })\n    })\n  }\n}\n"]}