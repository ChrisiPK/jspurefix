{"version":3,"file":"http-json-sample-adapter.js","sourceRoot":"","sources":["../../../src/transport/http/http-json-sample-adapter.ts"],"names":[],"mappings":"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","sourcesContent":["import { IJsFixConfig, IJsFixLogger } from '../../config'\nimport { HttpTransaction } from './http-transaction'\nimport { Dictionary } from '../../collections'\nimport { IHttpAdapter } from './http-adapter'\nimport { IHtmlRoute } from './html-route'\nimport { IHtmlOptions } from './html-options'\nimport { inject, injectable } from 'tsyringe'\nimport { DITokens } from '../../runtime/di-tokens'\n\n@injectable()\nexport class HttpJsonSampleAdapter implements IHttpAdapter {\n  private logger: IJsFixLogger\n  private queue: HttpTransaction[] = []\n  private token: string = null\n  private routes: Dictionary<IHtmlRoute> = new Dictionary()\n  constructor (@inject(DITokens.IJsFixConfig) public readonly config: IJsFixConfig) {\n    this.logger = config.logFactory.logger('http.adapter')\n    const routes = this.routes\n    const options = config.description.application.http.options\n    if (!options) {\n      return\n    }\n    options.forEach((o: IHtmlRoute) => {\n      routes.addUpdate(o.name, o)\n    })\n    this.logger.info(`instance created routes ${routes.count()}`)\n  }\n\n  public getOptions (data: Buffer): IHtmlOptions {\n    const q = this.queue\n    if (q.length === 0) {\n      return null\n    }\n    const next: HttpTransaction = q.shift()\n    const options = next.options\n    options.body = {\n      fixml: data.toString()\n    }\n    this.logger.info(`${next.msgType}: ${next.options.method} ${next.options.uri} ${data.length}`)\n    return options\n  }\n\n  endMessage (m: any): Buffer {\n    // grab token if not yet received\n    if (!this.token) {\n      const headers = m.headers\n      this.token = headers.authorization\n      this.logger.info(`receive token ${this.token}`)\n    }\n    return m.body\n  }\n\n  beginMessage (msgType: string): void {\n    // build options based on type\n    const routes = this.routes\n    const route = routes.get(msgType) || routes.get('default')\n    const options = {\n      method: route.value.method,\n      uri: route.value.uri,\n      json: route.value.json,\n      resolveWithFullResponse: route.value.resolveWithFullResponse,\n      headers: route.value.headers\n    } as IHtmlOptions\n    const headers = options.headers\n    if (headers) {\n      if (this.token) {\n        headers.authorization = this.token\n      } else if (msgType === 'UserReq') {\n        delete headers.authorization\n      }\n    }\n    this.queue.push(new HttpTransaction(msgType, options))\n  }\n}\n"]}